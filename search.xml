<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>新的翻车集 [翻车]</title>
      <link href="/posts/22925.html"/>
      <url>/posts/22925.html</url>
      
        <content type="html"><![CDATA[<p>noip出分了之后悲痛欲绝励志退役然后就把blog全删掉了???</p><p>后来还是想再苟一苟???</p><p>于是有了新的翻车集...</p><span id="more"></span><ol type="1"><li>ST表的边界和查询的时候应该返回<code>max(st[l][jg - 1], st[r - (1 &lt;&lt; (jg - 1)) + 1][jg - 1]);</code>(右边要<code>+1</code>避免遗漏)</li><li>关流同步 + <code>cin.tie(NULL)</code>还是不如快读...<strong>关了流同步文件操作会GG</strong></li><li>高精度进位的条件是<code>&lt;=</code>...高精去前导<code>0</code>的时候不要忘记只有一位数<code>0</code>的情况...</li><li>tarjan 求强连通分量是单向边...</li><li>炸空间...算好空间比算好时间更加重要</li><li>开栈:<code>-O2 -Wshadow -Wunused -g -Wall -Wextra -Wl,--stack=67108864</code></li><li>防炸<code>LL</code>先除后乘, 防炸精度先乘后除</li><li>求最大的<span class="math inline">\(ans\)</span>没有取<spanclass="math inline">\(\max\)</span>????</li><li><strong>线段树没有<code>push_down</code>就递归了???<del>(这两个都是特别困的时候犯的错误)</del>,又犯了.................</strong></li><li>初始化数组的时候, 数组大小是<code>MAXN</code>,结果初始化的时候循环到了<code>MAXN</code> ...</li><li><strong>有了思路就去写代码...甚至没有去手玩样例...</strong></li><li>如果这么写<span class="math inline">\(\max\)</span>函数:<code>#define max(a, b) ((a) &gt; (b) ? (a) :(b))</code>,然后你又将函数的返回值当成变量放在了<code>max()</code>里,而你的函数又恰好会对某些全局的值造成影响,你就会发现你的值被改变了两次...<span class="math inline">\(\to \mathrm{GG}(WA+TLE)\)</span></li><li><code>lazy</code>标记...覆盖是用<code>=</code>,区间加是<code>+=</code>...</li><li>数组代表的意思自己给忘了...记得加点注释吧</li><li><strong>树链剖分<code>while</code>里比较的是<code>if (ta[ta[x].top].deep &lt; ta[ta[y].top].deep)</code>,而不是<code>if (ta[x].deep &gt; ta[y].deep)</code>,(怎么感觉最近犯的错误越来越低级了...</strong></li><li><code>(b[dq].le + b[dq].ri) &gt;&gt; 1</code>写成<code>(le + ri) &gt;&gt; 1</code><spanclass="math inline">\(\to \mathrm{GG}\)</span>(爆栈)(怎么感觉最近犯的错误越来越低级了...</li><li><code>priority_queue</code>中的<code>cmp</code>如果是仿函数别忘了里面的大小比较是正好相反的...</li><li>反向边的编号计算应该是这样:<code>#define bh(x, i) ((MAXN) * (i) + (x))</code>,而不是<code>#define bh(x, i) ((MAXK) * (i) + (x))</code>,即注意每一次都是复制了一整张图...</li><li>谨慎用宏...改加的不该加的括号都想清楚了...能加就加上吧...反着你也背不过运算优先级...</li><li>SA...居然能把<code>last = i</code>写成<code>i = last</code>...SA打的还是不是很熟...</li><li>SA把<code>sa[tong[fir[i]]--] = i</code>写成了<code>sa[tong[fir[i]--]]</code>...也许我应该在中括号之间加个空格啥的...<code>fir</code>数组你减个**啊...</li><li>SPFA...<code>inq[dq]</code>忘了置成<code>false</code>...还有<code>dq = q.front()</code>后忘了<code>q.pop()</code>...我真是越来越傻逼了...</li><li><span class="math inline">\(exgcd\)</span> <spanclass="math inline">\(ax + by = 1\)</span>最后<spanclass="math inline">\(x\)</span>加上的是<span class="math inline">\(b /\gcd\)</span>...不是<span class="math inline">\(y /\gcd\)</span>...你求出的是<span class="math inline">\(a,b\)</span>的<span class="math inline">\(\gcd\)</span>...用<spanclass="math inline">\(y\)</span>除是要闹哪样...果然我越来越傻逼了...</li><li><span class="math inline">\(exgcd\)</span> 最后是<spanclass="math inline">\(y -= a / b *x\)</span>而不是什么奇奇怪怪的东西...过了这么长时间背的还是不熟啊...<del>主要是不想做数论题</del></li><li>找负环的时候别忘了在<code>dfs</code>回溯的时候把当前节点的<code>vis</code>标记置为<code>false</code>,防止横叉边被误判成负环</li><li>写错变量名...</li><li>数组把<code>MAXN * 32</code>写成<code>MAXN &lt;&lt; 32</code>...而且编译完了测样例是WA而不是RE...</li><li>函数传参数的时候忘改成<code>LL</code>....</li><li>输出忘了<code>%lld</code>...</li><li><code>dinic</code>的<code>bfs()</code>忘记写<code>dis[s] = 1</code>...</li><li><code>INF</code>赋小了...这个需要仔细算一下</li><li><code>m</code>和<code>n</code>写反...或者没改全...比如求平均数除错了...</li><li>树剖:<code>x = ta[ta[x].top].fa</code>...而不是<code>x = ta[x].top</code></li><li>codeblocks用中文工程名...还怀疑codeblocks不能调试...</li><li><code>for (int i = g[dq]; ~i; i = b[i].next)</code>没有<code>memset(g, -1, sizeof(g));</code></li><li>ST表: <code>if (le + (t &lt;&lt; 1) - 1 &lt;= n)</code> 以及<code>if (le + (1 &lt;&lt; t) &lt;= n)</code>...直接给我<spanclass="math inline">\(RE\)</span>成零分了...</li><li>进行一个类似<code>fr[i] = fr[i - 1] + a[i] * i</code>的预处理时(只把<code>fr[]</code>设为<code>LL</code>了)没有把<code>a[]</code>开成<code>LL</code>,这样在进行乘法的时候就已经炸了...</li><li>分块的时候最后一个右边界没有和<spanclass="math inline">\(n\)</span>取<spanclass="math inline">\(min\)</span>, 然后就凉了</li><li>进行会爆<code>int</code>的位运算, 写成了<code>1 &lt;&lt; i</code>,应该是<code>1ll &lt;&lt; i</code></li><li>在有多种边的图中, 跑<span class="math inline">\(kruskal\)</span>,把存这一个边数组排了序, 结果<spanclass="math inline">\(kruskal\)</span>的时候加了另一种边...</li><li>数组不要开小, 尤其主席树...不要尝试算准空间...往大里开就完事了</li><li>排序时注意相等的情况应该让哪个排在前面</li><li>树状数组<code>for(int i = x; i &lt;= n; i += lowbit(i))</code>注意判断是否传入的是<spanclass="math inline">\(0\)</span></li><li><spanclass="math inline">\(tarjan\)</span>缩点的时候要判断两个点是否属于一个连通分量</li><li><span class="math inline">\(tarjan\)</span>缩点之后可能会出现重边,注意对答案的影响</li><li>倍增求LCA的时候,在两个点跳到一个深度的时候记得看看这两个点是否已经相等了</li><li>网络流题目给的邻接矩阵, 建图的时候忘了加反向边</li><li>带取膜的前缀和, 求区间和的时候忘了处理负数</li><li>忘记输出答案 以为<span class="math inline">\(RE\)</span>了...</li><li><code>int</code>的范围是<code>2e9</code>...不要想当然的读入用<code>int</code>然后溢出</li><li>试除小于根号质数来分解质因数的时候别忘了除完最后可能不为<code>1</code></li><li>倍增没有给<code>lgn</code>赋值...居然还能过不少点真是太真实了...</li><li>没有注意到可能图不是连通图...</li><li>SAM没有<code>init()</code></li><li>分块忘记处理询问区间包含的数很少, 没有包含任何一个块的情况</li><li><span class="math inline">\(0\)</span>是自然数</li><li>按秩合并的并查集在合并的时候没有判断他们两个是否已经属于一个并查集了(还有合并可并对的时候)</li><li>全局的结构体似乎里面的值也不一定都是<code>0</code>?还是需要初始化一下的啊</li><li>注意特殊情况的特判</li><li>多组数据 一组数据读到一半就判断出答案了 然后就直接跳到了下一组导致下一组的读入加上了这一组未读入的部分</li><li>线性基没有判断要插入的数当前这一位是不是<code>1</code>...</li><li>树刨忘记写最后他们在一条重链上的情况了 = =</li><li>据说开场看题的时候要先把一眼分标出来?</li><li><strong>AC自动机预处理<code>fail</code>边的时候忘了把下一层节点<code>push</code>进队列了...</strong></li><li>转化来转化去的时候 别忘了搞清楚编号究竟是哪个的编号这个函数要传的是什么的编号</li><li>矩阵乘法矩阵的大小(结构体里的<code>n</code>和<code>m</code>)没有赋值</li></ol>]]></content>
      
      
      <categories>
          
          <category> 翻车笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 翻车 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>颓废笔记 Diary [颓废]</title>
      <link href="/posts/3632.html"/>
      <url>/posts/3632.html</url>
      
        <content type="html"><![CDATA[<p>听说Refun开了个日记消费老年退役选手</p><p>那我也来骗访问量好了</p><span id="more"></span><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=22677568&amp;auto=1&amp;height=66"></iframe><h3 id="section">12.30</h3><h4 id="section-1">08:16</h4><p>冬日绘板...</p><figure><img src="../pictures/20181230A.jpg" alt="GG" /><figcaption aria-hidden="true">GG</figcaption></figure><p>fu鳖: 我们在ta嘴里画白色吧</p><p>refun: 我们在ta脸上画正字吧</p><p>宽嫂: ...</p><h4 id="section-2">08:38</h4><p>去看大爷的博客, 背景是猪头少年的学姐</p><p>refun: 这是我老婆!</p><p>宽嫂: 哦 那你就是猪头少年了啊</p><p>refun: 不我比猪头少年骚话多</p><p>宽嫂 &amp;&amp; fu鳖: 那你就是骚猪了啊</p><h4 id="section-3">08:41</h4><p>refun: 你那个访问量不算 你那个刷新一次就算一次访问量</p><p>宽嫂: 你这个不也是吗</p><p>refun: 你刷新一次试试</p><p>宽嫂(F5): ...淦ta访问量加一了啊</p><p>refun: 你再刷新试试</p><p>宽嫂 &amp;&amp; fu鳖: 我好像察觉了什么...</p><h4 id="section-4">08:55</h4><p>fu鳖: 那个人比他dio, 500多分</p><p>gayge: 什么? 比他高了500分???</p><p>fu鳖: 是比他dio, 500多分!</p><p>gayge: 那不就是比他高了500多分吗!</p><p>宽嫂: ...</p><h4 id="section-5">08:57</h4><p>fu鳖(看我写日记, 我把ta写成了fuge): 你能不能用我那个有b的ID啊</p><p>宽嫂: 好嘞哥</p><p>fuge -&gt; fu鳖</p><p>fu鳖 &amp;&amp; gayge: ...</p><h4 id="section-6">09:58</h4><p>refun: CF不是英国和美国一起办的吗</p><h3 id="section-7">01.09</h3><h4 id="section-8">08:59</h4><p>宽嫂: woc我忘删文件操作了!</p><p>2s过后...</p><p>宽嫂: woc ta过了!!!</p><p>gayge &amp;&amp; 宽嫂: ???</p><h3 id="section-9">01.14</h3><h4 id="section-10">08:31</h4><p>gayge: 你讨厌啥动物</p><p>宽嫂: 我除了哺乳动物和爬行动物都不喜欢, 其他的都好恶心...</p><p>gayge: 那鸟呢</p><p>宽嫂: 鸟不是爬行动物吗(大雾</p><p>gayge: ???</p><p>A哥: 鸟不是哺乳动物吗?</p><p>宽嫂 &amp;&amp; gayge: ???</p><h4 id="section-11">09:14</h4><p>gayge: 你这是黄鼠狼给鸡下蛋啊</p><p>宽嫂: 我不是 我没有</p><h4 id="section-12">09:42</h4><p>宽嫂: 诶我怎么光想吐啊 我是不是怀孕了...</p><h4 id="section-13">11:05</h4><p>宽嫂(摇头晃脑中): 改革春风吹满地~~~吹呀么吹满地~~~中国人民真争气~~~真呀吗真争气~~~这个世界太...(戛然而止)</p><p>loli从我身边走过 给我留下宽厚而寂寞的背影</p><p>gayge: 我现在为什么有点心疼loli呢...</p><h4 id="section-14">17:00</h4><p>宽嫂和gayge在看ThinkPad X1Carbon的宣传片</p><p>宽嫂(请想象墨索里尼双手抱胸图): 你知道这个Carbon是什么意思吗这个电脑啊 ta的外壳是活性炭做的!</p><p>气氛突然沉默了一会</p><p>宽嫂: 诶不对活性炭好些是用来吸附的那个...这个好像是碳纤维...</p><h4 id="section-15">17:13</h4><p>fu鳖: 这个<code>vim</code>怎么复制啊</p><p>宽嫂: <code>cat visit.cpp</code>然后就能复制了</p><p>fu鳖: 这个<code>cat</code>是啥意思啊</p><p>昊哥: 就是陈俊锟</p><p>宽嫂: 对就是你看那些什么牛逼的人放法术都要大喊一声"上古鳖神奥义之神说要有鳖",然后你对着命令行大喊一声"陈俊锟!"就能复制代码了</p><p>fu鳖: 那我在考场上大喊一声"陈俊锟!"会发生啥</p><p>refun(这个糟老头子坏的很): 陈俊锟会走过来问"同学有什么事情吗"</p><p>(已笑傻</p><h3 id="section-16">02.14</h3><p>zky学长来讲课辣! fu鳖不知道为什么成为了学长特别的关注对象于是就出现了下面的场景...</p><ul><li>学长在fu鳖后面一边跺着脚一遍喊 "AC! AC!"</li><li>学长坐在fu鳖旁边一边吃着薯片一边说"你看ta肯定AC了你直接关掉这个页面就...诶他怎么WA了"</li><li>学长摸着fu鳖的头: "原来你是高二的啊"</li><li>学长一个下午都坐在fu鳖旁边看ta写代码……<ul><li>晚饭后...</li><li>fu鳖: 诶学长是不是已经走了啊</li><li>gayge: 对我刚才看ta走大门来着</li><li>fu鳖：太好了我终于可以看那道题的题解了</li></ul></li><li>学长玩着手机 突然传出一声<del>娇喘</del>"欧尼酱~"emmmmm....有诗赞曰: "视频千万条 静音第一条 视频不静音 学生两开花"</li></ul><h3 id="section-17">02.15</h3><p>学长写了一个公式 <span class="math display">\[span(v) = \{\sum a_iv_i\, | \,a_i \in \mathbb F\}\]</span> 然后亲切的问fu鳖: 你看懂了吗</p><p>fu鳖: 没有</p><p>学长: ???</p><p>fu鳖: 这个<span class="math inline">\(a_iv_i\)</span>为啥能整除<spanclass="math inline">\(a_i\)</span>啊</p><p>(我突然有点心疼学长呢怎么)</p><h3 id="section-18">02.16</h3><p>宽嫂: 哎呀这个玩意在我电脑上跑了20s 你说bzoj的30s他能跑过去吗</p><p>gayge: ...(并伸手摸了摸我有没有发烧)</p><p>宽嫂: woc他bzoj只跑了15s??!!</p><p><del>震惊 SD某知名高中的电脑竟不如bzoj测评机</del></p><h3 id="section-19">02.17</h3><p>A哥把ta寒假开学来喝的旺仔牛奶罐子放在了桌子上(懒得扔)Gayge看着很不爽于是就把他们摞了起来... ==...然后还加了一个我的芬达瓶子在顶上... = =+ ...而且眼睛都朝着一个方向差不多就这个效果</p><p><img src="../pictures/20190217B.jpg" /></p><p>成为了机房的图腾(晴)</p><p>然后...loli走了过来...</p><p>loli: 这是...地震测量仪吗...</p><p>(我突然有点心疼loli呢怎么)</p><h3 id="section-20">02.21</h3><p>我和fu鳖讨论了一路A哥的职业问题:</p><p>A哥大招前摇随距离增加而变长 追踪差 正面刚容易被躲开 但是伤害巨大无法格挡 所以只能进行背刺一类的战术</p><p>A哥大招后摇也比较长 这段时间的硬直很容易被破防或者吃伤害所以不能在人群密集的地方开团 只能抓落单的刺杀</p><p>最后 A哥的首字母是A 刺客(Assassin)的首字母也是A 所以A哥是刺客</p><p><span class="math inline">\(\mathrm {Q.E.D.}\)</span></p><h3 id="section-21">03.06</h3><p>经历多次沙雕时刻被loli绕后的尴尬局面</p><p>我突然觉得 我可以在电脑上装个后视镜 ←_←</p><figure><img src="../pictures/20190306A.jpg" alt="居然有人已经想出来了" /><figcaption aria-hidden="true">居然有人已经想出来了</figcaption></figure><p><ahref="https://a-failure.github.io/9999/12/31/%E6%97%A5%E8%AE%B0+%E6%9C%BA%E6%88%BF%E8%B6%A3%E4%BA%8B/">Gayge的日记比我的有意思多了</a></p><figure><img src="../pictures/20190111A.png" alt="still feel lonely..." /><figcaption aria-hidden="true">still feel lonely...</figcaption></figure><p>By 准备退役旅游的 Cansult</p>]]></content>
      
      
      <categories>
          
          <category> 颓废笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 颓废 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>颓废笔记 诈尸</title>
      <link href="/posts/18113.html"/>
      <url>/posts/18113.html</url>
      
        <content type="html"><![CDATA[<p>诈尸</p><span id="more"></span><p>又一次重建博客</p><p>要去工作了 也许我应该把以前的东西收起来然后写点新东西</p>]]></content>
      
      
      <categories>
          
          <category> 颓废笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 颓废 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>翻车笔记 Tyvj1952 Easy &amp;&amp; OSU! [期望DP]</title>
      <link href="/posts/61115.html"/>
      <url>/posts/61115.html</url>
      
        <content type="html"><![CDATA[<p>啥时候得自己学学概率了</p><p>蛋疼</p><span id="more"></span><h3 id="tyvj1952-easy"><ahref="https://darkbzoj.tk/problem/3450">Tyvj1952 Easy</a></h3><p>考虑递推, 计算答案的增量, <span class="math inline">\(f_{n} - f_{n -1} = (x + 1)^2\cdot p_i - x^2\)</span>, 其中<spanclass="math inline">\(x\)</span>代表从<span class="math inline">\(n -1\)</span>向前延伸的最长连续o的期望, <spanclass="math inline">\(p_i\)</span>是位置<spanclass="math inline">\(n\)</span>上为o的概率</p><p>所以<span class="math inline">\(f_n = f_{n - 1} + p_i\cdot (2x_{n -1} + 1)\)</span>, 我们只需要计算出<spanclass="math inline">\(\{x_n\}\)</span>就可以了</p><p>这就很简单了 <span class="math inline">\(x_n = (x_{n - 1} + 1) \cdotp_n\)</span></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 300000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DD double</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n, a[MAXN + <span class="number">5</span>];</span><br><span class="line"><span class="type">char</span> s[MAXN + <span class="number">5</span>];</span><br><span class="line">DD El[MAXN + <span class="number">5</span>], ans;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">a[i] = (s[i - <span class="number">1</span>] == <span class="string">&#x27;?&#x27;</span>) ? <span class="number">2</span> :</span><br><span class="line">(s[i - <span class="number">1</span>] == <span class="string">&#x27;x&#x27;</span> ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (!a[i]) El[i] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (a[i] == <span class="number">1</span>) El[i] = El[i - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> El[i] = (El[i - <span class="number">1</span>] + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">ans += (a[i] == <span class="number">1</span>) ? El[i - <span class="number">1</span>] * <span class="number">2</span> + <span class="number">1</span> : (a[i] == <span class="number">2</span> ? (El[i - <span class="number">1</span>] + <span class="number">0.5</span>) : <span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.4lf&quot;</span>, ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="osu"><a href="https://darkbzoj.tk/problem/4318">OSU!</a></h3><p>和上面的题差不多</p><p><span class="math inline">\(f_{n} - f_{n - 1} = (x + 1)^2\cdot p_i -x^2\)</span></p>]]></content>
      
      
      <categories>
          
          <category> 翻车笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 期望DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记 斜率优化DP</title>
      <link href="/posts/14962.html"/>
      <url>/posts/14962.html</url>
      
        <content type="html"><![CDATA[<p><code>&gt; 正值青春脑子灵, ______________</code></p><p>爷总算也会斜率优化辣!</p><span id="more"></span><p>从<a href="https://darkbzoj.tk/problem/1010">例题</a>讲起,先写个朴素的dp式子</p><p><span class="math display">\[f_i\textrm{ 代表前i个玩具装箱后的最小代价} \\f_i = \min\{f_j + (i - j - 1 + S_i - S_j - L) ^ 2\} \quad (j &lt; i)\]</span></p><p>我们发现这狗东西是<span class="math inline">\(n^2\)</span>的,我们把式子化简一下</p><p><span class="math display">\[f_i = \min\{f_j + [(i + S_i) - (j + S_j) - L - 1]^2\} \\\text{令 }A_i = S_i + i,\, L&#39; = L + 1,\, B_i = A_i + L&#39;\\f_i = \min\{f_j + (A_i - A_j - L&#39;)^2\}\\f_i = \min\{f_j + (A_i - B_j)^2\}\\f_i = \min\{f_j + A_i^2 - 2A_iB_j + B_j^2\}\\f_i - A_i^2 = \min\{f_j - 2A_iB_j + B_j^2\}\]</span></p><p>我们发现我们基本上把与 i 相关的和与 j 相关的都分到了等式的两侧, 除了<span class="math inline">\(2A_iB_j\)</span></p><p>我们发现如果我们把和 <span class="math inline">\(i\)</span>相关的和与 <span class="math inline">\(j\)</span> 相关的部分分开之后,有丶像一个一次方程:</p><p>我们设</p><p><span class="math display">\[\begin{cases}y = f_i - A_i^2\\x = B_j\\k = 2A_i\\b = f_j + B_j^2\end{cases}\]</span></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 斜率优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>比赛总结 Codeforces Round 680 (Div. 2, based on Moscow Team Olympiad)</title>
      <link href="/posts/65233.html"/>
      <url>/posts/65233.html</url>
      
        <content type="html"><![CDATA[<p>终于不掉分了</p><p><del>因为已经掉底了</del></p><span id="more"></span><p><a href="https://codeforc.es/contest/1445">传送门</a></p><h3 id="a.-array-rearrangment">A. Array Rearrangment</h3><p><code>multiset</code>搞搞搞</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 50</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DD double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> t;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;t);</span><br><span class="line"><span class="keyword">while</span> (t--) &#123;</span><br><span class="line"><span class="type">int</span> n, a[MAXN + <span class="number">5</span>], b[MAXN + <span class="number">5</span>], x;</span><br><span class="line">multiset&lt;<span class="type">int</span>&gt; gg;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;x);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;b[i]), gg.<span class="built_in">insert</span>(x - b[i]);</span><br><span class="line"><span class="type">bool</span> ok = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">multiset&lt;<span class="type">int</span>&gt;::iterator ggx = gg.<span class="built_in">lower_bound</span>(a[i]);</span><br><span class="line"><span class="keyword">if</span> (ggx == gg.<span class="built_in">end</span>()) &#123;</span><br><span class="line">ok = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">gg.<span class="built_in">erase</span>(ggx);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">puts</span>(ok ? <span class="string">&quot;Yes&quot;</span> : <span class="string">&quot;No&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="b.-elimination">B. Elimination</h3><p>题意:</p><p>第一场的前100名第一场都至少a分, 第二场都至少b分第二场的前100名第二场都至少c分, 第一场都至少d分</p><p>或者说:</p><p>构造一个<code>pair</code>的数组,以<code>first</code>排序时前100名的<code>first = a, second &gt;= b</code>;以<code>second</code>排序时前100名的<code>second = c, first = d</code>.求在以<code>first + second</code>排序时第100名的最小值</p><p>题解:</p><p>因为没有限定人数, 所以只要取<code>max(a + b, b + c)</code>就好了(一百个人是第一场<code>a</code>第二场<code>b</code>分,一百个人是第二场<code>c</code>分第一场<code>a</code>分)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">第一场的前100名第一场都至少a分, 第二场都至少b分</span></span><br><span class="line"><span class="comment">第二场的前100名第二场都至少c分, 第一场都至少d分</span></span><br><span class="line"><span class="comment">构造一个pair, 以first排序时前100名的first = a, second &gt;= b; 以second排序时前100名的second = c, first = d</span></span><br><span class="line"><span class="comment">求在以first + second排序时第100名的最小值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DD double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> t;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;t);</span><br><span class="line"><span class="keyword">while</span> (t--) &#123;</span><br><span class="line"><span class="type">int</span> a, b, c, d;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c, &amp;d);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">max</span>(a + b, c + d));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="c.-division">C. Division</h3><p>题意:</p><p>给两个数<code>a, b</code>,找一个最大的<code>x</code>满足<code>a % x == 0 &amp;&amp; x % b != 0</code></p><p>题解:</p><p>筛完素数 枚举质因数就行了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DD double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 100000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">bool</span> isp[MAXN + <span class="number">5</span>];</span><br><span class="line">LL prim[MAXN + <span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(isp, <span class="literal">true</span>, <span class="built_in">sizeof</span>(isp));</span><br><span class="line">    isp[<span class="number">1</span>] = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= MAXN; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isp[i])</span><br><span class="line">            prim[++prim[<span class="number">0</span>]] = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= prim[<span class="number">0</span>] &amp;&amp; (LL)i * prim[j] &lt;= MAXN; j++) &#123;</span><br><span class="line">            isp[i * prim[j]] = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (i % prim[j] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="type">int</span> t;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;t);</span><br><span class="line"><span class="keyword">while</span> (t--) &#123;</span><br><span class="line">LL a, b;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>, &amp;a, &amp;b);</span><br><span class="line"><span class="keyword">if</span> (a % b != <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, a);</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">LL ans = a;</span><br><span class="line"><span class="keyword">while</span> (ans % b == <span class="number">0</span>) ans /= b;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= prim[<span class="number">0</span>] &amp;&amp; prim[i] &lt;= b; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (b % prim[i]) <span class="keyword">continue</span>;</span><br><span class="line">LL bans = <span class="number">0</span>, aans = <span class="number">0</span>, xb = b, xa = a;</span><br><span class="line"><span class="keyword">while</span> (xb % prim[i] == <span class="number">0</span>) ++bans, xb /= prim[i];</span><br><span class="line"><span class="keyword">while</span> (xa % prim[i] == <span class="number">0</span>) ++aans, xa /= prim[i];</span><br><span class="line">LL xans = a;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= aans - bans + <span class="number">1</span>; j++) xans /= prim[i];</span><br><span class="line">ans = <span class="built_in">max</span>(ans, xans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="d.-divide-and-sum">D. Divide and Sum</h3><p>题意:</p><p>给一个长度为 <span class="math inline">\(2n\)</span> 的数列,分成两个长度为 <span class="math inline">\(n\)</span> 的数列 <spanclass="math inline">\(\{a_n\}, \{b_n\}\)</span> 一个从小到大排序,一个从大到小排序, 令 <span class="math inline">\(F = \sum_{i = 1}^n |a_i- b_i|\)</span> 求出所有可能的 <span class="math inline">\(F\)</span>的和</p><p>题解:</p><h3 id="e">E</h3><p>题意:</p><p>给一个图, 每个点有所属的一个group, 问有多少种方案能选出两个group,里面的点和边组成一个二分图</p><p>题解:</p><p>我一开始想的是, 先对每个group的点和边测一下二分图.然后把所有的边按照它连接的两个group分组, 对于每一个组, 检验组中的每一条边加入后 这两个组和这些边组成的图是否是一个二分图</p><p>然后就是如何检验的问题了</p><p>我一开始想的是对于每一条边看他两边的点的<code>dis</code>的奇偶的异或,然后如果一个组里所有的边的异或值都相等, 那么就是合法的</p><p>后来发现了一个比较严重的问题(第三个样例):我们之前的检验方法没有考虑到组内边的互相影响</p><p>后来瞅了一眼题解, 发现了一个词 "compress", 一下子完全理解了,我们在检验的时候其实可以用更暴力的方法: 直接加边后dfs. 但是我们发现,这样复杂度有点小高, 考虑复杂度的主要来源是每一个组内的边都要重复被加入<span class="math inline">\(\mathrm O(m)\)</span> 次,所以我们可以对一个组内的点进行压缩,把<code>dis</code>是奇数和偶数的点分别压缩成一个点,然后在这两个点之间连边, 然后把组里的边加入后dfs就可以了</p><p>然后就是一些细节问题</p><p>首先组内的点可能不一定联通, 所以压缩实际上是对每一个联通块来压缩,然后要还要考虑一个group是二分图却不与其他是二分图的group联通 的情况,记录出来之后加一加就好了</p><p>最后别忘了数组开大点 然后初始化的时候也记得脑子清醒点,搞清楚那些位置变化了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给一张无向图, 每个点有一个所属的group, 问有多少中选择group的方法, 让两个group里的点可以形成一个二分图</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DD double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 500000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXM 500000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edg</span> &#123;</span><br><span class="line"><span class="type">int</span> from, to, next;</span><br><span class="line">&#125; b[MAXM * <span class="number">2</span> + <span class="number">5</span>], ob[MAXM + <span class="number">5</span>], nb[MAXM * <span class="number">10</span> + <span class="number">5</span>]; <span class="comment">// ob: 原始的边</span></span><br><span class="line"><span class="type">int</span> g[MAXN + <span class="number">5</span>], cntb, n, m, k, group[MAXN + <span class="number">5</span>], dis[MAXN + <span class="number">5</span>], cntg, cnte, belong[MAXN + <span class="number">5</span>], ndis[MAXN * <span class="number">2</span> + <span class="number">5</span>];</span><br><span class="line"><span class="type">int</span> ng[MAXN * <span class="number">2</span> + <span class="number">5</span>], cntn;</span><br><span class="line">LL ans;</span><br><span class="line"><span class="type">bool</span> ise[MAXN + <span class="number">5</span>], chan[MAXN + <span class="number">5</span>];</span><br><span class="line">map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; bh[MAXN + <span class="number">5</span>]; <span class="comment">// 记录连接group(i, j)这一类边在bigb中的编号</span></span><br><span class="line">map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; xbh[MAXN + <span class="number">5</span>];</span><br><span class="line">set&lt;<span class="type">int</span>&gt; ce[MAXN + <span class="number">5</span>];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; bigb[MAXM + <span class="number">5</span>]; <span class="comment">// 记录连接同一对group的边的编号, 每次检查一类边, 看看是否合法, 如果合法就++ans</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; ning[MAXN + <span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ade</span><span class="params">(<span class="type">int</span> fr, <span class="type">int</span> to)</span> </span>&#123;</span><br><span class="line">b[++cntb] = &#123;fr, to, g[fr]&#125;;</span><br><span class="line">g[fr] = cntb;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ade2</span><span class="params">(<span class="type">int</span> fr, <span class="type">int</span> to)</span> </span>&#123;</span><br><span class="line">nb[++cntn] = &#123;fr, to, ng[fr]&#125;;</span><br><span class="line">ng[fr] = cntn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> ok;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> now)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = g[now]; i; i = b[i].next) &#123;</span><br><span class="line"><span class="keyword">if</span> (group[b[i].to] != group[now]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (dis[b[i].to] == <span class="number">-1</span>)</span><br><span class="line">dis[b[i].to] = dis[now] ^ <span class="number">1</span>, belong[b[i].to] = belong[now], <span class="built_in">dfs</span>(b[i].to);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (dis[b[i].to] != (dis[now] ^ <span class="number">1</span>)) &#123; ok = <span class="literal">false</span>; <span class="keyword">return</span> ; &#125;</span><br><span class="line"><span class="keyword">if</span> (!ok) <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> now)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = ng[now]; i; i = nb[i].next) &#123;</span><br><span class="line"><span class="keyword">if</span> (ndis[nb[i].to] == <span class="number">-1</span>)</span><br><span class="line">ndis[nb[i].to] = ndis[now] ^ <span class="number">1</span>, <span class="built_in">dfs2</span>(nb[i].to);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (ndis[nb[i].to] != (ndis[now] ^ <span class="number">1</span>)) &#123; ok = <span class="literal">false</span>; <span class="keyword">return</span> ; &#125;</span><br><span class="line"><span class="keyword">if</span> (!ok) <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">recov</span><span class="params">(<span class="type">int</span> now)</span> </span>&#123;</span><br><span class="line">ndis[now] = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = ng[now]; i; i = nb[i].next)</span><br><span class="line"><span class="keyword">if</span> (~ndis[nb[i].to]) <span class="built_in">recov</span>(nb[i].to);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">pd</span><span class="params">(<span class="type">int</span> now)</span> </span>&#123;</span><br><span class="line">ok = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; bigb[now].<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line"><span class="type">int</span> xi = ob[bigb[now][i]].from, yi = ob[bigb[now][i]].to;</span><br><span class="line"><span class="keyword">if</span> (!ise[group[xi]] || !ise[group[yi]])</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="type">int</span> bx = belong[xi], by = belong[yi];</span><br><span class="line"><span class="built_in">ade2</span>(bx + dis[xi] * MAXN, by + dis[yi] * MAXN);</span><br><span class="line"><span class="built_in">ade2</span>(by + dis[yi] * MAXN, bx + dis[xi] * MAXN);</span><br><span class="line"><span class="built_in">ade2</span>(bx, bx + MAXN), <span class="built_in">ade2</span>(bx + MAXN, bx);</span><br><span class="line"><span class="built_in">ade2</span>(by, by + MAXN), <span class="built_in">ade2</span>(by + MAXN, by);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; bigb[now].<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line"><span class="type">int</span> xi = ob[bigb[now][i]].from, yi = ob[bigb[now][i]].to;</span><br><span class="line"><span class="type">int</span> bx = belong[xi], by = belong[yi];</span><br><span class="line"><span class="keyword">if</span> (ndis[bx + dis[xi] * MAXN] == <span class="number">-1</span>)</span><br><span class="line">ndis[bx + dis[xi] * MAXN] = <span class="number">0</span>, <span class="built_in">dfs2</span>(bx + dis[xi] * MAXN);</span><br><span class="line"><span class="keyword">if</span> (ndis[by + dis[yi] * MAXN] == <span class="number">-1</span>)</span><br><span class="line">ndis[by + dis[yi] * MAXN] = <span class="number">0</span>, <span class="built_in">dfs2</span>(by + dis[yi] * MAXN);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; bigb[now].<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line"><span class="type">int</span> xi = ob[bigb[now][i]].from, yi = ob[bigb[now][i]].to;</span><br><span class="line"><span class="type">int</span> bx = belong[xi], by = belong[yi];</span><br><span class="line"><span class="keyword">if</span> (~ndis[bx + dis[xi] * MAXN])</span><br><span class="line"><span class="built_in">recov</span>(bx + dis[xi] * MAXN);</span><br><span class="line"><span class="keyword">if</span> (~ndis[by + dis[yi] * MAXN])</span><br><span class="line"><span class="built_in">recov</span>(by + dis[yi] * MAXN);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; bigb[now].<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line"><span class="type">int</span> xi = ob[bigb[now][i]].from, yi = ob[bigb[now][i]].to;</span><br><span class="line"><span class="type">int</span> bx = belong[xi], by = belong[yi];</span><br><span class="line">ng[bx + MAXN] = ng[bx] = ng[by] = ng[by + MAXN] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">cntn = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> ok;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(dis, <span class="number">-1</span>, <span class="built_in">sizeof</span>(dis));</span><br><span class="line"><span class="built_in">memset</span>(ndis, <span class="number">-1</span>, <span class="built_in">sizeof</span>(ndis));</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;k);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;group[i]);</span><br><span class="line">ning[group[i]].<span class="built_in">push_back</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, xi, yi; i &lt;= m; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;xi, &amp;yi);</span><br><span class="line"><span class="built_in">ade</span>(xi, yi), <span class="built_in">ade</span>(yi, xi);</span><br><span class="line"><span class="keyword">if</span> (group[xi] &gt; group[yi]) <span class="built_in">swap</span>(xi, yi);</span><br><span class="line">ob[i].from = xi, ob[i].to = yi;</span><br><span class="line"><span class="type">int</span> gx = group[xi], gy = group[yi];</span><br><span class="line"><span class="keyword">if</span> (gx == gy) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (bh[gx].<span class="built_in">find</span>(gy) == bh[gx].<span class="built_in">end</span>()) bh[gx][gy] = ++cntg;</span><br><span class="line">bigb[bh[gx][gy]].<span class="built_in">push_back</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= k; i++) &#123;</span><br><span class="line">ise[i] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (ning[i].<span class="built_in">size</span>()) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; ning[i].<span class="built_in">size</span>(); j++)</span><br><span class="line"><span class="keyword">if</span> (dis[ning[i][j]] == <span class="number">-1</span>) &#123;</span><br><span class="line">ok = <span class="literal">true</span>;</span><br><span class="line">dis[ning[i][j]] = <span class="number">0</span>;</span><br><span class="line">belong[ning[i][j]] = ++belong[<span class="number">0</span>];</span><br><span class="line"><span class="built_in">dfs</span>(ning[i][j]);</span><br><span class="line"><span class="keyword">if</span> (!ok) ise[i] = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (ise[i])</span><br><span class="line">++cnte;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, xi, yi; i &lt;= m; i++) &#123;</span><br><span class="line">xi = ob[i].from, yi = ob[i].to;</span><br><span class="line"><span class="type">int</span> gx = group[xi], gy = group[yi];</span><br><span class="line"><span class="keyword">if</span> (!ise[gx] || !ise[gy] || gx == gy) <span class="keyword">continue</span>;</span><br><span class="line">ce[gx].<span class="built_in">insert</span>(gy), ce[gy].<span class="built_in">insert</span>(gx);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (cnte) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= k; i++)</span><br><span class="line"><span class="keyword">if</span> (ise[i])</span><br><span class="line">ans += cnte - <span class="number">1</span> - (<span class="type">int</span>)ce[i].<span class="built_in">size</span>();</span><br><span class="line">&#125;</span><br><span class="line">ans &gt;&gt;= <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= cntg; i++)</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">pd</span>(i))</span><br><span class="line">++ans;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>, ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 比赛总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 乱搞 </tag>
            
            <tag> 二分图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记 Arduino学习中遇到的坑</title>
      <link href="/posts/13559.html"/>
      <url>/posts/13559.html</url>
      
        <content type="html"><![CDATA[<p>回忆起了被arduino支配的恐惧</p><span id="more"></span><ol type="1"><li>arduino官方的linux IDE似乎...有bug?</li><li>如果你用了扩展板, 然后把LCD屏接到了I2D上, 写好了程序,发现背光可以亮, 但是显示不出来数字,可能你没有打开扩展板上的5V开关...</li></ol><p>未完待续...</p><p>By Cansult</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 翻车 </tag>
            
            <tag> Arduino </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>水题笔记 CCPC前的刷水</title>
      <link href="/posts/6566.html"/>
      <url>/posts/6566.html</url>
      
        <content type="html"><![CDATA[<p>最近感觉做不出什么有意义的题来, 就不单独发来恶心人了</p><p>计数器:</p><h2 id="section"><font color=#b11d23>9</font></h2><span id="more"></span><h3 id="kakas-matrix-travels"><ahref="http://poj.org/problem?id=3422">Kaka's Matrix Travels</a></h3><p>K方格取数 别忘了拆点的套路</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (5000)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXG (2500)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXK (50)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF (0x7ffffff)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rev(i) ((((i) - 1) ^ 1) + 1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> dbh(i, j) (bh(i, j) + MAXG)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> bh(i, j) (((i) - 1) * MAXK + (j))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> s = MAXN + <span class="number">1</span>, t = MAXN + <span class="number">2</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edg</span> &#123;</span><br><span class="line"><span class="type">int</span> from, to, next, flow, cap, cost;</span><br><span class="line"><span class="built_in">edg</span>() &#123;&#125;</span><br><span class="line"><span class="built_in">edg</span>(<span class="type">int</span> f, <span class="type">int</span> nt, <span class="type">int</span> n, <span class="type">int</span> fl, <span class="type">int</span> ca, <span class="type">int</span> co): <span class="built_in">from</span>(f), <span class="built_in">to</span>(nt), <span class="built_in">next</span>(n), <span class="built_in">flow</span>(fl), <span class="built_in">cap</span>(ca), <span class="built_in">cost</span>(co) &#123;&#125;</span><br><span class="line">&#125; b[MAXN * <span class="number">100</span> + <span class="number">5</span>];</span><br><span class="line"><span class="type">int</span> pre[MAXN + <span class="number">5</span>], g[MAXN + <span class="number">5</span>], n, ans, kk, a[MAXN + <span class="number">5</span>], cntb;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ade</span><span class="params">(<span class="type">int</span> fr, <span class="type">int</span> nt, <span class="type">int</span> ca, <span class="type">int</span> co)</span> </span>&#123;</span><br><span class="line">b[++cntb] = <span class="built_in">edg</span>(fr, nt, g[fr], <span class="number">0</span>, ca, co);</span><br><span class="line">g[fr] = cntb;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">spfa</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> dis[MAXN + <span class="number">5</span>], xa[MAXN + <span class="number">5</span>];</span><br><span class="line"><span class="type">bool</span> inq[MAXN + <span class="number">5</span>];</span><br><span class="line"><span class="built_in">memset</span>(xa, <span class="number">0</span>, <span class="built_in">sizeof</span>(xa));</span><br><span class="line"><span class="built_in">memset</span>(inq, <span class="literal">false</span>, <span class="built_in">sizeof</span>(inq));</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; MAXN + <span class="number">5</span>; i++) dis[i] = -INF;</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">q.<span class="built_in">push</span>(s);</span><br><span class="line">dis[s] = <span class="number">0</span>;</span><br><span class="line">xa[s] = INF;</span><br><span class="line"><span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line"><span class="type">int</span> now = q.<span class="built_in">front</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line">inq[now] = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = g[now]; i; i = b[i].next)</span><br><span class="line"><span class="keyword">if</span> (b[i].cap &gt; b[i].flow &amp;&amp; dis[b[i].to] &lt; dis[now] + b[i].cost) &#123;</span><br><span class="line">xa[b[i].to] = <span class="built_in">min</span>(b[i].cap - b[i].flow, xa[now]);</span><br><span class="line">dis[b[i].to] = dis[now] + b[i].cost;</span><br><span class="line">pre[b[i].to] = i;</span><br><span class="line"><span class="keyword">if</span> (!inq[b[i].to]) q.<span class="built_in">push</span>(b[i].to), inq[b[i].to] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> xa[t];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="keyword">while</span> (x = <span class="built_in">spfa</span>()) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = t; i != s; i = b[pre[i]].from)</span><br><span class="line">b[pre[i]].flow += x, b[<span class="built_in">rev</span>(pre[i])].flow -= x, ans += b[pre[i]].cost * x;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;kk);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[<span class="built_in">bh</span>(i, j)]);</span><br><span class="line"><span class="built_in">ade</span>(<span class="built_in">bh</span>(i, j), <span class="built_in">dbh</span>(i, j), <span class="number">1</span>, a[<span class="built_in">bh</span>(i, j)]), <span class="built_in">ade</span>(<span class="built_in">dbh</span>(i, j), <span class="built_in">bh</span>(i, j), <span class="number">0</span>, -a[<span class="built_in">bh</span>(i, j)]);</span><br><span class="line"><span class="built_in">ade</span>(<span class="built_in">bh</span>(i, j), <span class="built_in">dbh</span>(i, j), INF, <span class="number">0</span>), <span class="built_in">ade</span>(<span class="built_in">dbh</span>(i, j), <span class="built_in">bh</span>(i, j), <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; n; j++)</span><br><span class="line"><span class="built_in">ade</span>(<span class="built_in">dbh</span>(i, j), <span class="built_in">bh</span>(i, j + <span class="number">1</span>), INF, <span class="number">0</span>), <span class="built_in">ade</span>(<span class="built_in">bh</span>(i, j + <span class="number">1</span>), <span class="built_in">dbh</span>(i, j), <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line"><span class="built_in">ade</span>(<span class="built_in">dbh</span>(i, j), <span class="built_in">bh</span>(i + <span class="number">1</span>, j), INF, <span class="number">0</span>), <span class="built_in">ade</span>(<span class="built_in">bh</span>(i + <span class="number">1</span>, j), <span class="built_in">dbh</span>(i, j), <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">ade</span>(s, <span class="built_in">bh</span>(<span class="number">1</span>, <span class="number">1</span>), kk, <span class="number">0</span>), <span class="built_in">ade</span>(<span class="built_in">bh</span>(<span class="number">1</span>, <span class="number">1</span>), s, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">ade</span>(<span class="built_in">dbh</span>(n, n), t, INF, <span class="number">0</span>), <span class="built_in">ade</span>(t, <span class="built_in">dbh</span>(n, n), <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="sdoi2009晨跑"><ahref="https://darkbzoj.tk/problem/1877">[SDOI2009]晨跑</a></h3><p>费用流跑跑跑</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (1000)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXG (200)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXM (200000)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF (0x7ffffff)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> nnum(i) ((i) + MAXG)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rev(i) ((((i) - 1) ^ 1) + 1)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edg</span> &#123;</span><br><span class="line"><span class="type">int</span> from, to, next, cap, flow, cost;</span><br><span class="line">&#125; b[MAXM * <span class="number">2</span> + <span class="number">5</span>];</span><br><span class="line"><span class="type">int</span> n, m, g[MAXN + <span class="number">5</span>], cntb, s = MAXN + <span class="number">1</span>, t = MAXN + <span class="number">2</span>, ansf, ansc, pre[MAXN + <span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ade</span><span class="params">(<span class="type">int</span> fr, <span class="type">int</span> to, <span class="type">int</span> ca, <span class="type">int</span> co)</span> </span>&#123;</span><br><span class="line">b[++cntb] = &#123;fr, to, g[fr], ca, <span class="number">0</span>, co&#125;;</span><br><span class="line">g[fr] = cntb;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">spfa</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> dis[MAXN + <span class="number">5</span>], a[MAXN + <span class="number">5</span>];</span><br><span class="line"><span class="type">bool</span> inq[MAXN +<span class="number">5</span>];</span><br><span class="line"><span class="built_in">memset</span>(dis, <span class="number">0x7f</span>, <span class="built_in">sizeof</span>(dis));</span><br><span class="line"><span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="built_in">sizeof</span>(a));</span><br><span class="line"><span class="built_in">memset</span>(inq, <span class="literal">false</span>, <span class="built_in">sizeof</span>(inq));</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">dis[s] = <span class="number">0</span>;</span><br><span class="line">a[s] = INF;</span><br><span class="line">q.<span class="built_in">push</span>(s);</span><br><span class="line"><span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line"><span class="type">int</span> now = q.<span class="built_in">front</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line">inq[now] = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = g[now]; i; i = b[i].next)</span><br><span class="line"><span class="keyword">if</span> (b[i].cap &gt; b[i].flow &amp;&amp; dis[now] + b[i].cost &lt; dis[b[i].to]) &#123;</span><br><span class="line">dis[b[i].to] = dis[now] + b[i].cost;</span><br><span class="line">a[b[i].to] = <span class="built_in">min</span>(a[now], b[i].cap - b[i].flow);</span><br><span class="line">pre[b[i].to] = i;</span><br><span class="line"><span class="keyword">if</span> (!inq[b[i].to]) q.<span class="built_in">push</span>(b[i].to), inq[b[i].to] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> a[t];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="keyword">while</span> (x = <span class="built_in">spfa</span>()) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = t; i != s; i = b[pre[i]].from)</span><br><span class="line">ansc += b[pre[i]].cost, b[pre[i]].flow += x, b[<span class="built_in">rev</span>(pre[i])].flow -= x;</span><br><span class="line">++ansf;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, ai, bi, ci; i &lt;= m; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;ai, &amp;bi, &amp;ci);</span><br><span class="line"><span class="built_in">ade</span>(<span class="built_in">nnum</span>(ai), bi, <span class="number">1</span>, ci), <span class="built_in">ade</span>(bi, <span class="built_in">nnum</span>(ai), <span class="number">0</span>, -ci);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt; n; i++) <span class="built_in">ade</span>(i, <span class="built_in">nnum</span>(i), <span class="number">1</span>, <span class="number">0</span>), <span class="built_in">ade</span>(<span class="built_in">nnum</span>(i), i, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">ade</span>(<span class="number">1</span>, <span class="built_in">nnum</span>(<span class="number">1</span>), INF, <span class="number">0</span>), <span class="built_in">ade</span>(<span class="built_in">nnum</span>(<span class="number">1</span>), <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">ade</span>(n, <span class="built_in">nnum</span>(n), INF, <span class="number">0</span>), <span class="built_in">ade</span>(<span class="built_in">nnum</span>(n), n, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">ade</span>(s, <span class="number">1</span>, INF, <span class="number">0</span>), <span class="built_in">ade</span>(<span class="number">1</span>, s, <span class="number">0</span>, <span class="number">9</span>);</span><br><span class="line"><span class="built_in">ade</span>(<span class="built_in">nnum</span>(n), t, INF, <span class="number">0</span>), <span class="built_in">ade</span>(t, <span class="built_in">nnum</span>(n), <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d&quot;</span>, ansf, ansc);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="zjoi2010network-网络扩容"><ahref="https://darkbzoj.tk/problem/1834">[ZJOI2010]network网络扩容</a></h3><p>费用流跑跑跑</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (200000)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXM (500000)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF (0x7ffffff)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rev(i) ((((i) - 1) ^ 1) + 1)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edg</span> &#123;</span><br><span class="line"><span class="type">int</span> from, to, next, cap, flow, cost;</span><br><span class="line">&#125; b[MAXM + <span class="number">5</span>];</span><br><span class="line"><span class="type">int</span> g[MAXN + <span class="number">5</span>], cntb, n, m, k, s, t, dis[MAXN + <span class="number">5</span>], a[MAXN + <span class="number">5</span>], pre[MAXN + <span class="number">5</span>], ansc, ansf,</span><br><span class="line">ui[MAXM + <span class="number">5</span>], vi[MAXM + <span class="number">5</span>], ci[MAXM + <span class="number">5</span>], wi[MAXM + <span class="number">5</span>];</span><br><span class="line"><span class="type">bool</span> inq[MAXN + <span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ade</span><span class="params">(<span class="type">int</span> fr, <span class="type">int</span> to, <span class="type">int</span> ca, <span class="type">int</span> co)</span> </span>&#123;</span><br><span class="line">b[++cntb] = &#123;fr, to, g[fr], ca, <span class="number">0</span>, co&#125;;</span><br><span class="line">g[fr] = cntb;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">spfa</span><span class="params">()</span> </span>&#123;</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="built_in">memset</span>(dis, <span class="number">0x7f</span>, <span class="built_in">sizeof</span>(dis));</span><br><span class="line"><span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="built_in">sizeof</span>(a));</span><br><span class="line"><span class="built_in">memset</span>(inq, <span class="literal">false</span>, <span class="built_in">sizeof</span>(inq));</span><br><span class="line">q.<span class="built_in">push</span>(s);</span><br><span class="line">dis[s] = <span class="number">0</span>, a[s] = INF;</span><br><span class="line"><span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line"><span class="type">int</span> now = q.<span class="built_in">front</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line">inq[now] = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = g[now]; i; i = b[i].next)</span><br><span class="line"><span class="keyword">if</span> (b[i].cap &gt; b[i].flow &amp;&amp; dis[now] + b[i].cost &lt; dis[b[i].to]) &#123;</span><br><span class="line">dis[b[i].to] = dis[now] + b[i].cost;</span><br><span class="line">pre[b[i].to] = i;</span><br><span class="line">a[b[i].to] = <span class="built_in">min</span>(a[now], b[i].cap - b[i].flow);</span><br><span class="line"><span class="keyword">if</span> (!inq[b[i].to]) q.<span class="built_in">push</span>(b[i].to), inq[b[i].to] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> a[t];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="keyword">while</span> (x = <span class="built_in">spfa</span>()) &#123;</span><br><span class="line">ansf += x;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = t; i != s; i = b[pre[i]].from)</span><br><span class="line">b[pre[i]].flow += x, b[<span class="built_in">rev</span>(pre[i])].flow -= x, ansc += b[pre[i]].cost * x;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;k);</span><br><span class="line">s = <span class="number">1</span>, t = n + <span class="number">1</span>;</span><br><span class="line"><span class="built_in">ade</span>(n, t, INF, <span class="number">0</span>), <span class="built_in">ade</span>(t, n, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>, &amp;ui[i], &amp;vi[i], &amp;ci[i], &amp;wi[i]);</span><br><span class="line"><span class="built_in">ade</span>(ui[i], vi[i], ci[i], <span class="number">0</span>), <span class="built_in">ade</span>(vi[i], ui[i], <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line">b[<span class="number">1</span>].cap = ansf + k;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line"><span class="built_in">ade</span>(ui[i], vi[i], INF, wi[i]), <span class="built_in">ade</span>(vi[i], ui[i], <span class="number">0</span>, -wi[i]);</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d&quot;</span>, ansf - k, ansc);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="scoi2007蜥蜴"><ahref="https://darkbzoj.tk/problem/1066">[SCOI2007]蜥蜴</a></h3><p>拆完点以后跑最大流就好了</p><p>一开始因为 把计算是否能够到汇点的函数的返回值当成距离了调了好久...</p><p>太蠢了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (400000)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXX (20)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXG (400)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXM (500000)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF (0x7ffffff)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> nbh(i, j) (bh(i, j) + MAXG)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> bh(i, j) (((i) - 1) * MAXX + (j))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rev(i) ((((i) - 1) ^ 1) + 1)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edg</span> &#123;</span><br><span class="line"><span class="type">int</span> from, to, next, cap, flow;</span><br><span class="line">&#125; b[MAXM + <span class="number">5</span>];</span><br><span class="line"><span class="type">int</span> s = MAXN + <span class="number">1</span>, t = MAXN + <span class="number">2</span>, n, m, dis[MAXN + <span class="number">5</span>], kk, hei[MAXG + <span class="number">5</span>][MAXG + <span class="number">5</span>], ans, cntb, g[MAXN + <span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">dist</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (x &lt;= kk || y &lt;= kk || n - x &lt; kk || m - y &lt; kk);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ade</span><span class="params">(<span class="type">int</span> fr, <span class="type">int</span> to, <span class="type">int</span> ca)</span> </span>&#123;</span><br><span class="line">b[++cntb] = &#123;fr, to, g[fr], ca, <span class="number">0</span>&#125;;</span><br><span class="line">g[fr] = cntb;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dinic</span><span class="params">(<span class="type">int</span> now, <span class="type">int</span> maxf)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (now == t || !maxf) <span class="keyword">return</span> maxf;</span><br><span class="line"><span class="type">int</span> re = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = g[now]; i; i = b[i].next)</span><br><span class="line"><span class="keyword">if</span> (b[i].cap &gt; b[i].flow &amp;&amp; dis[b[i].to] == dis[now] + <span class="number">1</span>) &#123;</span><br><span class="line"><span class="type">int</span> zl = <span class="built_in">dinic</span>(b[i].to, <span class="built_in">min</span>(maxf, b[i].cap - b[i].flow));</span><br><span class="line">re += zl;</span><br><span class="line">maxf -= zl;</span><br><span class="line">b[i].flow += zl, b[<span class="built_in">rev</span>(i)].flow -= zl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="built_in">memset</span>(dis, <span class="number">-1</span>, <span class="built_in">sizeof</span>(dis));</span><br><span class="line">dis[s] = <span class="number">0</span>;</span><br><span class="line">q.<span class="built_in">push</span>(s);</span><br><span class="line"><span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line"><span class="type">int</span> now = q.<span class="built_in">front</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = g[now]; i; i = b[i].next)</span><br><span class="line"><span class="keyword">if</span> (b[i].cap &gt; b[i].flow &amp;&amp; dis[b[i].to] == <span class="number">-1</span>)</span><br><span class="line">dis[b[i].to] = dis[now] + <span class="number">1</span>, q.<span class="built_in">push</span>(b[i].to);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> (dis[t] != <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">bfs</span>())</span><br><span class="line">ans -= <span class="built_in">dinic</span>(s, INF);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;kk);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="type">char</span> ss[MAXG + <span class="number">5</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, ss);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">hei[i][j] = ss[j - <span class="number">1</span>] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line"><span class="keyword">if</span> (hei[i][j]) &#123;</span><br><span class="line"><span class="built_in">ade</span>(<span class="built_in">bh</span>(i, j), <span class="built_in">nbh</span>(i, j), hei[i][j]), <span class="built_in">ade</span>(<span class="built_in">nbh</span>(i, j), <span class="built_in">bh</span>(i, j), <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">dist</span>(i, j))</span><br><span class="line"><span class="built_in">ade</span>(<span class="built_in">nbh</span>(i, j), t, INF), <span class="built_in">ade</span>(t, <span class="built_in">nbh</span>(i, j), <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> ii = <span class="number">1</span>; ii &lt;= n; ii++)</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> jj = <span class="number">1</span>; jj &lt;= m; jj++)</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">abs</span>(i - ii) + <span class="built_in">abs</span>(j - jj) &lt;= kk &amp;&amp; (ii!= i || jj != j) &amp;&amp; hei[i][j] &amp;&amp; hei[ii][jj])</span><br><span class="line"><span class="built_in">ade</span>(<span class="built_in">nbh</span>(i, j), <span class="built_in">bh</span>(ii, jj), INF), <span class="built_in">ade</span>(<span class="built_in">bh</span>(ii, jj), <span class="built_in">nbh</span>(i, j), <span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="type">char</span> ss[MAXG + <span class="number">5</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, ss);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line"><span class="keyword">if</span> (ss[j - <span class="number">1</span>] == <span class="string">&#x27;L&#x27;</span>)</span><br><span class="line"><span class="built_in">ade</span>(s, <span class="built_in">bh</span>(i, j), <span class="number">1</span>), <span class="built_in">ade</span>(<span class="built_in">bh</span>(i, j), s, <span class="number">0</span>), ++ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="noi2012随机数生成器"><ahref="https://darkbzoj.tk/problem/2875">[Noi2012]随机数生成器</a></h3><p>矩阵快速幂板子, 但是要用快速乘是真的毒瘤. 12年的NOI就那么恐怖了吗</p><p>一开始矩阵乘法还乘反了,遥想三年前我还在马哥给学弟学妹们讲课的时候大声告诉他 他矩阵乘法乘反了,没想到三年后马哥去清华写最短路板子了, 我在这犯三年前的错误 555</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">x 1 * a 0</span></span><br><span class="line"><span class="comment">  c 1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int LL</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">matrix</span> &#123;</span><br><span class="line"><span class="type">int</span> n, m, a[<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line"><span class="built_in">matrix</span>(): <span class="built_in">n</span>(<span class="number">2</span>), <span class="built_in">m</span>(<span class="number">2</span>) &#123;a[<span class="number">0</span>][<span class="number">0</span>] = a[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>, a[<span class="number">1</span>][<span class="number">0</span>] = a[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">0</span>;&#125;</span><br><span class="line">&#125; m1, mb, ma;</span><br><span class="line"><span class="type">int</span> g, mp, n;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">mul</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!b) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (b == <span class="number">1</span>) <span class="keyword">return</span> a % mp;</span><br><span class="line">LL re = <span class="built_in">mul</span>(a, b &gt;&gt; <span class="number">1</span>);</span><br><span class="line">re = (re + re) % mp;</span><br><span class="line"><span class="keyword">if</span> (b &amp; <span class="number">1</span>) re = (re + a) % mp;</span><br><span class="line"><span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">matrix <span class="title">multi</span><span class="params">(<span class="type">const</span> matrix x, <span class="type">const</span> matrix y)</span> </span>&#123;</span><br><span class="line">matrix re;</span><br><span class="line">re.n = x.n, re.m = y.m;</span><br><span class="line"><span class="built_in">memset</span>(re.a, <span class="number">0</span>, <span class="built_in">sizeof</span>(re.a));</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; x.n; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; y.m; k++)</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; x.m; j++)</span><br><span class="line">re.a[i][k] += <span class="built_in">mul</span>((x.a[i][j] % mp), (y.a[j][k] % mp)) % mp, re.a[i][k] %= mp;</span><br><span class="line"><span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">matrix <span class="title">ksm</span><span class="params">(<span class="type">const</span> matrix x, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!b) <span class="keyword">return</span> m1;</span><br><span class="line">matrix re = <span class="built_in">ksm</span>(x, b &gt;&gt; <span class="number">1</span>);</span><br><span class="line">re = <span class="built_in">multi</span>(re, re);</span><br><span class="line"><span class="keyword">if</span> (b &amp; <span class="number">1</span>) re = <span class="built_in">multi</span>(re, x);</span><br><span class="line"><span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">main</span>() &#123;</span><br><span class="line">ma.n = <span class="number">1</span>, ma.m = <span class="number">2</span>;</span><br><span class="line">ma.a[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%llu%llu%llu%llu%llu%llu&quot;</span>, &amp;mp, &amp;mb.a[<span class="number">0</span>][<span class="number">0</span>], &amp;mb.a[<span class="number">1</span>][<span class="number">0</span>], &amp;ma.a[<span class="number">0</span>][<span class="number">0</span>], &amp;n, &amp;g);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%llu&quot;</span>, <span class="built_in">multi</span>(ma, <span class="built_in">ksm</span>(mb, n)).a[<span class="number">0</span>][<span class="number">0</span>] % g);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="sdoi2010星际竞速"><ahref="https://darkbzoj.tk/problem/1927">[Sdoi2010]星际竞速</a></h3><p>显然你要是直接模拟题意就GG了 我们发现这玩意可以拆点后转成个二分图</p><p>如果能被路径覆盖就被路径覆盖了, 如果不能就用什么能力爆发模式</p><p>不知道为啥少加了个反向边T了三发...</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (10000)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXM (50000)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXG (800)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF (0x7ffffff)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> bh(x) ((x) + MAXG)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rev(x) ((((x) - 1) ^ 1) + 1)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edg</span> &#123;</span><br><span class="line"><span class="type">int</span> from, to, next, cap, flow, cost;</span><br><span class="line">&#125; b[MAXM + <span class="number">5</span>];</span><br><span class="line"><span class="type">int</span> g[MAXN + <span class="number">5</span>], pre[MAXN + <span class="number">5</span>], cntb, dis[MAXN + <span class="number">5</span>], a[MAXN + <span class="number">5</span>], s = MAXN + <span class="number">1</span>, t = MAXN + <span class="number">2</span>, ss = MAXN + <span class="number">3</span>, ans, n, m;</span><br><span class="line"><span class="type">bool</span> inq[MAXN + <span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ade</span><span class="params">(<span class="type">int</span> fr, <span class="type">int</span> to, <span class="type">int</span> ca, <span class="type">int</span> co)</span> </span>&#123;</span><br><span class="line">b[++cntb] = &#123;fr, to, g[fr], ca, <span class="number">0</span>, co&#125;;</span><br><span class="line">g[fr] = cntb;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">spfa</span><span class="params">()</span> </span>&#123;</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="built_in">memset</span>(dis, <span class="number">0x7f</span>, <span class="built_in">sizeof</span>(dis));</span><br><span class="line"><span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="built_in">sizeof</span>(a));</span><br><span class="line"><span class="built_in">memset</span>(inq, <span class="literal">false</span>, <span class="built_in">sizeof</span>(inq));</span><br><span class="line">a[s] = INF, dis[s] = <span class="number">0</span>;</span><br><span class="line">q.<span class="built_in">push</span>(s);</span><br><span class="line"><span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line"><span class="type">int</span> now = q.<span class="built_in">front</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line">inq[now] = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = g[now]; i; i = b[i].next)</span><br><span class="line"><span class="keyword">if</span> (b[i].cap &gt; b[i].flow &amp;&amp; dis[b[i].to] &gt; dis[now] + b[i].cost) &#123;</span><br><span class="line">dis[b[i].to] = dis[now] + b[i].cost;</span><br><span class="line">a[b[i].to] = <span class="built_in">min</span>(a[now], b[i].cap - b[i].flow);</span><br><span class="line">pre[b[i].to] = i;</span><br><span class="line"><span class="keyword">if</span> (!inq[b[i].to]) q.<span class="built_in">push</span>(b[i].to), inq[b[i].to] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> a[t];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="keyword">while</span> (x = <span class="built_in">spfa</span>()) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = t; i != s; i = b[pre[i]].from)</span><br><span class="line">ans += x * b[pre[i]].cost, b[pre[i]].flow += x, b[<span class="built_in">rev</span>(pre[i])].flow -= x;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, ai; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;ai), <span class="built_in">ade</span>(ss, i, <span class="number">1</span>, ai), <span class="built_in">ade</span>(i, ss, <span class="number">0</span>, -ai);</span><br><span class="line"><span class="built_in">ade</span>(i, t, <span class="number">1</span>, <span class="number">0</span>), <span class="built_in">ade</span>(t, i, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">ade</span>(s, <span class="built_in">bh</span>(i), <span class="number">1</span>, <span class="number">0</span>), <span class="built_in">ade</span>(<span class="built_in">bh</span>(i), s, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, ui, vi, ci; i &lt;= m; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;ui, &amp;vi, &amp;ci);</span><br><span class="line"><span class="keyword">if</span> (ui &gt; vi) <span class="built_in">swap</span>(ui, vi);</span><br><span class="line"><span class="built_in">ade</span>(<span class="built_in">bh</span>(ui), vi, <span class="number">1</span>, ci), <span class="built_in">ade</span>(vi, <span class="built_in">bh</span>(ui), <span class="number">0</span>, -ci);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">ade</span>(s, ss, INF, <span class="number">0</span>), <span class="built_in">ade</span>(ss, s, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">solve</span>();  </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="zjoi2009假期的宿舍"><ahref="https://darkbzoj.tk/problem/1433">[ZJOI2009]假期的宿舍</a></h3><p>最大流跑跑跑</p><p>md, 先是忘了初始化一个数组WA了半天</p><p>然后bfs里把<code>dis</code>全初始化为<code>0</code>,结果判断的时候写了个<code>if (b[i].flow &gt; b[i].cap &amp;&amp; !dis[b[i].to])</code>结果好家伙直接给我把源点的<code>dis</code>更新了</p><p>日</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (10000)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXM (50000)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXG (100)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF (0x7ffffff)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> bh(i) ((i) + MAXG)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rev(i) ((((i) - 1) ^ 1) + 1)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edg</span> &#123;</span><br><span class="line"><span class="type">int</span> from, to, cap, flow, next;</span><br><span class="line">&#125; b[MAXM * <span class="number">2</span> + <span class="number">5</span>];</span><br><span class="line"><span class="type">int</span> g[MAXN + <span class="number">5</span>], cntb, n, ans, insch[MAXN + <span class="number">5</span>], dis[MAXN + <span class="number">5</span>], s = MAXN + <span class="number">1</span>, t = MAXN + <span class="number">2</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ade</span><span class="params">(<span class="type">int</span> fr, <span class="type">int</span> to, <span class="type">int</span> ca)</span> </span>&#123;</span><br><span class="line">b[++cntb] = &#123;fr, to, ca, <span class="number">0</span>, g[fr]&#125;;</span><br><span class="line">g[fr] = cntb;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dinic</span><span class="params">(<span class="type">int</span> now, <span class="type">int</span> maxf)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (now == t || !maxf) <span class="keyword">return</span> maxf;</span><br><span class="line"><span class="type">int</span> re = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = g[now]; i; i = b[i].next)</span><br><span class="line"><span class="keyword">if</span> (b[i].cap &gt; b[i].flow &amp;&amp; dis[b[i].to] == dis[now] + <span class="number">1</span>) &#123;</span><br><span class="line"><span class="type">int</span> zl = <span class="built_in">dinic</span>(b[i].to, <span class="built_in">min</span>(maxf, b[i].cap - b[i].flow));</span><br><span class="line">maxf -= zl;</span><br><span class="line">re += zl;</span><br><span class="line">b[i].flow += zl, b[<span class="built_in">rev</span>(i)].flow -= zl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="built_in">memset</span>(dis, <span class="number">-1</span>, <span class="built_in">sizeof</span>(dis));</span><br><span class="line">dis[s] = <span class="number">0</span>;</span><br><span class="line">q.<span class="built_in">push</span>(s);</span><br><span class="line"><span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line"><span class="type">int</span> now = q.<span class="built_in">front</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = g[now]; i; i = b[i].next)</span><br><span class="line"><span class="keyword">if</span> (b[i].cap &gt; b[i].flow &amp;&amp; dis[b[i].to] == <span class="number">-1</span>)</span><br><span class="line">dis[b[i].to] = dis[now] + <span class="number">1</span>, q.<span class="built_in">push</span>(b[i].to);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dis[t] != <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">bfs</span>())</span><br><span class="line">ans -= <span class="built_in">dinic</span>(s, INF);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> tt;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;tt);</span><br><span class="line"><span class="keyword">while</span> (tt--) &#123;</span><br><span class="line">cntb = ans = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(g, <span class="number">0</span>, <span class="built_in">sizeof</span>(g));</span><br><span class="line"><span class="built_in">memset</span>(insch, <span class="number">0</span>, <span class="built_in">sizeof</span>(insch));</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;insch[i]);</span><br><span class="line"><span class="keyword">if</span> (insch[i]) <span class="built_in">ade</span>(<span class="built_in">bh</span>(i), t, <span class="number">1</span>), <span class="built_in">ade</span>(t, <span class="built_in">bh</span>(i), <span class="number">0</span>);</span><br><span class="line"><span class="keyword">else</span>  <span class="built_in">ade</span>(s, i, <span class="number">1</span>), <span class="built_in">ade</span>(i, s, <span class="number">0</span>), ++ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, xi; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;xi);</span><br><span class="line"><span class="keyword">if</span> (!insch[i]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (!xi) <span class="built_in">ade</span>(s, i, <span class="number">1</span>), <span class="built_in">ade</span>(i, s, <span class="number">0</span>), <span class="built_in">ade</span>(i, <span class="built_in">bh</span>(i), <span class="number">1</span>), <span class="built_in">ade</span>(<span class="built_in">bh</span>(i), i, <span class="number">0</span>), ++ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>, xi; j &lt;= n; j++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;xi);</span><br><span class="line"><span class="keyword">if</span> (xi) <span class="built_in">ade</span>(i, <span class="built_in">bh</span>(j), <span class="number">1</span>), <span class="built_in">ade</span>(<span class="built_in">bh</span>(j), i, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line"><span class="built_in">puts</span>(ans ? <span class="string">&quot;T_T&quot;</span> : <span class="string">&quot;^_^&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="方格取数"><ahref="https://darkbzoj.tk/problem/1475">方格取数</a></h3><p>印象里好像做过, 但是没有系统的学习背后的原理, 导致现在屁都不会</p><p>这个东西,首先我们把棋盘上相交的格子两两连边就发现这玩意其实让求得就是一个二分图带权的最大独立子集</p><p>那怎么处理这个权的问题呢,我们就可以把一个点复制成<code>a[i]</code>个点,然后按照原先的关系连边跑就可以了</p><p>后来我们又发现, 这个边数好像有点爆炸, 怎么办呢,我们观察一下这张图发现,我们可以把一个点复制出的<code>a[i]</code>个点再合并起来,在左部只需要把<code>s</code>到这个点的<code>cap</code>改成<code>a[i]</code>,在右部就把到<code>t</code>的<code>cap</code>改成相应的权值,然后两部之间的边<code>cap</code>设为<code>INF</code>即可(因为不是限制条件,当然, 设成两边点权的 <span class="math inline">\(\max\)</span>也可以)</p><p>然后跑最大流就可以了</p><p>不过要注意一个问题, 因为这张二分图的<code>cap</code>不都是1了,所以连边一定要注意不要从右部连向左部的多余的边, 否则会出现左部-&gt;右部-&gt;左部-&gt;右部 的奇妙路径</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 100000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXM 500000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 100000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> bh(i, j) (((i) - 1) * 1000 + (j))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rev(i) ((((i) - 1) ^ 1) + 1)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> xy[<span class="number">4</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">-1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">-1</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edg</span> &#123;</span><br><span class="line"><span class="type">int</span> from, to, next, flow, cap;</span><br><span class="line">&#125; b[MAXM * <span class="number">2</span> + <span class="number">5</span>];</span><br><span class="line"><span class="type">int</span> g[MAXN + <span class="number">5</span>], cntb, n, dis[MAXN + <span class="number">5</span>], s = MAXN + <span class="number">1</span>, t = MAXN + <span class="number">2</span>, ans;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ade</span><span class="params">(<span class="type">int</span> fr, <span class="type">int</span> to, <span class="type">int</span> ca)</span> </span>&#123;</span><br><span class="line">b[++cntb] = &#123;fr, to, g[fr], <span class="number">0</span>, ca&#125;;</span><br><span class="line">g[fr] = cntb;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="built_in">memset</span>(dis, <span class="number">-1</span>, <span class="built_in">sizeof</span>(dis));</span><br><span class="line">q.<span class="built_in">push</span>(s), dis[s] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line"><span class="type">int</span> now = q.<span class="built_in">front</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = g[now]; i; i = b[i].next)</span><br><span class="line"><span class="keyword">if</span> (b[i].cap &gt; b[i].flow &amp;&amp; dis[b[i].to] == <span class="number">-1</span>)</span><br><span class="line">dis[b[i].to] = dis[now] + <span class="number">1</span>, q.<span class="built_in">push</span>(b[i].to);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dis[t] != <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dinic</span><span class="params">(<span class="type">int</span> now, <span class="type">int</span> maxf)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (now == t || !maxf) <span class="keyword">return</span> maxf;</span><br><span class="line"><span class="type">int</span> re = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = g[now]; i; i = b[i].next)</span><br><span class="line"><span class="keyword">if</span> (b[i].cap &gt; b[i].flow &amp;&amp; dis[b[i].to] == dis[now] + <span class="number">1</span>) &#123;</span><br><span class="line"><span class="type">int</span> zl = <span class="built_in">dinic</span>(b[i].to, <span class="built_in">min</span>(maxf, b[i].cap - b[i].flow));</span><br><span class="line">re += zl, maxf -= zl;</span><br><span class="line">b[i].flow += zl, b[<span class="built_in">rev</span>(i)].flow -= zl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">bfs</span>()) ans -= <span class="built_in">dinic</span>(s, INF * <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>, aij; j &lt;= n; j++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;aij);</span><br><span class="line"><span class="keyword">if</span> ((i + j) &amp; <span class="number">1</span>) <span class="built_in">ade</span>(<span class="built_in">bh</span>(i, j), t, aij), <span class="built_in">ade</span>(t, <span class="built_in">bh</span>(i, j), <span class="number">0</span>);</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">ade</span>(s, <span class="built_in">bh</span>(i, j), aij), <span class="built_in">ade</span>(<span class="built_in">bh</span>(i, j), s, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// 注意这里连边一定要单向连边, 因为cap很大, 所以可能从左部流到右部再流到左部再流到右部...</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++) &#123; </span><br><span class="line"><span class="type">int</span> ni = i + xy[k][<span class="number">0</span>], nj = j + xy[k][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (ni &lt; <span class="number">1</span> || nj &lt; <span class="number">1</span> || ni &gt; n || nj &gt; n) <span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">ade</span>(<span class="built_in">bh</span>(i, j), <span class="built_in">bh</span>(ni, nj), INF);</span><br><span class="line"><span class="built_in">ade</span>(<span class="built_in">bh</span>(ni, nj), <span class="built_in">bh</span>(i, j), <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ans += aij;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="鬼谷子的钱袋"><ahref="https://darkbzoj.tk/problem/1192">鬼谷子的钱袋</a></h3><p>为啥我省选碰不上这种题 不过yysy这玩意要是要求输出方案还是挺脑瘫的,尤其是在那个两两不能相等的鬼要求下, 只能从大往小里分治,而不能从小倍增</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n, ans = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">while</span> (n &gt; <span class="number">1</span>) n &gt;&gt;= <span class="number">1</span>, ++ans;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, ans + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再贴一份输出方案的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n, re, a[<span class="number">100</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">while</span> (n) a[++a[<span class="number">0</span>]] = (n + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>, n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = a[<span class="number">0</span>]; i &gt;= <span class="number">1</span>; i--) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>By Cansult</p>]]></content>
      
      
      <categories>
          
          <category> 水题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>水题笔记 POJ2446 Chessboard [二分图]</title>
      <link href="/posts/22377.html"/>
      <url>/posts/22377.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>吃屎吧，数组要开到2000，血试出来的，唉</p></blockquote><span id="more"></span><h3 id="题目">题目</h3><p><a href="http://poj.org/problem?id=2446">POJ</a></p><h3 id="题解">题解</h3><p>把矩阵上的点编号, 然后复制一遍, 作为二分图的两部,看看能匹配的边数是否和矩阵的可用点一样多就好了</p><p>其实这道题直观的想法是把矩阵的可行点分成两部分作为二分图的两部,然后跑匹配, 一个匹配边就是一个骨牌. 但是我们不知道怎么分,所以只能复制一遍了, 反正不会对答案造成影响.</p><h3 id="代码">代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (1000)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXK (32)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> bh(i, j) ((((i) - 1) * MAXK) + (j))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> xy[<span class="number">4</span>][<span class="number">2</span>] = &#123; &#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">-1</span>&#125;, &#123;<span class="number">-1</span>, <span class="number">0</span>&#125; &#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edg</span> &#123;</span><br><span class="line"><span class="type">int</span> from, to, next;</span><br><span class="line">&#125; b[MAXN * <span class="number">4</span> + <span class="number">5</span>];</span><br><span class="line"><span class="type">int</span> g[MAXN * <span class="number">2</span> + <span class="number">5</span>], cntb, n, m, link[MAXN * <span class="number">2</span> + <span class="number">5</span>], ans, kk;</span><br><span class="line"><span class="type">bool</span> fbd[MAXN + <span class="number">5</span>], vis[MAXN * <span class="number">2</span> + <span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ade</span><span class="params">(<span class="type">int</span> fr, <span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">++cntb;</span><br><span class="line">b[cntb].from = fr, b[cntb].to = t, b[cntb].next = g[fr];</span><br><span class="line">g[fr] = cntb;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = g[x]; i; i = b[i].next)</span><br><span class="line"><span class="keyword">if</span> (!vis[b[i].to]) &#123;</span><br><span class="line">vis[b[i].to] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (!link[b[i].to] || <span class="built_in">find</span>(link[b[i].to])) &#123;</span><br><span class="line">link[b[i].to] = x;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;m, &amp;n, &amp;kk);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, xi, yi; i &lt;= kk; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;xi, &amp;yi);</span><br><span class="line">fbd[<span class="built_in">bh</span>(xi, yi)] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++) &#123;</span><br><span class="line"><span class="type">int</span> ni = i + xy[k][<span class="number">0</span>], nj = j + xy[k][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (i + xy[k][<span class="number">0</span>] &lt;= n &amp;&amp; j + xy[k][<span class="number">1</span>] &lt;= m &amp;&amp; i + xy[k][<span class="number">0</span>] &gt; <span class="number">0</span> &amp;&amp; j + xy[k][<span class="number">1</span>] &gt; <span class="number">0</span> &amp;&amp; !fbd[<span class="built_in">bh</span>(i, j)] &amp;&amp; !fbd[<span class="built_in">bh</span>(ni, nj)])</span><br><span class="line"><span class="built_in">ade</span>(<span class="built_in">bh</span>(i, j), <span class="built_in">bh</span>(ni, nj));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line"><span class="built_in">memset</span>(vis, <span class="literal">false</span>, <span class="built_in">sizeof</span>(vis));</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">find</span>(<span class="built_in">bh</span>(i, j)))</span><br><span class="line">++ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">puts</span>((ans == n * m - kk) ? <span class="string">&quot;YES&quot;</span> : <span class="string">&quot;NO&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>By Cansult</p>]]></content>
      
      
      <categories>
          
          <category> 水题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>水题笔记 TJU ACM 2020第一学期 作业6 [杂题]</title>
      <link href="/posts/3720.html"/>
      <url>/posts/3720.html</url>
      
        <content type="html"><![CDATA[<p>有那么几个题挺有意思的 记录一下</p><span id="more"></span><h3 id="题目">题目</h3><p><a href="https://vjudge.net/contest/401100#overview">VOJ</a></p><h3 id="d---fix-wiring">D - Fix Wiring</h3><p>题意: 给<span class="math inline">\(n \le 100\)</span>个点, <spanclass="math inline">\(\frac{n(n - 1)}{2}\)</span>条边, 和他们的边权,让你来连边, 求最小和最大的最小生成树权值</p><p>最小的显然, 让我们看最大的</p><p>考虑这个题和<a href="https://vijos.org/p/1579">这个</a>非常像,考虑目前已经选出一颗最小生成树, 新加入一个点和与他相连的边,你要让一条边成为最小生成树中的边,就要让他与最小生成树中点的边权都大于这条边</p><p>于是我们只需要把边权从大到小排序, 然后按照<spanclass="math inline">\(n - 1, n - 2, \cdots, 1\)</span>的个数分组,每组找最小值作为最小生成树的边就可以了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (100)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n, a[MAXN * MAXN + <span class="number">5</span>];</span><br><span class="line">LL ans;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> x &gt; y; &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= (n - <span class="number">1</span>) * n / <span class="number">2</span>; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[++a[<span class="number">0</span>]]);</span><br><span class="line"><span class="built_in">sort</span>(a + <span class="number">1</span>, a + a[<span class="number">0</span>] + <span class="number">1</span>, cmp);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = a[<span class="number">0</span>]; i &gt;= a[<span class="number">0</span>] - n + <span class="number">2</span>; i--) ans += a[i];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld &quot;</span>, ans);</span><br><span class="line">ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>, j = <span class="number">0</span>; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">ans += a[j += i];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>, ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="p---加工零件">P - 加工零件</h3><p>1号要做原料当且仅当a与1的距离的奇偶性与L相同, 且小于L</p><p>dijkstra跑一跑就好了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (100000)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edg</span> &#123;</span><br><span class="line"><span class="type">int</span> from, to, next;</span><br><span class="line">&#125; b[MAXN * <span class="number">2</span> + <span class="number">5</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">cmp</span> &#123;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">operator</span> <span class="params">()</span> <span class="params">(<span class="type">const</span> pii&amp; x, <span class="type">const</span> pii&amp; y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> x.second &gt; y.second;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> g[MAXN + <span class="number">5</span>], cntb, n, m, dis[MAXN][<span class="number">2</span>], q;</span><br><span class="line"><span class="type">bool</span> vis[MAXN + <span class="number">5</span>][<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ade</span><span class="params">(<span class="type">int</span> fr, <span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">b[++cntb] = &#123;fr, t, g[fr]&#125;;</span><br><span class="line">g[fr] = cntb;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dijk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">priority_queue&lt;pii, vector&lt;pii&gt;, cmp&gt; q;</span><br><span class="line">q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(<span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line"><span class="built_in">memset</span>(dis, <span class="number">0x7f</span>, <span class="built_in">sizeof</span>(dis));</span><br><span class="line"><span class="built_in">memset</span>(vis, <span class="literal">false</span>, <span class="built_in">sizeof</span>(vis));</span><br><span class="line">dis[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">pii now = q.<span class="built_in">top</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">if</span> (vis[now.first][now.second &amp; <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">vis[now.first][now.second &amp; <span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = g[now.first]; i; i = b[i].next)</span><br><span class="line"><span class="keyword">if</span> (dis[b[i].to][(now.second &amp; <span class="number">1</span>) ^ <span class="number">1</span>] &gt; now.second + <span class="number">1</span>)</span><br><span class="line">dis[b[i].to][(now.second &amp; <span class="number">1</span>) ^ <span class="number">1</span>] = now.second + <span class="number">1</span>, q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(b[i].to, dis[b[i].to][(now.second &amp; <span class="number">1</span>) ^ <span class="number">1</span>]));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;q);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, xi, yi; i &lt;= m; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;xi, &amp;yi), <span class="built_in">ade</span>(xi, yi), <span class="built_in">ade</span>(yi, xi);</span><br><span class="line"><span class="built_in">dijk</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, a, l; i &lt;= q; i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;l), <span class="built_in">puts</span>((dis[a][l &amp; <span class="number">1</span>] &lt;= l) ? <span class="string">&quot;Yes&quot;</span> : <span class="string">&quot;No&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="r---括号树">R - 括号树</h3><p>显然这个树的条件屁用没有</p><p>考虑链上咋做,令<code>f[n]</code>为以<code>n</code>为结尾的合法括号串个数,显然<code>f[n] = (s[n - 1] == ')') ? (f[x] + 1) : 0</code>,其中<code>x</code>是<code>n</code>前面与<code>n</code>最近的使<code>[x, n]</code>是合法括号串的数</p><p>我一直在考虑怎么转换成<span class="math inline">\((1,-1)\)</span>序列来做, 似乎得用线段树之类的</p><p>后来抄题解才知道直接用栈就行了, 左括号入栈其编号就行,右括号出栈栈顶就是<code>x</code>了</p><p>我是傻逼</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 前括号压栈, 后括号弹栈</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (500000)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edg</span> &#123;</span><br><span class="line"><span class="type">int</span> from, to, next;</span><br><span class="line">&#125; b[MAXN + <span class="number">5</span>];</span><br><span class="line"><span class="type">int</span> g[MAXN + <span class="number">5</span>], cntb, n, a[MAXN + <span class="number">5</span>], fa[MAXN + <span class="number">5</span>];</span><br><span class="line"><span class="type">bool</span> vis[MAXN + <span class="number">5</span>];</span><br><span class="line"><span class="type">char</span> s[MAXN + <span class="number">5</span>];</span><br><span class="line">LL f[MAXN + <span class="number">5</span>], ans;</span><br><span class="line">stack&lt;<span class="type">int</span>&gt; gary, pek;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ade</span><span class="params">(<span class="type">int</span> fr, <span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">b[++cntb] = &#123;fr, t, g[fr]&#125;;</span><br><span class="line">g[fr] = cntb;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> now)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (~a[now]) gary.<span class="built_in">push</span>(now);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (!gary.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">vis[now] = <span class="literal">true</span>;</span><br><span class="line">pek.<span class="built_in">push</span>(gary.<span class="built_in">top</span>());</span><br><span class="line">f[now] = f[fa[gary.<span class="built_in">top</span>()]] + <span class="number">1</span>;</span><br><span class="line">gary.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = g[now]; i; i = b[i].next)</span><br><span class="line"><span class="built_in">dfs</span>(b[i].to);</span><br><span class="line"><span class="keyword">if</span> (~a[now]) gary.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">if</span> (vis[now]) gary.<span class="built_in">push</span>(pek.<span class="built_in">top</span>()), pek.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">calc</span><span class="params">(<span class="type">int</span> now, LL xans)</span> </span>&#123;</span><br><span class="line">ans ^= (xans + f[now]) * now;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = g[now]; i; i = b[i].next)</span><br><span class="line"><span class="built_in">calc</span>(b[i].to, xans + f[now]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(vis, <span class="literal">false</span>, <span class="built_in">sizeof</span>(vis));</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) a[i] = (s[i - <span class="number">1</span>] == <span class="string">&#x27;(&#x27;</span>) ? <span class="number">1</span> : <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;fa[i]), <span class="built_in">ade</span>(fa[i], i);</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">calc</span>(<span class="number">1</span>, <span class="number">0ll</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>, ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>By Cansult</p>]]></content>
      
      
      <categories>
          
          <category> 水题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>水题笔记 [CTSC2008]祭祀river [二分图, floyd传递闭包]</title>
      <link href="/posts/50036.html"/>
      <url>/posts/50036.html</url>
      
        <content type="html"><![CDATA[<p>天好冷啊</p><p>我要妹子</p><span id="more"></span><h3 id="题目">题目</h3><p><a href="https://darkbzoj.tk/problem/1143">dbzoj</a></p><h3 id="题解">题解</h3><p>luogu上的还要输出方案, 感觉很蛋疼, 不想做</p><p>题目要求我们选一个最大点集, 点之间不能互相到达.</p><p>等价于floyd传递闭包后, 选出一个最大点集, 点之间没有边相连,即求最大独立集</p><p><ahref="https://cansult.github.io/posts/16301.html">这里</a>讲过做法了</p><h3 id="代码">代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXM (50000)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (100)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rev(i) ((((i) - 1) ^ 1) + 1)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">bool</span> edg[MAXN + <span class="number">5</span>][MAXN + <span class="number">5</span>], vis[MAXN + <span class="number">5</span>];</span><br><span class="line"><span class="type">int</span> link[MAXN + <span class="number">5</span>], n, m, ans;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">find</span><span class="params">(<span class="type">int</span> now)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="keyword">if</span> (!vis[i] &amp;&amp; edg[now][i]) &#123;</span><br><span class="line">vis[i] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (!link[i] || <span class="built_in">find</span>(link[i])) &#123;</span><br><span class="line">link[i] = now;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">floyd</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt;= n; k++)</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">edg[i][j] = edg[i][j] || (edg[i][k] &amp;&amp; edg[k][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(edg, <span class="literal">false</span>, <span class="built_in">sizeof</span>(edg));</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, xi, yi; i &lt;= m; i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;xi, &amp;yi), edg[xi][yi] = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">floyd</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="built_in">memset</span>(vis, <span class="literal">false</span>, <span class="built_in">sizeof</span>(vis));</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">find</span>(i)) ++ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, n - ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>By Cansult</p>]]></content>
      
      
      <categories>
          
          <category> 水题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分图 </tag>
            
            <tag> floyd传递闭包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>水题笔记 [ZJOI2007]矩阵游戏 [二分图]</title>
      <link href="/posts/24951.html"/>
      <url>/posts/24951.html</url>
      
        <content type="html"><![CDATA[<p>差点翻车</p><span id="more"></span><h3 id="题目">题目</h3><p><a href="https://darkbzoj.tk/problem/1059">dbzoj</a></p><h3 id="题解">题解</h3><p>我居然一开始傻逼了</p><p>后来发现黑点的x, y连边就是一个二分图,然后跑最大匹配看看是不是n就行了</p><h3 id="代码">代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (200)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n, link[MAXN + <span class="number">5</span>], ans;</span><br><span class="line"><span class="type">bool</span> vis[MAXN + <span class="number">5</span>], edg[MAXN + <span class="number">5</span>][MAXN + <span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> now)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) </span><br><span class="line"><span class="keyword">if</span> (!vis[i] &amp;&amp; edg[now][i]) &#123;</span><br><span class="line">vis[i] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (!link[i] || <span class="built_in">find</span>(link[i])) &#123;</span><br><span class="line">link[i] = now;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> t;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;t);</span><br><span class="line"><span class="keyword">while</span> (t--) &#123;</span><br><span class="line"><span class="built_in">memset</span>(link, <span class="number">0</span>, <span class="built_in">sizeof</span>(link));</span><br><span class="line"><span class="built_in">memset</span>(edg, <span class="literal">false</span>, <span class="built_in">sizeof</span>(edg));</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>, x; j &lt;= n; j++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x), edg[i][j] = (x != <span class="number">0</span>);</span><br><span class="line">ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="built_in">memset</span>(vis, <span class="literal">false</span>, <span class="built_in">sizeof</span>(vis));</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">find</span>(i)) ++ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">puts</span>((ans == n) ? <span class="string">&quot;Yes&quot;</span> : <span class="string">&quot;No&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>By Cansult</p>]]></content>
      
      
      <categories>
          
          <category> 水题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大数笔记 数学分析 2.4 数列的收敛准则</title>
      <link href="/posts/9644.html"/>
      <url>/posts/9644.html</url>
      
        <content type="html"><![CDATA[<p>据说这节肥肠难</p><span id="more"></span><h2 id="单调有界收敛定理及其应用">单调有界收敛定理及其应用</h2><h3 id="weierstrass魏尔斯特拉斯定理">weierstrass(魏尔斯特拉斯)定理</h3><p>定理 2.4.1:</p><blockquote><p>单调增的数列<span class="math inline">\(\{u_n\}\)</span>有极限<spanclass="math inline">\(\iff\)</span><spanclass="math inline">\(\{u_n\}\)</span>有上界<br />单调减的数列<span class="math inline">\(\{u_n\}\)</span>有极限<spanclass="math inline">\(\iff\)</span><spanclass="math inline">\(\{u_n\}\)</span>有下界</p></blockquote><p>证明:<br />"<span class="math inline">\(\Rightarrow\)</span>": 显然</p><p>"<span class="math inline">\(\Leftarrow\)</span>": 只证<spanclass="math inline">\(\{u_n\}\)</span>单增有上界时 <spanclass="math inline">\(\lim\limits_{k\to \infty}{u_n}\)</span>存在:<br />由确界原理知, <span class="math inline">\(\{u_n\}\)</span>有上确界<spanclass="math inline">\(\beta\)</span>, 下证<spanclass="math inline">\(\lim\limits_{n\to\infty}u_n = \beta\)</span> <spanclass="math display">\[\beta = \sup\{u_n\} \Rightarrow \forall n \in \mathbb{N^+}, u_n \le\beta \tag{1}\]</span> <span class="math display">\[\forall \varepsilon &gt; 0, \exists N \in \mathbb{N^+}, s.t. u_N &gt;\beta - \varepsilon \tag{2}\]</span> <span class="math display">\[\{u_n\}单增 \Rightarrow n &gt; N时, u_n \ge u_N \tag{3}\]</span> 由<span class="math inline">\((1)(2)(3)\)</span>可知 <spanclass="math display">\[\forall \varepsilon &gt; 0, \exists N\in \mathbb{N^+}, 当n &gt; N时,\beta - \varepsilon &lt; u_n \le u_n \le \beta &lt; \beta + \varepsilon\]</span> <span class="math display">\[即\lim\limits_{n\to\infty} u_n = \beta = \sup\{u_n\}\]</span></p><hr /><p>EX. 2.4.1: 若<span class="math inline">\(x_1 = 1, x_{n + 1} =\frac{1}{2}(x_n + \frac{2}{x_n}), n\in\mathbb{N^+}\)</span>, 证明<spanclass="math inline">\(\{x_n\}\)</span>收敛, 并求出<spanclass="math inline">\(\lim\limits_{n \to \infty}x_n\)</span></p><p>证明:<br />step. 1: 证<spanclass="math inline">\(\{x_n\}\)</span>有下界(归纳法)<br />用归纳法证明<span class="math inline">\(x_n &gt; \sqrt 2, \forall n &gt;1, n \in \mathbb{N^+}\)</span>:<br /><span class="math inline">\(n = 2\)</span>时<spanclass="math inline">\(x_2 = \frac{3}{2} &gt; 2\)</span>成立<br />假设<span class="math inline">\(n = k\)</span>时成立, 下证<spanclass="math inline">\(n = k + 1\)</span>时成立<br /><span class="math display">\[x_{k + 1} = \frac{1}{2}(x_{k} + \frac{2}{k_k})\ge\frac{1}{2} \cdot 2\cdot \sqrt{x_k \cdot \frac{2}{x_k}} = \sqrt{2}\]</span> <span class="math display">\[``=&quot;成立\iff x_k = \frac{2}{x_k} 即 x_k = \sqrt{2}\]</span> <span class="math display">\[\therefore \forall n &gt; 2, n\in\mathbb{N^+}, x_n &gt; \sqrt{2}\]</span></p><p>step. 2: 证<span class="math inline">\(\{x_n\}\)</span>单减</p><p><span class="math display">\[x^2 &gt; 2(x_n &gt; 0) \Rightarrow \frac{2}{x_n} &lt; x_n \Rightarrowx_{n + 1} = \frac{1}{2}(x_n + \frac{2}{x_n}) &lt; x_n\]</span> <span class="math display">\[\therefore \{x_n\}单减\]</span></p><p>由定理2.4.1可知, <span class="math inline">\(\lim\limits_{n \to\infty}{x_n}\)</span>存在, 记为<span class="math inline">\(a\)</span>,在<span class="math inline">\(x_{n + 1} = \frac{1}{2}(x_n +\frac{2}{x_n})\)</span>两边令<span class="math inline">\(n\to\infty\)</span> <span class="math display">\[a = \frac{1}{2}(a + \frac{2}{a})\]</span> <span class="math display">\[a = \sqrt{2}\]</span></p><hr /><p>注: 在证明<span class="math inline">\(\{x_n\}\)</span>单调时,一般采用下列方法:<br />1. 讨论<span class="math inline">\(x_n - x_{n + 1}\)</span><br />如在EX. 2.4.1中, <span class="math inline">\(x_{n + 1} = \frac{1}{2}(x_n+ \frac{2}{x_n})\)</span>, <span class="math inline">\(x_n =\frac{1}{2}(x_{n - 1} + \frac{2}{x_{n - 1}})\)</span><br /><span class="math display">\[   \begin{aligned}      x_{n + 1} - x_{n} &amp;= \frac{1}{2}(x_n - x_{n - 1}) +(\frac{1}{x_n} - \frac{1}{x_{n - 1}})\\   &amp;=(x_n - x_{n + 1})(\frac{1}{2} - \frac{1}{x_n\cdot x_{n - 1}})   \end{aligned}\]</span> <span class="math display">\[   {x_n}单调\iff x_n + 1 - x_n 与 x_n - x_{n + 1}同号   \]</span> 2. 讨论<span class="math inline">\(\frac{x_n}{x_{n +1}}\)</span></p><hr /><p>EX. 2.4.2: <span class="math inline">\(x_1 &gt; 0, x_{n + 1} = 1 +\frac{x_n}{1 + x_n}, \forall n\in\mathbb{N^+}\)</span>, 证明<spanclass="math inline">\(\lim\limits_{n\to\infty}x_n\)</span>存在并求出<br />证明:<br />step. 1: 证明 <span class="math inline">\(1 &lt; x_n &lt; 2, \forall n\ge 2, n\in\mathbb{N^+}\)</span></p><blockquote><p>这里的 <span class="math inline">\(x_n &lt; 2\)</span> 是用 <spanclass="math inline">\(a = 1 + \frac{a}{1 + a}\)</span> 猜出来的</p></blockquote><p>运用归纳法: <span class="math inline">\(n = 2\)</span> 时, <spanclass="math inline">\(x_2 = 1 + \frac{x_1}{1 + x_1} \in (1,2)\)</span><br />假设当 <span class="math inline">\(n = k\)</span> 时, <spanclass="math inline">\(x_n \in (1, 2)\)</span> , 所以<spanclass="math inline">\(x_{k + 1} = 1 + \frac{x_k}{1 + x_k} \in (1,2)\)</span></p><p>step. 2: 证明<span class="math inline">\(\{x_n\}\)</span>单调 <spanclass="math display">\[x_{n + 1} - x_n = \frac{x_n - x_{n - 1}}{(1 + x_n)(1 + x_{n - 1})}\]</span> <span class="math display">\[(1 + x_n)(1 + x_{n - 1}) &gt; 0 \Rightarrow x_{n + 1} - {x_n}与x_n -x_{n - 1}同号\]</span> <span class="math display">\[\Rightarrow \{x_n\}单调 \Rightarrow \lim\limits_{n\to\infty}x_n 存在,记为a\]</span></p><p>step. 3: 求<span class="math inline">\(a\)</span><br />在 <span class="math inline">\(x_{n + 1} = 1 + \frac{x_n}{1 +x_n}\)</span> 两边令 <span class="math inline">\(n\to\infty\)</span></p><p><span class="math display">\[a = 1 + \frac{a}{1 + a} (a \in [1, 2])\]</span> <span class="math display">\[\Rightarrow a = \frac{1 + \sqrt{5}}{2}\]</span></p><p>EX. 2.4.3: 证明 <spanclass="math inline">\(\lim\limits_{n\to\infty}\frac{a^n}{n!} = 0\,\, (a&gt; 1)\)</span></p><p>证明: 令 <span class="math inline">\(u_n = \frac{a^n}{n!} &gt;0\)</span>, 则 <span class="math inline">\(\frac{u_{n + 1}}{u_n} =\frac{a}{n + 1} \to 0 &lt; 1\)</span></p><p><span class="math display">\[\therefore\exists N\in\mathbb{N^+}, n &gt; N 时, \frac{u_{n + 1}}{u_n}&lt; 1, 即 u_{n + 1} &lt; u_n\]</span> <span class="math inline">\(u_n &gt; 0\)</span>,根据单调有界原理, <spanclass="math inline">\(\lim\limits_{n\to\infty}u_n\)</span>存在,记为<span class="math inline">\(A \ge 0\)</span><br />由 <span class="math inline">\(x_n + 1 = \frac{a ^ {n + 1}}{(n + 1)!} =x_n \cdot \frac{a}{n + 1}\)</span>, 令两边<spanclass="math inline">\(n\to\infty\)</span>, 则 <spanclass="math display">\[\begin{aligned}  A &amp;= 0 \cdot A\\  A &amp;= 0\end{aligned}\]</span></p><h3 id="单调有界原理的应用-pi-和-e">单调有界原理的应用: <spanclass="math inline">\(\pi\)</span> 和 <spanclass="math inline">\(e\)</span></h3><h3 id="pi-割圆术"><span class="math inline">\(\pi\)</span> :割圆术</h3><p>单位圆内有一内接正<span class="math inline">\(n\)</span>边形,边长为<span class="math inline">\(a\)</span>, 则 <spanclass="math display">\[\begin{aligned}a^2 &amp;= 4\sin^2\frac{180^\circ}{n}\\a &amp;= 2\sin\frac{180^\circ}{n}\end{aligned}\]</span> 所以正<span class="math inline">\(n\)</span>边形的半周长 <spanclass="math inline">\(L_n = \frac{n}{2}\cdot a = n \cdot\sin\frac{180^\circ}{n}\)</span><br />下证</p>]]></content>
      
      
      <categories>
          
          <category> 大数笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文化课 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记 二分图基础</title>
      <link href="/posts/16301.html"/>
      <url>/posts/16301.html</url>
      
        <content type="html"><![CDATA[<p>他妈的, 信息学竞赛真是太有意思了</p><span id="more"></span><h3 id="二分图">二分图</h3><p>一张图, 可以分成两组<span class="math inline">\(A, B\)</span>,组内的点没有边相连</p><h3 id="二分图的匹配">二分图的匹配</h3><p>一组边, 边的端点互不相同</p><h3 id="二分图的最大匹配">二分图的最大匹配</h3><p>边数最多的一组边</p><h3 id="求二分图最大匹配的匈牙利算法">求二分图最大匹配的匈牙利算法</h3><p>每次找一条增广路, 这条路径满足: 起始边是未选边, 终止边是未选边,中间的边选边与未选边交替存在, <strong>且连接两个未选点</strong></p><p>然后我们把这条增广路中选边和未选边置反(选边变为未选, 未选变为选,etc), 这样选边的数量就会+1, 依次进行下去, 直到找不到增广路,我们就找到了二分图的最大匹配</p><h3 id="点覆盖">点覆盖</h3><p>规定一个点覆盖与他相连的所有边, 一个能覆盖所有边的点集称为点覆盖</p><h3 id="最小点覆盖">最小点覆盖</h3><p>点数量最少的点集称为最小点覆盖</p><h3 id="独立集">独立集</h3><p>一个点集, 内部的点没有边相连(二分图的一部就是一个独立集)</p><h3 id="最大独立集">最大独立集</h3><p>点数最多的独立集(易知二分图的独立集大小比两部中点数多的一部的点的数量要多)</p><hr /><p>好, 上面的都很简单, 下面我们开始了</p><h3 id="könig定理">König定理</h3><p>二分图的最小点覆盖大小 = 二分图的最大匹配</p><p>证明:</p><p>对于一个已经完成最大匹配的二分图, 从他的右部每一个不与选边相连的点,沿着 "未选边-选边-未选边-选边-..." 的顺序dfs,易知此dfs路径的结尾一定是一个选边, 否则可以成为一条增广路进行增广,与已知矛盾.</p><p>对每一条dfs路径经过的点进行标记.</p><p>从整张图来看, 左部标记的点 和 右部未被标记的点 即为最小点覆盖</p><p>step.1: 证明这个点集是一个点覆盖</p><p>运用反证法: 假设存在一条边, 他的左端点未被标记, 右端点被标记,则说明该图存在增广路,与已知矛盾(右端点被标记说明他的右端点是一条"未选边-选边-...-未选边"的结尾,而左端点未被标记说明上一条路径无法继续延伸, 也就是右端点也是一个未选点,可以作为结尾形成一条增广路)</p><p>step. 2: 证明这个点集的大小是最大匹配</p><p>对于每一条匹配边,有且仅有一个端点属于上述点集(如果是dfs到的边就是左端点属于,否则就是右端点属于)</p><p>step. 3: 证明这个点集是最小的点覆盖</p><p>首先我们很容易知道, 最大匹配一定<spanclass="math inline">\(\le\)</span>最小点覆盖(最大匹配比二分图左右两部最小的点数要小)</p><p>然后刚刚证明了最大匹配 = 我们刚刚的点集,所以我们刚刚的点集就是最小点覆盖</p><p>好了完事了</p><h3 id="最小边覆盖">最小边覆盖</h3><p>一个边集, 所有的点都是这个边集中边的端点</p><h3 id="最小边覆盖-点数---最大匹配">最小边覆盖 = 点数 - 最大匹配</h3><p>证明: 考虑选边加入边集, 显然可以先选最大匹配中边集,可以保证选这个数量的边时可以覆盖更多的点. 然后对于剩下的点,随便选与他相连的边即可</p><p>即: 最小边覆盖 = 最大匹配 + (点数 - 最大匹配 * 2) = 点数 -最大匹配</p><h3 id="最大独立集-点数---最大匹配">最大独立集 = 点数 - 最大匹配</h3><p>证明: 考虑从全体点集中删点得出独立集, 发现我们删掉的点组成一个点覆盖,而要得到最大独立集, 我们要删掉的是一个最小点覆盖.</p><p>即: 最大独立集 = 点数 - 最小点覆盖 = 点数 - 最大匹配</p><h3 id="dag的最小不相交路径覆盖">DAG的最小不相交路径覆盖</h3><p>用最少个数的不相交路径覆盖所有的点</p><p>拆点, 将每个点<span class="math inline">\(V\)</span>分为<spanclass="math inline">\(\{V_x, V_y\}\)</span>, 对于原图的一条边<spanclass="math inline">\(U \to V\)</span>, 在新图连接<spanclass="math inline">\(U_y \to V_x\)</span>. 易知新图为二分图</p><p>DAG最小不相交路径覆盖 = 原图节点数 - 二分图最大匹配</p><p>证明: 开始时将原图每一个点都看作一条路径,于是在二分图中每匹配一条边就是将两条路径连接在一起.而二分图匹配的特点保证了一个点不会有两条出边, 也不会有两条入边</p><h3 id="dag的最小可相交路径覆盖">DAG的最小可相交路径覆盖</h3><p>用最少可相交的路径覆盖所有的点</p><p>用floyd传递闭包之后用最小不相交路径覆盖就行了</p><p>考虑到两条路径在开头和结尾相交其实对答案是没有影响的,所以对答案真正有影响的是在中间节点相交,而floyd传递闭包后相当与可以跨过中间节点, 也就没有了不可相交的限制</p><p>By Cansult</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 二分图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>比赛总结 TJU [2020夏季训练] 组队赛6</title>
      <link href="/posts/26566.html"/>
      <url>/posts/26566.html</url>
      
        <content type="html"><![CDATA[<p>懂了 不组队就不会坑队友了</p><span id="more"></span><h3 id="c.-function">C. Function</h3><p>我觉得我会</p><p>但是我不会</p><p>我开始想的算每个数<code>a[i]</code>在<code>n == x</code>时会被加多少次<code>c[x][i]</code>,然后发现<code>c[x][i] = c[x - 1][i] + c[x - 1][i - 1] + 1</code>,然后就不会求了</p><p>首先: 你要知道<span class="math inline">\(f(l,r)\)</span>会在答案里出现<span class="math inline">\(\binom{l - 1+ n-r}{l - 1}\)</span>次: 可以看作不断把<span class="math inline">\(f(l,r)\)</span>变为<span class="math inline">\(f(l - 1, r)\)</span>,或者<span class="math inline">\(f(l, r + 1)\)</span>.</p><p>然后: 你需要知道对于每个数<code>a[i]</code>,只需要找到所有包含位置<span class="math inline">\(i\)</span>的<spanclass="math inline">\(f(l, r)\)</span>出现的次数, 然后加和就可以了</p><p>然后你发现对于<code>a[1]</code>到<code>a[n]</code>,他需要加起来的那些组合数在帕斯卡三角中的位置是这样的:</p><p><img src="../pictures/20201008A.png" /></p><p>然后发现<code>a[1]</code>到<code>a[i + 1]</code>是加上了一列组合数,然后删掉了一条斜线上的组合数</p><p>然后用两个公式就可以<span class="math inline">\(\mathrmO(n)\)</span>递推了 <span class="math display">\[\sum _{i=0} ^{n} \binom {i} {k} = \binom {n+1}{k+1}\\\sum _{i=0} ^{n} \binom {m+i} {i} = \binom {n+m+1}{n}\]</span></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> f(i, x, n) for(int i = x; i &lt; (int)(n); ++i)</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="type">const</span> N = <span class="number">1000000</span>, md = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="type">int</span> fc[N + <span class="number">1</span>], inv[N + <span class="number">1</span>], fcin[N + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ad</span><span class="params">(<span class="type">int</span> &amp;x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">if</span> ((x += y) &gt;= md)x -= md; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sb</span><span class="params">(<span class="type">int</span> &amp;x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">if</span> ((x -= y) &lt; <span class="number">0</span>)x += md; &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ch</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> r)</span> </span>&#123; <span class="keyword">return</span> (ll)fc[n] * fcin[r] % md * fcin[n - r] % md; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="type">int</span> s = <span class="number">0</span>, an = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">f</span>(i, <span class="number">0</span>, n)&#123;</span><br><span class="line">        <span class="built_in">ad</span>(s, <span class="built_in">ch</span>(n, i + <span class="number">1</span>));</span><br><span class="line">        <span class="type">int</span> t;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;t);</span><br><span class="line">        <span class="built_in">ad</span>(an, (ll)t * s % md);</span><br><span class="line">        <span class="built_in">sb</span>(s, <span class="built_in">ch</span>(n, i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, an);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    fc[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">f</span>(i, <span class="number">1</span>, N + <span class="number">1</span>)fc[i] = (ll)fc[i - <span class="number">1</span>] * i % md;</span><br><span class="line">    inv[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">f</span>(i, <span class="number">2</span>, N + <span class="number">1</span>)inv[i] = md - md / i * (ll)inv[md % i] % md;</span><br><span class="line">    fcin[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">f</span>(i, <span class="number">1</span>, N + <span class="number">1</span>)fcin[i] = (ll)fcin[i - <span class="number">1</span>] * inv[i] % md;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span> (t--)<span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="d.-two-sequences">D. Two Sequences</h3><p>水题</p><p>不开O2甚至会T</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (100000)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">set&lt;<span class="type">int</span>&gt; a, b;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">getint</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> re = <span class="number">0</span>;</span><br><span class="line"><span class="type">char</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (x &lt; <span class="string">&#x27;0&#x27;</span> || x &gt; <span class="string">&#x27;9&#x27;</span>) x = <span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span> (x &lt;= <span class="string">&#x27;9&#x27;</span> &amp;&amp; x &gt;= <span class="string">&#x27;0&#x27;</span>) re = (re &lt;&lt; <span class="number">1</span>) + (re &lt;&lt; <span class="number">3</span>) + x - <span class="string">&#x27;0&#x27;</span>, x = <span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> t = <span class="built_in">getint</span>();</span><br><span class="line"><span class="keyword">while</span> (t--) &#123;</span><br><span class="line">a.<span class="built_in">clear</span>(), b.<span class="built_in">clear</span>();</span><br><span class="line"><span class="type">int</span> n, k;</span><br><span class="line">n = <span class="built_in">getint</span>(), k = <span class="built_in">getint</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) a.<span class="built_in">insert</span>(<span class="built_in">getint</span>());</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) b.<span class="built_in">insert</span>(<span class="built_in">getint</span>());</span><br><span class="line">set&lt;<span class="type">int</span>&gt;::iterator x = a.<span class="built_in">end</span>();</span><br><span class="line"><span class="keyword">for</span> (set&lt;<span class="type">int</span>&gt;::iterator i = a.<span class="built_in">begin</span>(); i != a.<span class="built_in">end</span>(); ++i) &#123;</span><br><span class="line">set&lt;<span class="type">int</span>&gt;::iterator bx = b.<span class="built_in">lower_bound</span>(*i);</span><br><span class="line"><span class="keyword">if</span> (bx == b.<span class="built_in">end</span>() || *bx != *i) x = i;</span><br><span class="line"><span class="keyword">else</span> b.<span class="built_in">erase</span>(bx);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (b.<span class="built_in">size</span>() &gt; <span class="number">1</span> || (!b.<span class="built_in">empty</span>() &amp;&amp; <span class="built_in">abs</span>(*b.<span class="built_in">begin</span>() - *x) &gt; k)) <span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="h.-win-strategy">H. Win Strategy</h3><p>写了个贪心, 让最后一道题结束的时间尽量靠前</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 贪心 在当前时间i下, 把剩下的题分为两组, 一组是a在i前(按b排), 一组是a在i后(按(a + b)排), 比较两组的队首, 然后取一个数 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// #pragma GCC optimize(2)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (1000)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">tas</span> &#123;</span><br><span class="line"><span class="type">int</span> a, b, bh;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span> == (<span class="type">const</span> tas&amp; x) &#123;</span><br><span class="line"><span class="built_in">return</span> (x.a == a &amp;&amp; x.b == b);</span><br><span class="line">&#125;</span><br><span class="line">&#125; ab[MAXN + <span class="number">5</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">cmp1</span> &#123;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">operator</span> <span class="params">()</span> <span class="params">(tas x, tas y)</span> </span>&#123; <span class="keyword">return</span> x.b &lt; y.b; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">cmp2</span> &#123;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">operator</span> <span class="params">()</span> <span class="params">(tas x, tas y)</span> </span>&#123; <span class="keyword">return</span> x.a + x.b &lt; y.a + y.b; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> n, l;</span><br><span class="line"><span class="type">bool</span> vis[MAXN + <span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> t;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;t);</span><br><span class="line"><span class="keyword">while</span> (t--) &#123;</span><br><span class="line"><span class="built_in">memset</span>(vis, <span class="literal">false</span>, <span class="built_in">sizeof</span>(vis));</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;l);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;ab[i].a, &amp;ab[i].b), ab[i].bh = i;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>, j = <span class="number">1</span>;</span><br><span class="line">multiset&lt;tas, cmp1&gt; alr;</span><br><span class="line">multiset&lt;tas, cmp2&gt; fut;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) fut.<span class="built_in">insert</span>(ab[i]);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= l;) &#123;</span><br><span class="line"><span class="keyword">for</span> (; j &lt;= n &amp;&amp; ab[j].a &lt;= i; j++)</span><br><span class="line"><span class="keyword">if</span> (!vis[j]) &#123;</span><br><span class="line">multiset&lt;tas&gt;::iterator x = fut.<span class="built_in">lower_bound</span>(ab[j]);</span><br><span class="line"><span class="keyword">if</span> (x != fut.<span class="built_in">end</span>())</span><br><span class="line">fut.<span class="built_in">erase</span>(x), alr.<span class="built_in">insert</span>(ab[j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!alr.<span class="built_in">empty</span>() &amp;&amp; (fut.<span class="built_in">empty</span>() || (alr.<span class="built_in">begin</span>()-&gt;b + i &lt; fut.<span class="built_in">begin</span>()-&gt;a + fut.<span class="built_in">begin</span>()-&gt;b))) &#123;</span><br><span class="line"><span class="keyword">if</span> (alr.<span class="built_in">begin</span>()-&gt;b + i &lt;= l) &#123;</span><br><span class="line">i = alr.<span class="built_in">begin</span>()-&gt;b + i;</span><br><span class="line">vis[alr.<span class="built_in">begin</span>()-&gt;bh] = <span class="literal">true</span>;</span><br><span class="line">alr.<span class="built_in">erase</span>(alr.<span class="built_in">begin</span>());</span><br><span class="line">++ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (!fut.<span class="built_in">empty</span>() &amp;&amp; (fut.<span class="built_in">begin</span>()-&gt;a + fut.<span class="built_in">begin</span>()-&gt;b &lt;= l)) &#123;</span><br><span class="line">i = fut.<span class="built_in">begin</span>()-&gt;b + fut.<span class="built_in">begin</span>()-&gt;a;</span><br><span class="line">vis[fut.<span class="built_in">begin</span>()-&gt;bh] = <span class="literal">true</span>;</span><br><span class="line">fut.<span class="built_in">erase</span>(fut.<span class="built_in">begin</span>());</span><br><span class="line">++ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>蛋是WA了</p><p>看题解直接背包 <span class="math inline">\(\mathrm O(2.5 \times10^8)\)</span>, 不愧是你</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1001</span>;</span><br><span class="line"><span class="type">int</span> n , l , dp[N][N],T;</span><br><span class="line"></span><br><span class="line">pii a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">calc</span><span class="params">(<span class="type">int</span> idx , <span class="type">int</span> time)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(idx &gt; n || time &gt; l+<span class="number">1</span>)<span class="keyword">return</span> -N;</span><br><span class="line">    <span class="keyword">if</span>(idx == n &amp;&amp; time == l+<span class="number">1</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> &amp;ret = dp[idx][time];</span><br><span class="line">    <span class="keyword">if</span>(ret != <span class="number">-1</span>)<span class="keyword">return</span> ret;</span><br><span class="line">    ret = <span class="built_in">max</span>(<span class="built_in">calc</span>(idx,time+<span class="number">1</span>),<span class="built_in">calc</span>(idx+<span class="number">1</span>,time));</span><br><span class="line">    <span class="keyword">if</span>(time &gt;= a[idx].first)</span><br><span class="line">        ret = <span class="built_in">max</span>(ret,<span class="number">1</span>+<span class="built_in">calc</span>(idx+<span class="number">1</span>,time+a[idx].second));</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(dp,<span class="number">-1</span>,<span class="keyword">sizeof</span> dp);</span><br><span class="line">        cin &gt;&gt; n &gt;&gt; l;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;a[i].first,&amp;a[i].second);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">calc</span>(<span class="number">0</span>,<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>By Cansult</p>]]></content>
      
      
      <categories>
          
          <category> 比赛总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 清奇脑回路 </tag>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>比赛总结 Bubble Cup 13 - Finals [Online Mirror, unrated, Div. 1]</title>
      <link href="/posts/46997.html"/>
      <url>/posts/46997.html</url>
      
        <content type="html"><![CDATA[<p>呜呜呜我一定好好学数学(</p><span id="more"></span><h3 id="b.-valuable-paper">B. Valuable Paper</h3><p>这标题...和WT的"珍贵物资"有异曲同工之妙啊</p><p>二分完了跑网络流就行了</p><p>一开始尝试一边加边一边网络流, 结果T了...</p><p>然后二分还写错了一次</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXM (100000)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (10000)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rev(i) ((((i) - 1) ^ 1) + 1)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">fedg</span> &#123;</span><br><span class="line">    <span class="type">int</span> x, y, d;</span><br><span class="line">&#125; rb[MAXM + <span class="number">5</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edg</span> &#123;</span><br><span class="line">    <span class="type">int</span> from, to, next, cap, flow, xd;</span><br><span class="line">&#125; b[MAXM * <span class="number">20</span>];</span><br><span class="line"><span class="type">int</span> g[MAXN * <span class="number">2</span> + <span class="number">5</span>], cntb, s = MAXN * <span class="number">2</span> + <span class="number">1</span>, t = MAXN * <span class="number">2</span> + <span class="number">2</span>, n, m, dis[MAXN * <span class="number">2</span> + <span class="number">5</span>], nd;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ade</span><span class="params">(<span class="type">int</span> fr, <span class="type">int</span> t, <span class="type">int</span> ca, <span class="type">int</span> dd)</span> </span>&#123;</span><br><span class="line">    b[++cntb] = &#123;fr, t, g[fr], ca, <span class="number">0</span>, dd&#125;;</span><br><span class="line">    g[fr] = cntb;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dis, <span class="number">0</span>, <span class="built_in">sizeof</span>(dis));</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(s);</span><br><span class="line">    dis[s] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="type">int</span> now = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = g[now]; i; i = b[i].next)</span><br><span class="line">            <span class="keyword">if</span> (b[i].cap &gt; b[i].flow &amp;&amp; b[i].xd &lt;= nd &amp;&amp; !dis[b[i].to])</span><br><span class="line">                dis[b[i].to] = dis[now] + <span class="number">1</span>, q.<span class="built_in">push</span>(b[i].to);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dis[t];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dinic</span><span class="params">(<span class="type">int</span> now, <span class="type">int</span> maxf)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> re = <span class="number">0</span>, ri;</span><br><span class="line">    <span class="keyword">if</span> (now == t || !maxf) <span class="keyword">return</span> maxf;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = g[now]; i; i = b[i].next)</span><br><span class="line">        <span class="keyword">if</span> (b[i].xd &lt;= nd &amp;&amp; b[i].cap &gt; b[i].flow &amp;&amp; dis[b[i].to] == dis[now] + <span class="number">1</span>) &#123;</span><br><span class="line">            ri = <span class="built_in">dinic</span>(b[i].to, <span class="built_in">min</span>(maxf, b[i].cap - b[i].flow));</span><br><span class="line">            maxf -= ri;</span><br><span class="line">            b[i].flow += ri;</span><br><span class="line">            b[<span class="built_in">rev</span>(i)].flow -= ri;</span><br><span class="line">            re += ri;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(fedg&amp; x, fedg&amp; y)</span> </span>&#123; <span class="keyword">return</span> x.d &lt; y.d; &#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">pd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= cntb; i++) b[i].flow = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> re = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">bfs</span>()) re += <span class="built_in">dinic</span>(s, n);</span><br><span class="line">    <span class="keyword">return</span> (re == n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">ade</span>(s, i, <span class="number">1</span>, <span class="number">0</span>), <span class="built_in">ade</span>(i, s, <span class="number">0</span>, <span class="number">0</span>), <span class="built_in">ade</span>(i + MAXN, t, <span class="number">1</span>, <span class="number">0</span>), <span class="built_in">ade</span>(t, i + MAXN, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;rb[i].x, &amp;rb[i].y, &amp;rb[i].d);</span><br><span class="line">        <span class="built_in">ade</span>(rb[i].x, rb[i].y + MAXN, <span class="number">1</span>, rb[i].d);</span><br><span class="line">        <span class="built_in">ade</span>(rb[i].y + MAXN, rb[i].x, <span class="number">0</span>, rb[i].d);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(rb + <span class="number">1</span>, rb + m + <span class="number">1</span>, cmp);</span><br><span class="line">    <span class="type">int</span> le = n, ri = m + <span class="number">1</span>, ans = m + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (le &lt;= ri) &#123; <span class="comment">// 这个地方之前写成 le &lt; ri 了... 导致有的值取不到...</span></span><br><span class="line">        <span class="type">int</span> mi = (le + ri) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        nd = rb[mi].d;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">pd</span>()) ri = mi - <span class="number">1</span>, ans = mi;</span><br><span class="line">        <span class="keyword">else</span> le = mi + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ans &gt; m) <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, rb[ans].d);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="k.-lonely-numbers">K. Lonely Numbers</h3><p>题意: 给一个整数<span class="math inline">\(n\)</span>,如果一个数<span class="math inline">\(1\le x\le n\)</span>, 不存在<spanclass="math inline">\(1\le y \le n, y\neq x\)</span>使<spanclass="math inline">\(\gcd(x, y), x / \gcd(x, y), y / \gcd(x,y)\)</span>能构成三角形, 则称<spanclass="math inline">\(x\)</span>是孤独的; 问<spanclass="math inline">\(t\)</span>次<span class="math inline">\([1,n]\)</span>中有多少个数是孤独的<span class="math inline">\((t ,n \le10^6)\)</span></p><p>比赛的时候我进行了一些复杂的思考, 企图在所有素数能影响的范围<spanclass="math inline">\([p, ?]\)</span>内给答案数组都<code>+1</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对于大于2的质数a gcd(a, b) = a, a / gcd = 1, b / gcd = b / a</span></span><br><span class="line"><span class="comment">// 1 + a &gt; b / a 或者 1 + b / a &gt; a</span></span><br><span class="line"><span class="comment">// a + a^2 &gt; b 或者 a + b &gt; a^2</span></span><br><span class="line"><span class="comment">// b &lt; a^2 + a 或者 b &gt; a^2 - a....?</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// b &lt; a^2 + a 且 b / a &gt; a</span></span><br><span class="line"><span class="comment">// [a^2, a^2 + a];</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// b &gt; a^2 - a 且 b / a &lt; a</span></span><br><span class="line"><span class="comment">// [a^2 - a, a^2]</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// a | b</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 1 lonely</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (1000000)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">bool</span> isp[MAXN + <span class="number">5</span>];</span><br><span class="line"><span class="type">int</span> prim[MAXN + <span class="number">5</span>], n, fr[MAXN + <span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(isp, <span class="literal">true</span>, <span class="built_in">sizeof</span>(isp));</span><br><span class="line">    isp[<span class="number">1</span>] = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= MAXN; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isp[i])</span><br><span class="line">            prim[++prim[<span class="number">0</span>]] = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= prim[<span class="number">0</span>] &amp;&amp; (LL)i * prim[j] &lt;= MAXN; j++) &#123;</span><br><span class="line">            isp[i * prim[j]] = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (i % prim[j] == <span class="number">0</span>) <span class="keyword">break</span>; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= prim[<span class="number">0</span>]; i++) &#123;</span><br><span class="line">        ++fr[prim[i]];</span><br><span class="line">        LL x = (LL)prim[i] * prim[i] - prim[i] + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; MAXN)</span><br><span class="line">            --fr[nx + <span class="number">1</span>]; <span class="comment">// 这个地方应该改成 --fr[nx]</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= MAXN; i++)</span><br><span class="line">        fr[i] += fr[i - <span class="number">1</span>];</span><br><span class="line">    <span class="type">int</span> t, n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, fr[n] + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>蛋是 ta WA了</p><p>然后比完赛看了看带佬的代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 0x7fffffff</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> minn(x,y) x=min(x,y)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxx(x,y) x=max(x,y)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> a[<span class="number">1000010</span>],b[<span class="number">1000010</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i,j,k,n,m,x,y,z,t;</span><br><span class="line">    n=<span class="number">1000000</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(j=i*<span class="number">2</span>;j&lt;=n;j+=i)</span><br><span class="line">            &#123;</span><br><span class="line">                a[j]=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    a[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        b[i]=b[i<span class="number">-1</span>]+(<span class="number">1</span>^a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,b[n]-b[(<span class="type">int</span>)<span class="built_in">sqrt</span>(n)]+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>??? 这啥啊???</p><p>然后发现很有道理</p><p>首先合数基本上不用考虑, 因为...显然?</p><p>然后一个质数<span class="math inline">\(p\)</span>在<spanclass="math inline">\(n \ge p^2\)</span>之后就都不会是孤独的了.</p><p>然后就没有然后了</p><p>感觉两个程序一个是<span class="math inline">\(\frac{b}{a} \gea\)</span>, 一个是<span class="math inline">\(\frac{b}{a} + 1 &gt;a\)</span>, 蛋是我当时脑瘫了, 写的<code>--fr[nx + 1]</code>,但实际应该是<code>--fr[nx]</code>,因为在<code>n == nx</code>时答案已经受到影响了</p><p>By 心态崩了的Cansult</p>]]></content>
      
      
      <categories>
          
          <category> 比赛总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络流 </tag>
            
            <tag> 二分 </tag>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>比赛总结 38th Petrozavodsk Programming Camp, Winter 2020 Day5</title>
      <link href="/posts/43802.html"/>
      <url>/posts/43802.html</url>
      
        <content type="html"><![CDATA[<p>是人是鬼都在秀 只有宽嫂在挨揍</p><p>我最擅长的事原来是坑队友</p><span id="more"></span><p><a href="../pictures/200202.pdf">题目</a></p><p><a href="../pictures/200202-tutorial.pdf">英文题解</a></p><h3 id="a">A</h3><p>题意: 给<span class="math inline">\(n \le10^{11}\)</span>个整数从<span class="math inline">\(1\)</span>到<spanclass="math inline">\(n\)</span>, 如果两个数的<spanclass="math inline">\(\gcd\)</span>大于<spanclass="math inline">\(1\)</span>, 则他们两个可以合并为一组,问最后最少的组数</p><p>设<span class="math inline">\(D(n) = \{x\mid[(x为质数) \and (x &gt;\frac{n}{2})]\or(x = 1)\}\)</span> 从定义可知, <spanclass="math inline">\(D(n)\)</span>里的数是不会被任何数合并的</p><p>下面我们来证明<span class="math inline">\(R(n) = \{1, 2 , ... , n\}\setminus D(n)\)</span>中的数都是可以两两配对的(当<spanclass="math inline">\(|R(n)|\)</span>为偶数)</p><p>设<span class="math inline">\(f(x)\)</span>为<spanclass="math inline">\(x\)</span>的最大质因数, 把<spanclass="math inline">\(R(n)\)</span>中的数按照最大质因数分组,对于有偶数个元素的组, 他们之间可以两两配对; 对于有奇数个元素的组,一定会有一个数是<span class="math inline">\(2f(x)\)</span>(因为取遍<span class="math inline">\(1\)</span>了到<spanclass="math inline">\(n\)</span>, 且<spanclass="math inline">\(2f(x)\)</span>一定是个合数), 把这个数挑出来,剩下的两两配对; 而如果<span class="math inline">\(|R(n)|\)</span>为偶数,奇数元素个数组的个数一定是偶数, 所以会有偶数个<spanclass="math inline">\(2f(x)\)</span>可以两两配对;</p><p>当然如果<spanclass="math inline">\(|R(n)|\)</span>是奇数那就只能随便扔一个了...<code>= =</code></p><p>好, 现在的问题就转化为了求<spanclass="math inline">\(|D(n)|\)</span>, 求出它我们就可以求出<spanclass="math inline">\(ans = \lfloor \frac{n -|D(n)|}{2}\rfloor\)</span>, 我们需要求出某个区间内质数的个数,区间可能达到<span class="math inline">\(10^{11}\)</span>,毛子的官方题解是怎么做的呢</p><p>分段打表(不愧是你)</p><p>在本地预处理出<code>f[d], d = 10000</code>,<code>f[i]</code>代表<span class="math inline">\([(i - 1) \times 10^7, i\times 10^7)\)</span>间的质数个数, 然后搞搞就出来了</p><p>草</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 咕咕咕咕</span></span><br></pre></td></tr></table></figure><h3 id="b">B</h3><p>开局不知道为啥我莫名自信觉得这玩意能二分</p><p>样例WA了之后反思了一下, 发现我不会组合数</p><p>去翻了一下组合数的性质, 发现有个lucas定理好像挺有意思 <spanclass="math display">\[\binom{n}{m} \!\!\! \mod p = \binom{\lfloor \frac{n}{p}\rfloor}{\lfloor\frac{m}{p}\rfloor } \cdot \binom{n\!\! \mod p}{m\!\!\mod p}\!\!\! \modp\]</span> 在这个题里, 我们只用到了<spanclass="math inline">\(p=2\)</span>的情况, 要求<spanclass="math inline">\(\binom{n}{m}\!\!\!\!\mod\!2\)</span>,我们可以不断的给<span class="math inline">\(n\)</span>和<spanclass="math inline">\(m\)</span>除以<spanclass="math inline">\(2\)</span>, 只关注等号右边第二个组合数, 当<spanclass="math inline">\(n\)</span>为偶数且<spanclass="math inline">\(m\)</span>为奇数时, 它的值为<spanclass="math inline">\(0\)</span>, 也就是说原始的<spanclass="math inline">\(\binom{n}{m} \!\equiv 0\mod \!2\)</span></p><p>然后我就写了, 然后我就WA了,然后我就发现我不会统计有多少个数满足[至少有一个位是1,且在这一位上当前的数是0], 然后队友就秒了</p><p>设<code>f[i]</code>是二进制意义上的前缀和,他的值是"<code>i</code>上是1的位上可以是1, 其他位都是0的数"的个数</p><p>前缀和求一波, 然后直接统计<code>sum&#123;f[a[i]]&#125;</code>就行了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我的(错的)</span></span><br><span class="line"><span class="comment">// lucas过程中 当有一个m为奇数, n为偶数, 结果就是偶数, 否则为奇数</span></span><br><span class="line"><span class="comment">// n所有为0的位上m都必须为0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (1000000)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n, a[MAXN + <span class="number">5</span>], num[MAXN + <span class="number">5</span>], f[<span class="number">30</span>];</span><br><span class="line">LL ans;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> tim)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> nx = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> ((!(x &amp; <span class="number">1</span>)) &amp;&amp; x) x &gt;&gt;= <span class="number">1</span>, ++nx;</span><br><span class="line">    <span class="keyword">if</span> (x) f[nx] += tim;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">enq</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> nx = <span class="number">0</span>, re = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (x) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!(x &amp; <span class="number">1</span>)) re += f[nx];</span><br><span class="line">        x &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        ++nx;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> z;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;z);</span><br><span class="line">    <span class="keyword">while</span> (z--) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(num, <span class="number">0</span>, <span class="built_in">sizeof</span>(num));</span><br><span class="line">        <span class="built_in">memset</span>(f, <span class="number">0</span>, <span class="built_in">sizeof</span>(f));</span><br><span class="line">        ans = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]), ++num[a[i]];</span><br><span class="line">        <span class="built_in">sort</span>(a + <span class="number">1</span>, a + n + <span class="number">1</span>);</span><br><span class="line">        a[<span class="number">0</span>] = <span class="built_in">unique</span>(a + <span class="number">1</span>, a + n + <span class="number">1</span>) - a - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> nown = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= a[<span class="number">0</span>]; i++) &#123;</span><br><span class="line">            <span class="built_in">add</span>(a[i], num[a[i]]);</span><br><span class="line">            nown += num[a[i]];</span><br><span class="line">            ans += (LL)(nown - <span class="built_in">enq</span>(a[i])) * num[a[i]];;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 孟队的</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits\stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxn 1000001</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxb 20</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> ll maxnum=(<span class="number">1</span>&lt;&lt;maxb);</span><br><span class="line">ll ans;</span><br><span class="line">ll arr[maxn];</span><br><span class="line">ll f[maxnum];</span><br><span class="line">ll t;</span><br><span class="line">ll n;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;maxnum;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        f[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ans=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;n);</span><br><span class="line">        <span class="built_in">init</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;arr[i]);</span><br><span class="line">            f[arr[i]]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;maxb;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;maxnum;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(j&amp;(<span class="number">1</span>&lt;&lt;i))</span><br><span class="line">                &#123;</span><br><span class="line">                    f[j]+=f[j^(<span class="number">1</span>&lt;&lt;i)];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            ans+=f[arr[i]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="c">C</h3><p>咕</p><p>By Cansult</p>]]></content>
      
      
      <categories>
          
          <category> 比赛总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>水题笔记 TJU ACM 2020第一学期 作业4 [杂题]</title>
      <link href="/posts/50217.html"/>
      <url>/posts/50217.html</url>
      
        <content type="html"><![CDATA[<p>日他妈实在写不动了</p><span id="more"></span><p><a href="https://vjudge.net/contest/397460#overview">题目</a></p><h3 id="a">A</h3><p>水题 开始没判断<code>n == 0</code>的情况wa了一发</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果可以做成两个相同的 那么就是先手获胜</span></span><br><span class="line"><span class="comment">// 如果不能呢, 就是k为1, 然后n为偶数 ...那就是分成了一奇一偶</span></span><br><span class="line"><span class="comment">// 哦豁</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n, k;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;k);</span><br><span class="line">    <span class="keyword">if</span> (!n) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Joker&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (k != <span class="number">1</span>) <span class="built_in">puts</span>(<span class="string">&quot;Ervin&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (n &amp; <span class="number">1</span>) <span class="built_in">puts</span>(<span class="string">&quot;Ervin&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;Joker&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="b">B</h3><p>不知道为啥wa了</p><h3 id="c">C</h3><p>筛完枚举就完事了 测评机速度挺快</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (30000000)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXP (5000000)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">bool</span> isp[MAXN + <span class="number">5</span>];</span><br><span class="line"><span class="type">int</span> prim[MAXP + <span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> l, r;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;l, &amp;r);</span><br><span class="line">    <span class="built_in">memset</span>(isp, <span class="literal">true</span>, <span class="built_in">sizeof</span>(isp));</span><br><span class="line">    isp[<span class="number">1</span>] = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= r; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isp[i])</span><br><span class="line">            prim[++prim[<span class="number">0</span>]] = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= prim[<span class="number">0</span>] &amp;&amp; (LL)i * prim[j] &lt;= r; j++) &#123;</span><br><span class="line">            isp[i * prim[j]] = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (i % prim[j] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> a = <span class="number">1</span>; a * a &lt;= r; a++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> b = <span class="built_in">max</span>(a, (<span class="type">int</span>)<span class="built_in">sqrt</span>(l - a * a)); b * b + a * a &lt;= r; b++)</span><br><span class="line">            <span class="keyword">if</span> (l &lt;= a * a + b * b &amp;&amp; a * a + b * b &lt;= r &amp;&amp; isp[a * a + b * b])</span><br><span class="line">                ++ans;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="d">D</h3><p>树状数组扫就完事了 甚至不需要离散化</p><p>一开始没发现<code>a</code>可能为<code>0</code>, T了几发</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// f[k][i]为以i为结尾的长度为k的递减子序列个数</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXB (100000)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (20000)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXK (10)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AH (1000000000)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL int </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x) &amp; (-(x)))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> b[MAXB + <span class="number">5</span>], f[MAXK + <span class="number">5</span>][MAXN + <span class="number">5</span>], ans, n, k, a[MAXN + <span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">const</span> <span class="type">int</span>&amp; tar, <span class="type">const</span> LL&amp; num)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = tar; i &lt;= MAXB; i += <span class="built_in">lowbit</span>(i)) &#123;</span><br><span class="line">        b[i] += num;</span><br><span class="line">        <span class="keyword">while</span> (b[i] &gt; AH) b[i] -= AH;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">enquiry</span><span class="params">(<span class="type">const</span> <span class="type">int</span>&amp; tar)</span> </span>&#123;</span><br><span class="line">    LL re = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = MAXB; i; i -= <span class="built_in">lowbit</span>(i)) &#123;</span><br><span class="line">        re += b[i];</span><br><span class="line">        <span class="keyword">while</span> (re &gt; AH) re -= AH;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = tar; i; i -= <span class="built_in">lowbit</span>(i)) &#123;</span><br><span class="line">        re -= b[i];</span><br><span class="line">        re += ((re &gt; <span class="number">0</span>) ? <span class="number">0</span> : AH);</span><br><span class="line">        <span class="keyword">while</span> (re &gt; AH) re -= AH;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        f[<span class="number">1</span>][i] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= k; i++) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(b, <span class="number">0</span>, <span class="built_in">sizeof</span>(b));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">            f[i][j] = <span class="built_in">enquiry</span>(a[j]), <span class="built_in">modify</span>(a[j], f[i - <span class="number">1</span>][j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        ans += f[k][i];</span><br><span class="line">        <span class="keyword">while</span> (ans &gt; AH) ans -= AH;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;k);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, a + i), ++a[i];</span><br><span class="line">    <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="e">E</h3><p>BFS</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (100)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> num(x, y) (((x) - 1) * MAXN + (y))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edg</span> &#123;</span><br><span class="line">    <span class="type">int</span> fr, to, next;</span><br><span class="line">&#125; b[MAXN * MAXN * <span class="number">100</span>];</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> xy[<span class="number">4</span>][<span class="number">2</span>] = &#123; &#123; <span class="number">0</span>, <span class="number">1</span> &#125;, &#123; <span class="number">0</span>, <span class="number">-1</span> &#125;, &#123; <span class="number">-1</span>, <span class="number">0</span> &#125;, &#123; <span class="number">-1</span>, <span class="number">0</span> &#125; &#125;;</span><br><span class="line"><span class="type">int</span> n, m, a[MAXN * MAXN * <span class="number">2</span>], g[MAXN * MAXN * <span class="number">2</span>], cntb, S, T;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">adn</span><span class="params">(<span class="type">int</span> f, <span class="type">int</span> t)</span> </span>&#123; b[++cntb] = &#123; f, t, g[f] &#125;; g[f] = cntb; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> dis[MAXN * MAXN * <span class="number">3</span>];</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    <span class="built_in">memset</span>(dis, <span class="number">-1</span>, <span class="built_in">sizeof</span>(dis));</span><br><span class="line">    q.<span class="built_in">push</span>(T);</span><br><span class="line">    dis[T] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="type">int</span> now = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = g[now]; i; i = b[i].next)</span><br><span class="line">            <span class="keyword">if</span> (dis[b[i].to] == <span class="number">-1</span>) &#123;</span><br><span class="line">                dis[b[i].to] = dis[now] + <span class="number">1</span>;</span><br><span class="line">                q.<span class="built_in">push</span>(b[i].to);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">            <span class="keyword">if</span> (dis[<span class="built_in">num</span>(i, j)] &lt;= dis[S] &amp;&amp; a[<span class="built_in">num</span>(i, j)] &gt; <span class="number">0</span>)</span><br><span class="line">                ans += a[<span class="built_in">num</span>(i, j)];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m) != EOF) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(g, <span class="number">0</span>, <span class="built_in">sizeof</span>(g));</span><br><span class="line">        <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="built_in">sizeof</span>(a));</span><br><span class="line">        cntb = <span class="number">0</span>;</span><br><span class="line">        <span class="type">char</span> s[MAXN + <span class="number">5</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">                <span class="keyword">if</span> (s[j - <span class="number">1</span>] == <span class="string">&#x27;S&#x27;</span>)</span><br><span class="line">                    a[<span class="built_in">num</span>(i, j)] = <span class="number">-2</span>, S = <span class="built_in">num</span>(i, j);</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (s[j - <span class="number">1</span>] == <span class="string">&#x27;E&#x27;</span>)</span><br><span class="line">                    a[<span class="built_in">num</span>(i, j)] = <span class="number">-3</span>, T = <span class="built_in">num</span>(i, j);</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (s[j - <span class="number">1</span>] == <span class="string">&#x27;T&#x27;</span>)</span><br><span class="line">                    a[<span class="built_in">num</span>(i, j)] = <span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">else</span> a[<span class="built_in">num</span>(i, j)] = s[j - <span class="number">1</span>] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (a[<span class="built_in">num</span>(i, j)] == <span class="number">-1</span>) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="type">int</span> now = <span class="built_in">num</span>(i, j), ni, nj;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++) &#123;</span><br><span class="line">                    ni = i + xy[k][<span class="number">0</span>], nj = j + xy[k][<span class="number">1</span>];</span><br><span class="line">                    <span class="keyword">if</span> (ni &gt; n || nj &gt; m || a[<span class="built_in">num</span>(ni, nj)] == <span class="number">-1</span> || ni &lt; <span class="number">1</span> || nj &lt; <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="built_in">adn</span>(now, <span class="built_in">num</span>(ni, nj)), <span class="built_in">adn</span>(<span class="built_in">num</span>(ni, nj), now);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="built_in">bfs</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="f">F</h3><p>二分就完事了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (100000)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n, m, v[MAXN + <span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">jud</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> nowans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, nowv = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nowv + v[i] &gt; x)</span><br><span class="line">            nowv = <span class="number">0</span>, ++nowans;</span><br><span class="line">        nowv += v[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nowans &lt;= m; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;v[i]);</span><br><span class="line">    <span class="type">int</span> l = <span class="number">1</span>, r = <span class="number">1000000000</span>;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">        <span class="type">int</span> mi = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">jud</span>(mi)) r = mi;</span><br><span class="line">        <span class="keyword">else</span> l = mi + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, r);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="g">G</h3><p>写不动</p><h3 id="h">H</h3><p>随便DP就完事了</p><p>没把<code>f</code>初始化为<code>-INF</code>,导致可能从不合法的状态转移来WA了一发</p><p>没判断<code>ans &lt; 0</code>WA了一发</p><p>还没输入<code>n</code>就初始化WA了一发</p><p><code>&gt;=</code>写成了<code>&gt;</code>WA了一发</p><p>真行啊...</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (100000)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXM (100)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF (1000000000)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n, m, k, f[MAXN + <span class="number">5</span>][MAXM + <span class="number">5</span>][<span class="number">3</span>], a[MAXN + <span class="number">5</span>], d[MAXN + <span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;k);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n + <span class="number">1</span>; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= m; j++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt;= <span class="number">2</span>; k++)</span><br><span class="line">                f[i][j][k] = -INF;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;d[i]);</span><br><span class="line">    f[<span class="number">1</span>][m][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= m; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (j &gt;= d[i]) f[i + <span class="number">1</span>][j - d[i]][<span class="number">0</span>] = <span class="built_in">max</span>(f[i + <span class="number">1</span>][j - d[i]][<span class="number">0</span>], <span class="built_in">max</span>(f[i][j][<span class="number">0</span>], <span class="built_in">max</span>(f[i][j][<span class="number">2</span>], f[i][j][<span class="number">1</span>])) + a[i]);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> l = <span class="number">0</span>; l &lt; <span class="number">2</span>; l++)</span><br><span class="line">                f[i + <span class="number">1</span>][<span class="built_in">min</span>(m, j + k)][l + <span class="number">1</span>] = <span class="built_in">max</span>(f[i + <span class="number">1</span>][<span class="built_in">min</span>(m, j + k)][l + <span class="number">1</span>], f[i][j][l]);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= m; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">2</span>; j++)</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, f[n + <span class="number">1</span>][i][j]);</span><br><span class="line">    <span class="keyword">if</span> (ans &gt; <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="i">I</h3><p>预处理完了二分就行了</p><p>卡了卡常才过得去</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (6000)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n, q, mogic[MAXN + <span class="number">5</span>][MAXN + <span class="number">5</span>];</span><br><span class="line"><span class="type">char</span> S[MAXN + <span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">mabs</span><span class="params">(<span class="type">const</span> <span class="type">int</span>&amp; x)</span> </span>&#123; <span class="keyword">return</span> (x &gt; <span class="number">0</span>) ? x : (-x); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">getint</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">char</span> x;</span><br><span class="line">    <span class="type">int</span> re = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        x = <span class="built_in">getchar</span>();</span><br><span class="line">        <span class="keyword">if</span> (x &lt;= <span class="string">&#x27;9&#x27;</span> &amp;&amp; x &gt;= <span class="string">&#x27;0&#x27;</span>) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        re = (re &lt;&lt; <span class="number">1</span>) + (re &lt;&lt; <span class="number">3</span>) + x - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        x = <span class="built_in">getchar</span>();</span><br><span class="line">        <span class="keyword">if</span> (x &gt;<span class="string">&#x27;9&#x27;</span> || x &lt; <span class="string">&#x27;0&#x27;</span>) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, S);</span><br><span class="line">    n = <span class="built_in">strlen</span>(S);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        mogic[i][i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; i + j &lt; n &amp;&amp; i - j &gt;= <span class="number">0</span>; j++)</span><br><span class="line">            mogic[i - j][i + j] = mogic[i - j + <span class="number">1</span>][i + j - <span class="number">1</span>] + <span class="built_in">mabs</span>(S[i - j] - S[i + j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        mogic[i - <span class="number">1</span>][i] = <span class="built_in">abs</span>(S[i] - S[i - <span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; i - j &gt; <span class="number">0</span> &amp;&amp; i + j &lt; n; j++)</span><br><span class="line">            mogic[i - j - <span class="number">1</span>][i + j] = mogic[i - j][i + j - <span class="number">1</span>] + <span class="built_in">mabs</span>(S[i - j - <span class="number">1</span>] - S[i + j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;q);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, li, ri, ki; i &lt;= q; i++) &#123;</span><br><span class="line">        li = <span class="built_in">getint</span>();</span><br><span class="line">        ri = <span class="built_in">getint</span>();</span><br><span class="line">        ki = <span class="built_in">getint</span>();</span><br><span class="line">        <span class="comment">//scanf(&quot;%d%d%d&quot;, &amp;li, &amp;ri, &amp;ki);</span></span><br><span class="line">        --li, --ri;</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>, r = (ri - li + <span class="number">1</span>) / <span class="number">2</span>, m, ans = r;</span><br><span class="line">        <span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line">            m = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (mogic[li + m][ri - m] &lt;= ki) r = m - <span class="number">1</span>, ans = m;</span><br><span class="line">            <span class="keyword">else</span> l = m + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ri - li + <span class="number">1</span> - <span class="number">2</span> * ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="j">J</h3><p>不会</p><h3 id="k">K</h3><p>二维AC自动机</p><p>方法就是给把模板矩阵的每一行都看作一个字符串建AC自动机,然后用文本串匹配的时候, 如果匹配成功,就给"这个模板矩阵右上角应该在的位置"加一,然后如果有一个位置的值大于模板矩阵的行数说明所有的行都被匹配过了</p><p>这个题因为所有模板矩阵的大小都一样, 可以放在一起建图,只用匹配一次文本串, 节省点时间</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXC (2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (1000000)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXM (1000)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXX (100)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">    <span class="type">int</span> son[MAXC], fail;</span><br><span class="line">    vector&lt;pii&gt; num;</span><br><span class="line">&#125; b[MAXN &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> a[MAXM + <span class="number">5</span>][MAXM + <span class="number">5</span>], cntb;</span><br><span class="line"><span class="type">bool</span> ans[MAXN + <span class="number">5</span>];</span><br><span class="line">map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; cntx[MAXM + <span class="number">5</span>][MAXM + <span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; MAXC; i++) <span class="keyword">if</span> (b[<span class="number">0</span>].son[i]) q.<span class="built_in">push</span>(b[<span class="number">0</span>].son[i]);</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="type">int</span> now = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; MAXC; i++)</span><br><span class="line">            <span class="keyword">if</span> (b[now].son[i]) b[b[now].son[i]].fail = b[b[now].fail].son[i], q.<span class="built_in">push</span>(b[now].son[i]);</span><br><span class="line">            <span class="keyword">else</span> b[now].son[i] = b[b[now].fail].son[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> na, ma, nb, mb;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>, &amp;na, &amp;ma, &amp;nb, &amp;mb);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= na; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= ma; j++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%1d&quot;</span>, &amp;a[i][j]);</span><br><span class="line">    <span class="type">int</span> t, bt;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;t);</span><br><span class="line">    bt = t;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, now = <span class="number">0</span>; i &lt;= nb; i++, now = <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>, bij; j &lt;= mb; j++) &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%1d&quot;</span>, &amp;bij);</span><br><span class="line">                <span class="keyword">if</span> (!b[now].son[bij]) b[now].son[bij] = ++cntb;</span><br><span class="line">                now = b[now].son[bij];</span><br><span class="line">            &#125;</span><br><span class="line">            b[now].num.<span class="built_in">push_back</span>(<span class="built_in">make_pair</span>(t, i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;     </span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= na; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>, now = <span class="number">0</span>; j &lt;= ma; j++) &#123;</span><br><span class="line">            now = b[now].son[a[i][j]];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = now; k; k = b[k].fail)</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> l = <span class="number">0</span>; l &lt; b[k].num.<span class="built_in">size</span>(); l++)</span><br><span class="line">                    <span class="keyword">if</span> (!ans[b[k].num[l].first] &amp;&amp; i &gt;= b[k].num[l].second) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (cntx[i - b[k].num[l].second + <span class="number">1</span>][j].<span class="built_in">find</span>(b[k].num[l].first) == cntx[i - b[k].num[l].second + <span class="number">1</span>][j].<span class="built_in">end</span>())</span><br><span class="line">                            cntx[i - b[k].num[l].second + <span class="number">1</span>][j][b[k].num[l].first] = <span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                            ++cntx[i - b[k].num[l].second + <span class="number">1</span>][j][b[k].num[l].first];</span><br><span class="line">                        <span class="keyword">if</span> (cntx[i - b[k].num[l].second + <span class="number">1</span>][j][b[k].num[l].first] == nb)</span><br><span class="line">                            ans[b[k].num[l].first] = <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = bt - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        <span class="built_in">puts</span>(ans[i] ? <span class="string">&quot;known&quot;</span> : <span class="string">&quot;new&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="l">L</h3><p>排序题 然而还是WA了两发</p><p>一次格式错了, 少了个空格</p><p>一次没有<code>break</code>, 导致比赛时间结束了还能答题 = =</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (100000)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">que</span> &#123;</span><br><span class="line">    <span class="type">int</span> d, t;</span><br><span class="line">&#125; a[MAXN + <span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">const</span> que&amp; x, <span class="type">const</span> que&amp; y)</span> </span>&#123; <span class="keyword">return</span> x.d &lt; y.d; &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;t);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= t; j++) &#123;</span><br><span class="line">        <span class="type">int</span> n, m;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i].d);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i].t);</span><br><span class="line">        <span class="built_in">sort</span>(a + <span class="number">1</span>, a + n + <span class="number">1</span>, cmp);</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            <span class="keyword">if</span> (a[i].t &lt;= m)</span><br><span class="line">                ++ans, m -= a[i].t;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Case %d: %d\n&quot;</span>, j, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="m">M</h3><p>不会交互</p><h3 id="n">N</h3><p>粘了个快速幂板子</p><p>实际duck不必</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> p = <span class="number">10</span>, num = <span class="number">1378</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">fastpow</span><span class="params">(<span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (k == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span> % p;</span><br><span class="line">    <span class="keyword">if</span> (k == <span class="number">1</span>) <span class="keyword">return</span> num % p;</span><br><span class="line">    <span class="type">int</span> re = <span class="built_in">fastpow</span>(k &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    re = (re * re) % p;</span><br><span class="line">    <span class="keyword">if</span> (k &amp; <span class="number">1</span>) re = (re * num) % p;</span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> k;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;k);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, <span class="built_in">fastpow</span>(k));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="o">O</h3><p>搞个桶就完事了</p><p>一开始没考虑一个数出现多次WA了一发</p><p>然后没考虑<code>x^a[i]</code>比桶的大小大WA了好几发</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (100000)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n, a[MAXN + <span class="number">5</span>], x, abab[MAXN + <span class="number">5</span>];</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ans;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;x);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]), ans += abab[<span class="built_in">min</span>(MAXN + <span class="number">1</span>, x ^ a[i])], ++abab[a[i]];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="p">P</h3><p>水题</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 很多环 找出所有环的x的最小公倍数</span></span><br><span class="line"><span class="comment">// 如果环的节点数n为偶数, x = n / 2; 否则x = n;</span></span><br><span class="line"><span class="comment">// 如果有节点不在环上, 输出-1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (100)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> c[MAXN + <span class="number">5</span>], n, vis[MAXN + <span class="number">5</span>], l[MAXN + <span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> now)</span> </span>&#123;</span><br><span class="line">    ++vis[now];</span><br><span class="line">    <span class="keyword">if</span> (vis[c[now]] &lt; <span class="number">2</span>) <span class="built_in">dfs</span>(c[now]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> now, <span class="type">int</span> nowl)</span> </span>&#123;</span><br><span class="line">    ++vis[now];</span><br><span class="line">    <span class="keyword">if</span> (vis[c[now]] &lt; <span class="number">3</span>) <span class="built_in">solve</span>(c[now], nowl + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">else</span> l[++l[<span class="number">0</span>]] = nowl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> (y == <span class="number">0</span>) ? x : <span class="built_in">gcd</span>(y, x % y); &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;c[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">if</span> (!vis[i])</span><br><span class="line">            <span class="built_in">dfs</span>(i);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">if</span> (vis[i] &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">if</span> (vis[i] &lt; <span class="number">3</span>)</span><br><span class="line">            <span class="built_in">solve</span>(i, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= l[<span class="number">0</span>]; i++)</span><br><span class="line">        l[i] = (l[i] &amp; <span class="number">1</span>) ? l[i] : (l[i] &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="type">int</span> ans = l[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= l[<span class="number">0</span>]; i++)</span><br><span class="line">        ans = ans * l[i] / <span class="built_in">gcd</span>(ans, l[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="q">Q</h3><p>分组DP</p><p>并查集<code>merge</code>之前忘了判断他们是否已经在一个集里了WA了一发</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (1000)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> fa[MAXN + <span class="number">5</span>], n, w[MAXN + <span class="number">5</span>], b[MAXN + <span class="number">5</span>], m, tw, f[MAXN + <span class="number">5</span>][MAXN + <span class="number">5</span>], ans, bw[MAXN + <span class="number">5</span>], bb[MAXN + <span class="number">5</span>];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; cla[MAXN + <span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; <span class="keyword">return</span> (fa[x] == x) ? x : (fa[x] = <span class="built_in">find</span>(fa[x])); &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; fa[<span class="built_in">find</span>(x)] = <span class="built_in">find</span>(y); &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;tw);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;w[i]), bw[i] = w[i], fa[i] = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;b[i]), bb[i] = b[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, xi, yi; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;xi, &amp;yi);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">find</span>(xi) != <span class="built_in">find</span>(yi)) &#123;</span><br><span class="line">            w[<span class="built_in">find</span>(yi)] += w[<span class="built_in">find</span>(xi)];</span><br><span class="line">            b[<span class="built_in">find</span>(yi)] += b[<span class="built_in">find</span>(xi)];</span><br><span class="line">            <span class="built_in">merge</span>(xi, yi);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        cla[<span class="built_in">find</span>(i)].<span class="built_in">push_back</span>(i);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (fa[i] == i) </span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = tw; j &gt;= w[i]; j--)</span><br><span class="line">                f[i][j] = <span class="built_in">max</span>(f[i][j], f[i - <span class="number">1</span>][j - w[i]] + b[i]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; cla[i].<span class="built_in">size</span>(); j++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = tw; k &gt;= bw[cla[i][j]]; k--)</span><br><span class="line">                f[i][k] = <span class="built_in">max</span>(f[i][k], f[i - <span class="number">1</span>][k - bw[cla[i][j]]] + bb[cla[i][j]]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = tw; j &gt;= <span class="number">0</span>; j--)</span><br><span class="line">            f[i][j] = <span class="built_in">max</span>(f[i][j], f[i - <span class="number">1</span>][j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= tw; j++)</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, f[n][j]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="r">R</h3><p>不会</p><p>不会是2SAT吧?</p><p>2你妈的SAT</p><p>直接建图暴力染就行了</p><p>建图有个高明之处只给<code>2 * i</code>和<code>2 * i + 1</code>以及各对狗男女之间连边</p><p>因为要求的是三个人不同色,只要有相邻的两人不同那么包含这两个人的三人就一定不同</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (200000)</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edg</span> &#123;</span><br><span class="line">    <span class="type">int</span> from, to, next;</span><br><span class="line">&#125; b[MAXN * <span class="number">2</span> + <span class="number">5</span>];</span><br><span class="line"><span class="type">int</span> g[MAXN + <span class="number">5</span>], cntb, n, vis[MAXN + <span class="number">5</span>], xy[MAXN + <span class="number">5</span>][<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ade</span><span class="params">(<span class="type">int</span> fr, <span class="type">int</span> t)</span> </span>&#123; b[++cntb] = &#123; fr, t, g[fr] &#125;; g[fr] = cntb; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> now)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = g[now]; i; i = b[i].next)</span><br><span class="line">        <span class="keyword">if</span> (vis[b[i].to] == <span class="number">-1</span>)</span><br><span class="line">            vis[b[i].to] = !vis[now], <span class="built_in">dfs</span>(b[i].to);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(vis, <span class="number">-1</span>, <span class="built_in">sizeof</span>(vis));</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;xy[i][<span class="number">0</span>], &amp;xy[i][<span class="number">1</span>]);</span><br><span class="line">        <span class="built_in">ade</span>(xy[i][<span class="number">0</span>], xy[i][<span class="number">1</span>]);</span><br><span class="line">        <span class="built_in">ade</span>(xy[i][<span class="number">1</span>], xy[i][<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">ade</span>(<span class="number">2</span> * i, <span class="number">2</span> * i + <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">ade</span>(<span class="number">2</span> * i + <span class="number">1</span>, <span class="number">2</span> * i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n * <span class="number">2</span>; i++)</span><br><span class="line">        <span class="keyword">if</span> (vis[i] == <span class="number">-1</span>)</span><br><span class="line">            <span class="built_in">dfs</span>(i);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, vis[xy[i][<span class="number">0</span>]] + <span class="number">1</span>, vis[xy[i][<span class="number">1</span>]] + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="s">S</h3><p>一开始还以为真正的素数会很大, 还搞了个Miller Rabin</p><p>结果发现最大也就三位数</p><p>从后往前加结果忘了从前往后判断是不是素数WA了几发</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个真正的素数要么是个位数 要么是一个真正的素数前面加上一个个位数的素数</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (2000)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF (1000000)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// const int pri[5] = &#123; 4, 2, 3, 5, 7 &#125;;</span></span><br><span class="line"><span class="type">bool</span> isp[INF + <span class="number">5</span>];</span><br><span class="line"><span class="type">int</span> prim[INF + <span class="number">5</span>];</span><br><span class="line">LL ans[MAXN + <span class="number">5</span>] = &#123;<span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>&#125;;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">LL fastpow(int a, LL b, LL p) &#123;</span></span><br><span class="line"><span class="comment">    if (b == 0) return 1 % p;</span></span><br><span class="line"><span class="comment">    if (b == 1) return a % p;</span></span><br><span class="line"><span class="comment">    LL re = fastpow(a, b &gt;&gt; 1, p);</span></span><br><span class="line"><span class="comment"> re = re * re % p;</span></span><br><span class="line"><span class="comment">    if (b &amp; 1) re = re * a % p;</span></span><br><span class="line"><span class="comment">  return re;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">bool jud(LL x) &#123;</span></span><br><span class="line"><span class="comment">  for (int i = 1; i &lt;= pri[0]; i++)</span></span><br><span class="line"><span class="comment">     if (fastpow(pri[i], x, x) != pri[i])</span></span><br><span class="line"><span class="comment">         return false;</span></span><br><span class="line"><span class="comment">    return true;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(isp, <span class="literal">true</span>, <span class="built_in">sizeof</span>(isp));</span><br><span class="line">    isp[<span class="number">1</span>] = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= INF; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isp[i])</span><br><span class="line">            prim[++prim[<span class="number">0</span>]] = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= prim[<span class="number">0</span>] &amp;&amp; (LL)i * prim[j] &lt;= INF; j++) &#123;</span><br><span class="line">            isp[i * prim[j]] = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (i % prim[j] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">jud</span><span class="params">(LL x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (x) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1000000</span>; i; i /= <span class="number">10</span>)</span><br><span class="line">            <span class="keyword">if</span> (!isp[x % i]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        x /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(LL x, LL y)</span> </span>&#123; <span class="keyword">return</span> x &lt; y; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (ans[<span class="number">0</span>] &lt;= n) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= ans[<span class="number">0</span>]; i++) &#123;</span><br><span class="line">            LL x = ans[i], nx;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">2</span>; j &lt;= <span class="number">4</span>; j++) &#123;</span><br><span class="line">                nx = x * <span class="number">10</span> + prim[j];</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">jud</span>(nx))</span><br><span class="line">                    ans[++ans[<span class="number">0</span>]] = nx;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(ans + <span class="number">1</span>, ans + ans[<span class="number">0</span>] + <span class="number">1</span>, cmp);</span><br><span class="line">    ans[<span class="number">0</span>] = <span class="built_in">unique</span>(ans + <span class="number">1</span>, ans + ans[<span class="number">0</span>] + <span class="number">1</span>) - ans - <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>, ans[n]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">9</span>) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="t">T</h3><p>线段树随便搞搞就过了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (200000)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LS(x) ((x) &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RS(x) (((x) &lt;&lt; 1) | 1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">    <span class="type">int</span> le, ri;</span><br><span class="line">    LL minz;</span><br><span class="line">&#125; b[MAXN &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> n, a[MAXN + <span class="number">5</span>], ans;</span><br><span class="line">LL fr[MAXN + <span class="number">5</span>], S;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> now, <span class="type">int</span> le, <span class="type">int</span> ri)</span> </span>&#123;</span><br><span class="line">    b[now].le = le, b[now].ri = ri;</span><br><span class="line">    <span class="keyword">if</span> (le == ri) &#123;</span><br><span class="line">        b[now].minz = fr[le];</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mi = (le + ri) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">init</span>(<span class="built_in">LS</span>(now), le, mi), <span class="built_in">init</span>(<span class="built_in">RS</span>(now), mi + <span class="number">1</span>, ri);</span><br><span class="line">    b[now].minz = <span class="built_in">min</span>(b[<span class="built_in">LS</span>(now)].minz, b[<span class="built_in">RS</span>(now)].minz);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">enq</span><span class="params">(<span class="type">int</span> now, <span class="type">int</span> le, <span class="type">int</span> ri, LL s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (le == ri) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b[now].minz &gt; s) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> le;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mi = (b[now].le + b[now].ri) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (le &gt; mi) <span class="keyword">return</span> <span class="built_in">enq</span>(<span class="built_in">RS</span>(now), le, ri, s);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (ri &lt;= mi) <span class="keyword">return</span> <span class="built_in">enq</span>(<span class="built_in">LS</span>(now), le, ri, s);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (b[<span class="built_in">RS</span>(now)].minz &lt;= s) <span class="keyword">return</span> <span class="built_in">enq</span>(<span class="built_in">RS</span>(now), mi + <span class="number">1</span>, ri, s);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (b[<span class="built_in">LS</span>(now)].minz &lt;= s) <span class="keyword">return</span> <span class="built_in">enq</span>(<span class="built_in">LS</span>(now), le, mi, s);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%lld&quot;</span>, &amp;n, &amp;S);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]), fr[i] = fr[i - <span class="number">1</span>] + a[i];</span><br><span class="line">    <span class="built_in">init</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, <span class="built_in">enq</span>(<span class="number">1</span>, i, n, fr[i - <span class="number">1</span>] + S) - i + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (!ans) <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="u">U</h3><p>数位DP</p><p>细节恶心 呕</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function">LL <span class="title">solve</span><span class="params">(LL x)</span> </span>&#123;</span><br><span class="line">    LL ans = <span class="number">0</span>, f[<span class="number">21</span>][<span class="number">10</span>][<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line">    <span class="type">int</span> a[<span class="number">21</span>];</span><br><span class="line">    a[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (LL i = <span class="number">1000000000000000000</span>, j = <span class="number">19</span>; i; i /= <span class="number">10</span>, j--) &#123;</span><br><span class="line">        a[j] = x / i % <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">if</span> (a[j] &amp;&amp; !a[<span class="number">0</span>]) a[<span class="number">0</span>] = j;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">if</span> (!a[<span class="number">0</span>]) a[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// greater</span></span><br><span class="line">    <span class="comment">// f[i][j][0 / 1][0 / 1] 表示前i位已经确定, 第i位是j时, 否 / 是紧贴这上限, 到目前为止否 / 是全是0时 的单调递增数的个数</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(f, <span class="number">0</span>, <span class="built_in">sizeof</span>(f));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; a[a[<span class="number">0</span>]]; j++) f[a[<span class="number">0</span>]][j][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (!x) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    f[a[<span class="number">0</span>]][a[a[<span class="number">0</span>]]][<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    f[a[<span class="number">0</span>]][<span class="number">0</span>][<span class="number">0</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = a[<span class="number">0</span>]; i &gt; <span class="number">1</span>; i--)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> l = <span class="number">0</span>; l &lt; <span class="number">2</span>; l++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (f[i][j][<span class="number">0</span>][l])</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> k = (l ? <span class="number">0</span> : j); k &lt; <span class="number">10</span>; k++)</span><br><span class="line">                        f[i - <span class="number">1</span>][k][<span class="number">0</span>][l &amp;&amp; (k == <span class="number">0</span>)] += f[i][j][<span class="number">0</span>][l];</span><br><span class="line">                <span class="keyword">if</span> (f[i][j][<span class="number">1</span>][l]) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (a[i - <span class="number">1</span>] &gt;= j)</span><br><span class="line">                        f[i - <span class="number">1</span>][a[i - <span class="number">1</span>]][<span class="number">1</span>][l &amp;&amp; (a[i - <span class="number">1</span>] == <span class="number">0</span>)] = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> k = j; k &lt; a[i - <span class="number">1</span>]; k++)</span><br><span class="line">                        f[i - <span class="number">1</span>][k][<span class="number">0</span>][l &amp;&amp; (k == <span class="number">0</span>)] += f[i][j][<span class="number">1</span>][l];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; j++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">2</span>; k++)</span><br><span class="line">                ans += f[<span class="number">1</span>][i][j][k];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(f, <span class="number">0</span>, <span class="built_in">sizeof</span>(f));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; a[a[<span class="number">0</span>]]; j++) f[a[<span class="number">0</span>]][j][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    f[a[<span class="number">0</span>]][a[a[<span class="number">0</span>]]][<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    f[a[<span class="number">0</span>]][<span class="number">0</span>][<span class="number">0</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = a[<span class="number">0</span>]; i &gt; <span class="number">1</span>; i--)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) </span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> l = <span class="number">0</span>; l &lt; <span class="number">2</span>; l++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (f[i][j][<span class="number">0</span>][l])</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> k = (l ? <span class="number">9</span> : j); k &gt;= <span class="number">0</span>; k--)</span><br><span class="line">                        f[i - <span class="number">1</span>][k][<span class="number">0</span>][l &amp;&amp; (k == <span class="number">0</span>)] += f[i][j][<span class="number">0</span>][l];</span><br><span class="line">                <span class="keyword">if</span> (f[i][j][<span class="number">1</span>][l]) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (a[i - <span class="number">1</span>] &lt;= j)</span><br><span class="line">                        f[i - <span class="number">1</span>][a[i - <span class="number">1</span>]][<span class="number">1</span>][l &amp;&amp; (a[i - <span class="number">1</span>] == <span class="number">0</span>)] = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="built_in">min</span>(j, a[i - <span class="number">1</span>] - <span class="number">1</span>); k &gt;= <span class="number">0</span>; k--)</span><br><span class="line">                        f[i - <span class="number">1</span>][k][<span class="number">0</span>][l &amp;&amp; (k == <span class="number">0</span>)] += f[i][j][<span class="number">1</span>][l];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="keyword">if</span> (a[<span class="number">0</span>] &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; j++)</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">2</span>; k++)</span><br><span class="line">                    ans += f[<span class="number">1</span>][i][j][k];</span><br><span class="line">        ans -= <span class="number">9ll</span> * (a[<span class="number">0</span>] - <span class="number">1</span>) + <span class="number">1</span>; <span class="comment">// 减去重复的 0 和 111 222 333 这种东西 </span></span><br><span class="line">        <span class="type">int</span> dx = a[a[<span class="number">0</span>]];</span><br><span class="line">        LL gg = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= a[<span class="number">0</span>]; i++)</span><br><span class="line">            gg = gg * <span class="number">10</span> + dx;</span><br><span class="line">        dx -= (gg &gt; x);</span><br><span class="line">        ans -= dx;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        LL le, ri;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>, &amp;le, &amp;ri);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">solve</span>(ri) - <span class="built_in">solve</span>(le - <span class="number">1</span>));</span><br><span class="line">    &#125;<span class="comment">/* </span></span><br><span class="line"><span class="comment">while (1) &#123;</span></span><br><span class="line"><span class="comment">    int x;</span></span><br><span class="line"><span class="comment">       scanf(&quot;%d&quot;, &amp;x);</span></span><br><span class="line"><span class="comment">       printf(&quot;%lld\n&quot;, solve((LL)x));</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="v">V</h3><p>插板法看一下<spanclass="math inline">\(f(n)\)</span>最多的取值也就<spanclass="math inline">\(10^6\)</span>级别的</p><p>果断枚举<span class="math inline">\(f(n)\)</span></p><p>T了一发, 不知道为啥再交了一遍就好了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (4000000)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> num[MAXN + <span class="number">5</span>][<span class="number">10</span>], f[MAXN + <span class="number">5</span>]; <span class="comment">// down</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i1 = <span class="number">0</span>; i1 &lt;= <span class="number">17</span>; i1++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i2 = <span class="number">0</span>; i1 + i2 &lt;= <span class="number">17</span>; i2++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i3 = <span class="number">0</span>; i1 + i2 + i3 &lt;= <span class="number">17</span>; i3++)</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> i4 = <span class="number">0</span>; i1 + i2 + i3 + i4 &lt;= <span class="number">17</span>; i4++)</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> i5 = <span class="number">0</span>; i1 + i2 + i3 + i4 + i5 &lt;= <span class="number">17</span>; i5++)</span><br><span class="line">                        <span class="keyword">for</span> (<span class="type">int</span> i6 = <span class="number">0</span>; i1 + i2 + i3 + i4 + i5 + i6 &lt;= <span class="number">17</span>; i6++)</span><br><span class="line">                            <span class="keyword">for</span> (<span class="type">int</span> i7 = <span class="number">0</span>; i1 + i2 + i3 + i4 + i5 + i6 + i7 &lt;= <span class="number">17</span>; i7++)</span><br><span class="line">                                <span class="keyword">for</span> (<span class="type">int</span> i8 = <span class="number">0</span>; i1 + i2 + i3 + i4 + i5 + i6 + i7 + i8 &lt;= <span class="number">17</span>; i8++)</span><br><span class="line">                                    <span class="keyword">for</span> (<span class="type">int</span> i9 = <span class="number">0</span>; i1 + i2 + i3 + i4 + i5 + i6 + i7 + i8 + i9 &lt;= <span class="number">17</span>; i9++) &#123;</span><br><span class="line">                                        f[++f[<span class="number">0</span>]] = i1 + <span class="number">4</span> * i2  + <span class="number">9</span> * i3 + <span class="number">16</span> * i4 + <span class="number">25</span> * i5 + <span class="number">36</span> * i6 + <span class="number">49</span> * i7 + <span class="number">64</span> * i8 + <span class="number">81</span> * i9;</span><br><span class="line">                                        num[f[<span class="number">0</span>]][<span class="number">1</span>] = i1; </span><br><span class="line">                                        num[f[<span class="number">0</span>]][<span class="number">2</span>] = i2; </span><br><span class="line">                                        num[f[<span class="number">0</span>]][<span class="number">3</span>] = i3; </span><br><span class="line">                                        num[f[<span class="number">0</span>]][<span class="number">4</span>] = i4; </span><br><span class="line">                                        num[f[<span class="number">0</span>]][<span class="number">5</span>] = i5; </span><br><span class="line">                                        num[f[<span class="number">0</span>]][<span class="number">6</span>] = i6; </span><br><span class="line">                                        num[f[<span class="number">0</span>]][<span class="number">7</span>] = i7; </span><br><span class="line">                                        num[f[<span class="number">0</span>]][<span class="number">8</span>] = i8; </span><br><span class="line">                                        num[f[<span class="number">0</span>]][<span class="number">9</span>] = i9; </span><br><span class="line">                                    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    LL k, a, b;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld&quot;</span>, &amp;k, &amp;a, &amp;b);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= f[<span class="number">0</span>]; i++) </span><br><span class="line">        <span class="keyword">if</span> (f[i] * k &lt;= b &amp;&amp; f[i] * k &gt;= a) &#123;</span><br><span class="line">            LL now = f[i] * k;</span><br><span class="line">            <span class="type">int</span> nownum[<span class="number">10</span>];</span><br><span class="line">            <span class="built_in">memset</span>(nownum, <span class="number">0</span>, <span class="built_in">sizeof</span>(nownum));</span><br><span class="line">            <span class="keyword">while</span> (now) &#123;</span><br><span class="line">                ++nownum[now % <span class="number">10</span>];</span><br><span class="line">                now /= <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">bool</span> gg = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; <span class="number">10</span>; j++)</span><br><span class="line">                <span class="keyword">if</span> (nownum[j] != num[i][j]) &#123;</span><br><span class="line">                    gg = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">if</span> (gg) ++ans;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="w">W</h3><p>W题 water题</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (200000)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string A, B, C;</span><br><span class="line">    cin &gt;&gt; A &gt;&gt; B &gt;&gt; C;</span><br><span class="line">    <span class="type">int</span> n = A.<span class="built_in">length</span>(), ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="keyword">if</span> (A[i] == B[i] &amp;&amp; B[i] != C[i]) ++ans;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (A[i] != B[i] &amp;&amp; A[i] == C[i]) ++ans;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (B[i] == C[i] &amp;&amp; A[i] != B[i]) ++ans;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (A[i] != B[i] &amp;&amp; B[i] != C[i] &amp;&amp; C[i] != A[i]) ans += <span class="number">2</span>;</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="x">X</h3><p>你要硬说他是二维偏序到也差不多...</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (200000)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXZ (600000)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(i) ((i) &amp; (-(i)))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">kard</span> &#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">3</span>];</span><br><span class="line">&#125; c[MAXN + <span class="number">5</span>], x;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">que</span> &#123;</span><br><span class="line">    <span class="type">bool</span> type;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">2</span>];</span><br><span class="line">&#125; q[(MAXN &lt;&lt; <span class="number">1</span>) + <span class="number">5</span>];</span><br><span class="line"><span class="type">int</span> n, ans, b[MAXZ + <span class="number">5</span>], z[MAXZ + <span class="number">5</span>], cntq;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp1</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> x &lt; y; &#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp2</span><span class="params">(<span class="type">const</span> kard&amp; x, <span class="type">const</span> kard&amp; y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x.a[<span class="number">0</span>] == y.a[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">return</span> ((x.a[<span class="number">1</span>] == y.a[<span class="number">1</span>]) ? (x.a[<span class="number">2</span>] &lt; y.a[<span class="number">2</span>]) : (x.a[<span class="number">1</span>] &lt; y.a[<span class="number">1</span>]));</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> x.a[<span class="number">0</span>] &lt; y.a[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp3</span><span class="params">(<span class="type">const</span> que&amp; x, <span class="type">const</span> que&amp; y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ((x.a[<span class="number">0</span>] == y.a[<span class="number">0</span>]) ? (x.a[<span class="number">1</span>] &lt; y.a[<span class="number">1</span>]) : (x.a[<span class="number">0</span>] &lt; y.a[<span class="number">0</span>]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = x; i &lt;= z[<span class="number">0</span>]; i += <span class="built_in">lowbit</span>(i))</span><br><span class="line">        ++b[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">enquiry</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> re = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = x; i; i -= <span class="built_in">lowbit</span>(i))</span><br><span class="line">        re += b[i];</span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;c[i].a[<span class="number">0</span>], &amp;c[i].a[<span class="number">1</span>], &amp;c[i].a[<span class="number">2</span>]), <span class="built_in">sort</span>(c[i].a, c[i].a + <span class="number">3</span>, cmp1),</span><br><span class="line">            z[++z[<span class="number">0</span>]] = c[i].a[<span class="number">0</span>], z[++z[<span class="number">0</span>]] = c[i].a[<span class="number">1</span>], z[++z[<span class="number">0</span>]] = c[i].a[<span class="number">2</span>];</span><br><span class="line">    <span class="built_in">sort</span>(z + <span class="number">1</span>, z + z[<span class="number">0</span>] + <span class="number">1</span>);</span><br><span class="line">    z[<span class="number">0</span>] = <span class="built_in">unique</span>(z + <span class="number">1</span>, z + z[<span class="number">0</span>] + <span class="number">1</span>) - z - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        ++cntq;</span><br><span class="line">        q[cntq].a[<span class="number">0</span>] = <span class="built_in">lower_bound</span>(z + <span class="number">1</span>, z + z[<span class="number">0</span>] + <span class="number">1</span>, c[i].a[<span class="number">0</span>]) - z;</span><br><span class="line">        q[cntq].a[<span class="number">1</span>] = <span class="built_in">lower_bound</span>(z + <span class="number">1</span>, z + z[<span class="number">0</span>] + <span class="number">1</span>, c[i].a[<span class="number">1</span>]) - z;</span><br><span class="line">        q[cntq].type = <span class="literal">false</span>;</span><br><span class="line">        ++cntq;</span><br><span class="line">        q[cntq].a[<span class="number">0</span>] = <span class="built_in">lower_bound</span>(z + <span class="number">1</span>, z + z[<span class="number">0</span>] + <span class="number">1</span>, c[i].a[<span class="number">1</span>]) - z;</span><br><span class="line">        q[cntq].a[<span class="number">1</span>] = <span class="built_in">lower_bound</span>(z + <span class="number">1</span>, z + z[<span class="number">0</span>] + <span class="number">1</span>, c[i].a[<span class="number">2</span>]) - z;</span><br><span class="line">        q[cntq].type = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(q + <span class="number">1</span>, q + cntq + <span class="number">1</span>, cmp3);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= cntq; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (q[i].type) ans += (<span class="built_in">enquiry</span>(q[i].a[<span class="number">1</span>]) == n);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">modify</span>(q[i].a[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="y">Y</h3><p>不会</p><h3 id="z">Z</h3><p>随便写写就好了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (200000)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n, a[MAXN + <span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%1d&quot;</span>, &amp;a[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, ai; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%1d&quot;</span>, &amp;ai), a[i] ^= ai;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">if</span> (a[i] &amp;&amp; !a[i - <span class="number">1</span>])</span><br><span class="line">            ++ans;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>By 我是傻逼的 Cansult</p>]]></content>
      
      
      <categories>
          
          <category> 水题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>比赛总结 1038 - [2020 TJUICPC] 个人赛</title>
      <link href="/posts/22363.html"/>
      <url>/posts/22363.html</url>
      
        <content type="html"><![CDATA[<p>我是傻逼</p><span id="more"></span><p><a href="../pictures/part1.pdf">题目#1</a></p><p><a href="../pictures/part2.pdf">题目#2</a></p><p>我是傻逼</p><h3 id="a">A</h3><p>签到</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (2000)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> a[MAXN][MAXN], n;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = (<span class="number">1</span> &lt;&lt; (i - <span class="number">1</span>)) + <span class="number">1</span>; j &lt;= (<span class="number">1</span> &lt;&lt; i); j++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt;= (<span class="number">1</span> &lt;&lt; (i - <span class="number">1</span>)); k++)</span><br><span class="line">                a[j][k] = a[j - (<span class="number">1</span> &lt;&lt; (i - <span class="number">1</span>))][k] ^ <span class="number">1</span>, a[k][j] = a[k][j - (<span class="number">1</span> &lt;&lt; (i - <span class="number">1</span>))] ^ <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = (<span class="number">1</span> &lt;&lt; (i - <span class="number">1</span>)) + <span class="number">1</span>; j &lt;= (<span class="number">1</span> &lt;&lt; i); j++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = (<span class="number">1</span> &lt;&lt; (i - <span class="number">1</span>)) + <span class="number">1</span>; k &lt;= (<span class="number">1</span> &lt;&lt; i); k++)</span><br><span class="line">                a[j][k] = a[j - (<span class="number">1</span> &lt;&lt; (i - <span class="number">1</span>))][k - (<span class="number">1</span> &lt;&lt; (i - <span class="number">1</span>))] ^ <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= (<span class="number">1</span> &lt;&lt; n); i++, <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>))</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= (<span class="number">1</span> &lt;&lt; n); j++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[i][j]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="b">B</h3><p>不会</p><h3 id="c">C</h3><p>以前写过</p><p>现在不会</p><p>太真实了</p><p>在本题模数<span class="math inline">\(q\)</span>下, 函数<spanclass="math inline">\(f(x) = x ^2\,\,\mathrm{Mod}\,\,q\)</span>存在不动点所以平方到一定次数后值就不会变了</p><p>或者 一般的,平方取模的操作是有循环节的(只要操作次数大于模数剩余系的大小就会出现重复)可以用<code>vector</code>保存循环节中的数,区间平方就可以转化为下标的区间加,记录好一个区间内下标集体加一时区间和的变化应该就能搞一搞...吧?</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 咕咕咕</span></span><br></pre></td></tr></table></figure><h3 id="d">D</h3><p>不知道啥叫k维空间的超级球</p><p>看样例输了个<span class="math inline">\(\sqrt k - 1\)</span></p><p>然后过了...</p><h3 id="e">E</h3><p>用<code>f[i][j]</code>表示前<code>i</code>个数,有<code>j</code>这个状态表示的质因数的最小代价</p><p>质因数最大到59就行了, 毕竟就算和2乘起来也到100多了....?</p><p>STD:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> f[<span class="number">102</span>][<span class="number">1</span> &lt;&lt; <span class="number">17</span>];</span><br><span class="line"><span class="type">int</span> n, a[<span class="number">102</span>];</span><br><span class="line"><span class="type">int</span> p[] = &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">23</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">37</span>, <span class="number">41</span>, <span class="number">43</span>, <span class="number">47</span>, <span class="number">53</span>, <span class="number">59</span>&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bit</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> z = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">17</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (x % p[i] == <span class="number">0</span>) &#123;</span><br><span class="line">            z |= <span class="number">1</span> &lt;&lt; i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="built_in">memset</span>(f, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> f);</span><br><span class="line">    f[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">59</span>; j++) &#123;</span><br><span class="line">            <span class="type">int</span> b = <span class="built_in">bit</span>(j);</span><br><span class="line">            <span class="type">int</span> ub = ((<span class="number">1</span> &lt;&lt; <span class="number">17</span>) - <span class="number">1</span>) ^ b;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = ub; ; --k &amp;= ub) &#123;</span><br><span class="line">                f[i][k | b] = <span class="built_in">min</span>(f[i][k | b], f[i - <span class="number">1</span>][k] + <span class="built_in">abs</span>(j - a[i]));</span><br><span class="line">                <span class="keyword">if</span>(k == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span> &lt;&lt; <span class="number">17</span>; i++) &#123;</span><br><span class="line">        ans = <span class="built_in">min</span>(ans, f[n][i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="f">F</h3><p>连题都没整明白</p><h3 id="g">G</h3><p>上下跑然后算贡献就完事了</p><p>调了不知道多长时间</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 点分? </span></span><br><span class="line"><span class="comment">// 维护 子树的深度和, 子树的深度的平方和, 子树大小</span></span><br><span class="line"><span class="comment">// 然后呢 链剖? 好像很合理</span></span><br><span class="line"><span class="comment">// 不用树剖</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (100000)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(i) ((i) &amp; (-(i)))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">    <span class="type">int</span> size, fa, depth;</span><br><span class="line">    LL sumsd, sumsd2;</span><br><span class="line">&#125; a[MAXN + <span class="number">5</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edg</span> &#123;</span><br><span class="line">    <span class="type">int</span> from, to, next;</span><br><span class="line">&#125; b[MAXN * <span class="number">2</span> + <span class="number">5</span>];</span><br><span class="line"><span class="type">int</span> g[MAXN + <span class="number">5</span>], cntb, n;</span><br><span class="line">LL ans[MAXN + <span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ade</span><span class="params">(<span class="type">int</span> fr, <span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">    b[++cntb] = &#123;fr, t, g[fr]&#125;;</span><br><span class="line">    g[fr] = cntb;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> now)</span> </span>&#123;</span><br><span class="line">    a[now].size = <span class="number">1</span>;</span><br><span class="line">    a[now].sumsd = a[now].depth;</span><br><span class="line">    a[now].sumsd2 = (LL)a[now].depth * a[now].depth;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = g[now]; i; i = b[i].next)</span><br><span class="line">        <span class="keyword">if</span> (b[i].to != a[now].fa) &#123;</span><br><span class="line">            a[b[i].to].fa = now;</span><br><span class="line">            a[b[i].to].depth = a[now].depth + <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">init</span>(b[i].to);</span><br><span class="line">            a[now].size += a[b[i].to].size;</span><br><span class="line">            a[now].sumsd += a[b[i].to].sumsd;</span><br><span class="line">            a[now].sumsd2 += a[b[i].to].sumsd2;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> now, LL nows, LL nowf)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (now != <span class="number">1</span>) &#123;</span><br><span class="line">        nows = a[now].sumsd - (a[now].depth - <span class="number">2</span>) * a[now].size;</span><br><span class="line">        nowf += a[a[now].fa].sumsd - a[now].sumsd - (a[a[now].fa].depth - <span class="number">1</span>) * (a[a[now].fa].size - a[now].size) + n - a[a[now].fa].size;</span><br><span class="line">        ans[now] = ans[a[now].fa] + a[now].size - <span class="number">2</span> * nows + a[<span class="number">1</span>].size - a[now].size + <span class="number">2</span> * nowf;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = g[now]; i; i = b[i].next)</span><br><span class="line">        <span class="keyword">if</span> (b[i].to != a[now].fa)</span><br><span class="line">            <span class="built_in">dfs</span>(b[i].to, nows, nowf);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, xi, yi; i &lt; n; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;xi, &amp;yi), <span class="built_in">ade</span>(xi + <span class="number">1</span>, yi + <span class="number">1</span>), <span class="built_in">ade</span>(yi + <span class="number">1</span>, xi + <span class="number">1</span>);</span><br><span class="line">    a[<span class="number">1</span>].depth = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">init</span>(<span class="number">1</span>);</span><br><span class="line">    ans[<span class="number">1</span>] = a[<span class="number">1</span>].sumsd2;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>, a[<span class="number">1</span>].sumsd, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>By 操他妈我是傻逼的 Cansult</p>]]></content>
      
      
      <categories>
          
          <category> 比赛总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 清奇脑回路 </tag>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>水题笔记 康复训练的板子 [模板]</title>
      <link href="/posts/6125.html"/>
      <url>/posts/6125.html</url>
      
        <content type="html"><![CDATA[<p>草 大学太难了 我想回高中</p><p><del>我为什么不好好学OI</del></p><span id="more"></span><p>已经不会写代码了 进行康复训练</p><h3 id="线段树"><ahref="https://www.luogu.com.cn/problem/P3372">线段树</a></h3><p>还算顺手</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (100000 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LS(x) ((x) &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RS(x) (((x) &lt;&lt; 1) | 1)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">    <span class="type">int</span> le, ri, lazy;</span><br><span class="line">    LL zh;</span><br><span class="line">&#125; tree[MAXN &lt;&lt; <span class="number">3</span>];</span><br><span class="line"><span class="type">int</span> a[MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> now, <span class="type">int</span> le, <span class="type">int</span> ri)</span> </span>&#123;</span><br><span class="line">    tree[now].le = le, tree[now].ri = ri;</span><br><span class="line">    <span class="keyword">if</span> (le == ri) &#123;</span><br><span class="line">        tree[now].zh = a[le];</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mi = (le + ri) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(<span class="built_in">LS</span>(now), le, mi), <span class="built_in">build</span>(<span class="built_in">RS</span>(now), mi + <span class="number">1</span>, ri);</span><br><span class="line">    tree[now].zh = tree[<span class="built_in">LS</span>(now)].zh + tree[<span class="built_in">RS</span>(now)].zh;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_down</span><span class="params">(<span class="type">int</span> now)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span>&amp; zh = tree[now].lazy;</span><br><span class="line">    tree[<span class="built_in">LS</span>(now)].lazy += zh, tree[<span class="built_in">RS</span>(now)].lazy += zh;</span><br><span class="line">    tree[<span class="built_in">LS</span>(now)].zh += (LL)(tree[<span class="built_in">LS</span>(now)].ri - tree[<span class="built_in">LS</span>(now)].le + <span class="number">1</span>) * zh;</span><br><span class="line">    tree[<span class="built_in">RS</span>(now)].zh += (LL)(tree[<span class="built_in">RS</span>(now)].ri - tree[<span class="built_in">RS</span>(now)].le + <span class="number">1</span>) * zh;</span><br><span class="line">    zh = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">adjust</span><span class="params">(<span class="type">int</span> now, <span class="type">int</span> tle, <span class="type">int</span> tri, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">    tree[now].zh += (LL)(tri - tle + <span class="number">1</span>) * k;</span><br><span class="line">    <span class="built_in">push_down</span>(now);</span><br><span class="line">    <span class="keyword">if</span> (tree[now].le == tle &amp;&amp; tree[now].ri == tri) &#123;</span><br><span class="line">        tree[now].lazy += k;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mi = (tree[now].le + tree[now].ri) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (tri &lt;= mi)    <span class="built_in">adjust</span>(<span class="built_in">LS</span>(now), tle, tri, k);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (tle &gt; mi)  <span class="built_in">adjust</span>(<span class="built_in">RS</span>(now), tle, tri, k);</span><br><span class="line">    <span class="keyword">else</span>    <span class="built_in">adjust</span>(<span class="built_in">LS</span>(now), tle, mi, k), <span class="built_in">adjust</span>(<span class="built_in">RS</span>(now), mi + <span class="number">1</span>, tri, k);</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">enquiry</span><span class="params">(<span class="type">int</span> now, <span class="type">int</span> le, <span class="type">int</span> ri)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tree[now].le == le &amp;&amp; tree[now].ri == ri)</span><br><span class="line">        <span class="keyword">return</span> tree[now].zh;</span><br><span class="line">    <span class="built_in">push_down</span>(now);</span><br><span class="line">    <span class="type">int</span> mi = (tree[now].le + tree[now].ri) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (ri &lt;= mi)    <span class="keyword">return</span> <span class="built_in">enquiry</span>(<span class="built_in">LS</span>(now), le, ri);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (le &gt; mi) <span class="keyword">return</span> <span class="built_in">enquiry</span>(<span class="built_in">RS</span>(now), le, ri);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">enquiry</span>(<span class="built_in">LS</span>(now), le, mi) + <span class="built_in">enquiry</span>(<span class="built_in">RS</span>(now), mi + <span class="number">1</span>, ri);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, a, b, c, d; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line">        <span class="keyword">if</span> (a == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;d);</span><br><span class="line">            <span class="built_in">adjust</span>(<span class="number">1</span>, b, c, d);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">enquiry</span>(<span class="number">1</span>, b, c));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="快速幂"><ahref="https://www.luogu.com.cn/problem/P1226">快速幂</a></h3><p>别忘了在指数为<span class="math inline">\(0\)</span>或<spanclass="math inline">\(1\)</span>的时候模个<spanclass="math inline">\(p\)</span></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">LL p, num;</span><br><span class="line"><span class="function">LL <span class="title">fastpow</span><span class="params">(<span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (k == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span> % p;</span><br><span class="line">    <span class="keyword">if</span> (k == <span class="number">1</span>) <span class="keyword">return</span> num % p;</span><br><span class="line">    LL re = <span class="built_in">fastpow</span>(k &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    re = (re * re) % p;</span><br><span class="line">    <span class="keyword">if</span> (k &amp; <span class="number">1</span>) re = (re * num) % p;</span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> k;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld%d%lld&quot;</span>, &amp;num, &amp;k, &amp;p);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld^%d mod %lld=%lld&quot;</span>, num, k, p, <span class="built_in">fastpow</span>(k));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="并查集"><ahref="https://www.luogu.com.cn/problem/P3367">并查集</a></h3><p>居然一遍过了真是感动</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (10000)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> swap(x, y) &#123; int t = x; x = y; y = t; &#125;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">    <span class="type">int</span> fa, size;</span><br><span class="line">&#125; a[MAXN + <span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; <span class="keyword">return</span> ((a[x].fa == x) ? x : (a[x].fa = <span class="built_in">find</span>(a[x].fa))); &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    x = <span class="built_in">find</span>(x), y = <span class="built_in">find</span>(y);</span><br><span class="line">    <span class="keyword">if</span> (a[x].size &lt; a[y].size) <span class="built_in">swap</span>(x, y);</span><br><span class="line">    a[y].fa = x, a[x].size += a[y].size;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        a[i].fa = i, a[i].size = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, x, y, z; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;z, &amp;x, &amp;y);</span><br><span class="line">        <span class="keyword">if</span> (z &amp; <span class="number">1</span>) <span class="built_in">merge</span>(x, y);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="built_in">find</span>(x) == <span class="built_in">find</span>(y) ? <span class="string">&quot;Y&quot;</span> : <span class="string">&quot;N&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最短路"><ahref="https://www.luogu.com.cn/problem/P3371">最短路</a></h3><p>感觉<code>priority_queue</code>自己的优先级比较诡异,最好自己写<code>cmp</code>然后就是<code>memest</code>里的<code>0x7f</code>和直接赋值的<code>0x7fffffff</code>好像并不是一回事,有空瞅两眼</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF (2147483647)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (10000)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXM (500000)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span> &#123;</span><br><span class="line">    <span class="type">int</span> x, y, cost, next;</span><br><span class="line">&#125; e[MAXM + <span class="number">5</span>];</span><br><span class="line"><span class="type">int</span> n, m, g[MAXN + <span class="number">5</span>], cnte, dis[MAXN + <span class="number">5</span>], s;</span><br><span class="line"><span class="type">bool</span> vis[MAXN + <span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">adde</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> c)</span> </span>&#123;</span><br><span class="line">    ++cnte;</span><br><span class="line">    e[cnte].x = x, e[cnte].y = y, e[cnte].cost = c, e[cnte].next = g[x];</span><br><span class="line">    g[x] = cnte;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dijk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    dis[s] = <span class="number">0</span>;</span><br><span class="line">    priority_queue&lt;pii, vector&lt;pii&gt;, greater&lt;pii&gt; &gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(<span class="number">0</span>, s));</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="type">int</span> nown = q.<span class="built_in">top</span>().second;</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (vis[nown]) <span class="keyword">continue</span>;</span><br><span class="line">        vis[nown] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = g[nown]; i; i = e[i].next)</span><br><span class="line">            <span class="keyword">if</span> (dis[e[i].y] &gt; dis[nown] + e[i].cost)</span><br><span class="line">                q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(dis[e[i].y] = dis[nown] + e[i].cost, e[i].y));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;s);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) dis[i] = INF;</span><br><span class="line">    <span class="built_in">memset</span>(vis, <span class="literal">false</span>, <span class="built_in">sizeof</span>(vis));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, x, y, c; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;x, &amp;y, &amp;c);</span><br><span class="line">        <span class="built_in">adde</span>(x, y, c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dijk</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, dis[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线性筛"><ahref="https://www.luogu.com.cn/problem/P3383">线性筛</a></h3><p>一开始写成埃氏筛了... 重点看注释</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (100000000)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXP (100000)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">bool</span> isp[MAXN + <span class="number">5</span>];</span><br><span class="line"><span class="type">int</span> prim[MAXP + <span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n, q;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;q);</span><br><span class="line">    <span class="built_in">memset</span>(isp, <span class="literal">true</span>, <span class="built_in">sizeof</span>(isp));</span><br><span class="line">    isp[<span class="number">1</span>] = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isp[i])</span><br><span class="line">            prim[++prim[<span class="number">0</span>]] = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= prim[<span class="number">0</span>] &amp;&amp; (LL)i * prim[j] &lt;= n; j++) &#123;</span><br><span class="line">            isp[i * prim[j]] = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (i % prim[j] == <span class="number">0</span>) <span class="keyword">break</span>; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, k; i &lt;= q; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;k);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, prim[k]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最小生成树"><ahref="https://www.luogu.com.cn/problem/P3366">最小生成树</a></h3><p>开始数组开小了 <code>= =</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (5000)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXM (200000)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span> &#123;</span><br><span class="line">    <span class="type">int</span> from, to, cost;</span><br><span class="line">&#125; b[MAXM + <span class="number">5</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">    <span class="type">int</span> size, fa;</span><br><span class="line">&#125; a[MAXN + <span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; <span class="keyword">return</span> (a[x].fa == x) ? x : (a[x].fa = <span class="built_in">find</span>(a[x].fa)); &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> fx = <span class="built_in">find</span>(x), fy = <span class="built_in">find</span>(y);</span><br><span class="line">    <span class="keyword">if</span> (a[fx].size &gt; a[fy].size)</span><br><span class="line">        a[fx].size += a[fy].size, a[fy].fa = fx;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        a[fy].size += a[fx].size, a[fx].fa = fy;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(edge&amp; x, edge&amp; y)</span> </span>&#123; <span class="keyword">return</span> x.cost &lt; y.cost; &#125;</span><br><span class="line"><span class="type">int</span> n, m, ans;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) a[i].fa = i, a[i].size = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;b[i].from, &amp;b[i].to, &amp;b[i].cost);</span><br><span class="line">    <span class="built_in">sort</span>(b + <span class="number">1</span>, b + m + <span class="number">1</span>, cmp);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, cnte = <span class="number">0</span>; i &lt;= m; i++)</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">find</span>(b[i].from) != <span class="built_in">find</span>(b[i].to)) &#123;</span><br><span class="line">            ans += b[i].cost, ++cnte;</span><br><span class="line">            <span class="built_in">merge</span>(b[i].from, b[i].to);</span><br><span class="line">            <span class="keyword">if</span> (cnte == n - <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">if</span> (a[<span class="built_in">find</span>(<span class="number">1</span>)].size != n) <span class="built_in">puts</span>(<span class="string">&quot;orz&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="字符串哈希"><ahref="https://www.luogu.com.cn/problem/P3370">字符串哈希</a></h3><p>日他妈 什么模数都赶不上他妈的自然溢出 绝了</p><p>注意利用<code>sort</code>和<code>unique</code>来找种类数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ULL unsigned long long </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXS 1500</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 10000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">ULL hsa[MAXN + <span class="number">5</span>];</span><br><span class="line"><span class="type">int</span> ans;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n, sn;</span><br><span class="line">    <span class="type">char</span> nows[MAXS + <span class="number">5</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, nows);</span><br><span class="line">        sn = <span class="built_in">strlen</span>(nows);</span><br><span class="line">        ULL nowi = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= sn; j++) &#123;</span><br><span class="line">            nowi = nowi * <span class="number">62</span>;</span><br><span class="line">            <span class="keyword">if</span> (nows[j] &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; nows[j] &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">                nowi += nows[j] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (nows[j] &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; nows[j] &lt;= <span class="string">&#x27;z&#x27;</span>)</span><br><span class="line">                nowi += nows[j] - <span class="string">&#x27;a&#x27;</span> + <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                nowi += nows[j] - <span class="string">&#x27;A&#x27;</span> + <span class="number">36</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        hsa[++hsa[<span class="number">0</span>]] = nowi;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(hsa, hsa + n + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, <span class="built_in">unique</span>(hsa, hsa + n + <span class="number">1</span>) - hsa - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单调队列"><ahref="https://www.luogu.com.cn/problem/P1886">单调队列</a></h3><p>数组开小了一次, 感觉还不错</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (1000000)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF (0x7fffffff)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n, k, a[MAXN + <span class="number">5</span>], head1, tail1, head2, tail2;</span><br><span class="line">pii q1[MAXN + <span class="number">5</span>], q2[MAXN + <span class="number">5</span>], ans[MAXN + <span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(pii x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (tail1 &gt;= head1 &amp;&amp; x.first &lt; q1[tail1].first)</span><br><span class="line">        --tail1;</span><br><span class="line">    q1[++tail1] = x;</span><br><span class="line">    <span class="keyword">while</span> (tail2 &gt;= head2 &amp;&amp; x.first &gt; q2[tail2].first)</span><br><span class="line">        --tail2;</span><br><span class="line">    q2[++tail2] = x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (q1[head1].second &lt;= x - k) ++head1;</span><br><span class="line">    <span class="keyword">while</span> (q2[head2].second &lt;= x - k) ++head2;</span><br><span class="line">    ans[x] = <span class="built_in">make_pair</span>(q1[head1].first, q2[head2].first);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;k);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">push</span>(<span class="built_in">make_pair</span>(a[i], i)), <span class="built_in">query</span>(i);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = k; i &lt;= n; i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, ans[i].first);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = k; i &lt;= n; i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, ans[i].second);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="lca"><ahref="https://www.luogu.com.cn/problem/P3379">LCA</a></h3><p>差点不会树剖了<code>= =</code></p><p>注意跳重链的时候比较的是跳之后的深度</p><p><del>还有别忘了轻儿子的<code>top</code>是他自己(真的会有人忘了吗</del></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (500000)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">    <span class="type">int</span> fa, top, size, hs, deep;</span><br><span class="line">&#125; a[MAXN + <span class="number">5</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edg</span> &#123;</span><br><span class="line">    <span class="type">int</span> from, to, next;</span><br><span class="line">&#125; b[(MAXN &lt;&lt; <span class="number">1</span>) + <span class="number">5</span>];</span><br><span class="line"><span class="type">int</span> root, n, g[MAXN + <span class="number">5</span>], cntb, q;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ade</span><span class="params">(<span class="type">int</span> fr, <span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">    b[++cntb] = &#123;fr, t, g[fr]&#125;;</span><br><span class="line">    g[fr] = cntb;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> now)</span> </span>&#123;</span><br><span class="line">    a[now].size = <span class="number">1</span>, a[now].deep = a[a[now].fa].deep + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = g[now]; i; i = b[i].next)</span><br><span class="line">        <span class="keyword">if</span> (b[i].to != a[now].fa) &#123;</span><br><span class="line">            a[b[i].to].fa = now;</span><br><span class="line">            <span class="built_in">init</span>(b[i].to);</span><br><span class="line">            <span class="keyword">if</span> (a[b[i].to].size &gt; a[a[now].hs].size) a[now].hs = b[i].to;</span><br><span class="line">            a[now].size += a[b[i].to].size;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> now)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a[now].hs) a[a[now].hs].top = a[now].top, <span class="built_in">dfs</span>(a[now].hs);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = g[now]; i; i = b[i].next)</span><br><span class="line">        <span class="keyword">if</span> (b[i].to != a[now].fa &amp;&amp; b[i].to != a[now].hs)</span><br><span class="line">            a[b[i].to].top = b[i].to, <span class="built_in">dfs</span>(b[i].to);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (a[x].top != a[y].top) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[a[x].top].deep &lt; a[a[y].top].deep) <span class="built_in">swap</span>(x, y);</span><br><span class="line">        x = a[a[x].top].fa;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a[x].deep &gt; a[y].deep) <span class="built_in">swap</span>(x, y);</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;q, &amp;root);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, x, y; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">        <span class="built_in">ade</span>(x, y), <span class="built_in">ade</span>(y, x);</span><br><span class="line">    &#125;</span><br><span class="line">    a[root].top = a[root].fa = root;</span><br><span class="line">    <span class="built_in">init</span>(root), <span class="built_in">dfs</span>(root);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, x, y; i &lt;= q; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">lca</span>(x, y));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最小费用最大流"><ahref="https://www.luogu.com.cn/problem/P3381">最小费用最大流</a></h3><p>妈的这比dinic不知道好写到哪里去了</p><p>好像常数略大 不开氧气过不去很蛋疼</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (5000)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXM (50000)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF (0x7fffffff)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rev(i) ((((i) - 1) ^ 1) + 1)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edg</span> &#123;</span><br><span class="line">    <span class="type">int</span> from, to, cost, flow, cap, next;</span><br><span class="line">&#125; b[(MAXM &lt;&lt; <span class="number">1</span>) + <span class="number">5</span>];</span><br><span class="line"><span class="type">int</span> g[MAXN + <span class="number">5</span>], cntb, n, m, pre[MAXN], s, t, ansf, ansc;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ade</span><span class="params">(<span class="type">int</span> fr, <span class="type">int</span> t, <span class="type">int</span> ca, <span class="type">int</span> co)</span> </span>&#123;</span><br><span class="line">    b[++cntb] = &#123;fr, t, co, <span class="number">0</span>, ca, g[fr]&#125;;</span><br><span class="line">    g[fr] = cntb;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">spfa</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    <span class="type">int</span> dis[MAXN + <span class="number">5</span>], a[MAXN + <span class="number">5</span>];</span><br><span class="line">    <span class="type">bool</span> inq[MAXN + <span class="number">5</span>];</span><br><span class="line">    <span class="built_in">memset</span>(dis, <span class="number">0x7f</span>, <span class="built_in">sizeof</span>(dis));</span><br><span class="line">    <span class="built_in">memset</span>(inq, <span class="literal">false</span>, <span class="built_in">sizeof</span>(inq));</span><br><span class="line">    <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="built_in">sizeof</span>(a));</span><br><span class="line">    a[s] = INF, dis[s] = <span class="number">0</span>;</span><br><span class="line">    q.<span class="built_in">push</span>(s);</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="type">int</span> now = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        inq[now] = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = g[now]; i; i = b[i].next)</span><br><span class="line">            <span class="keyword">if</span> (b[i].flow &lt; b[i].cap &amp;&amp; dis[b[i].to] &gt; dis[now] + b[i].cost) &#123;</span><br><span class="line">                dis[b[i].to] = dis[now] + b[i].cost;</span><br><span class="line">                pre[b[i].to] = i;</span><br><span class="line">                a[b[i].to] = <span class="built_in">min</span>(a[now], b[i].cap - b[i].flow);</span><br><span class="line">                <span class="keyword">if</span> (!inq[b[i].to]) inq[b[i].to] = <span class="literal">true</span>, q.<span class="built_in">push</span>(b[i].to);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a[t];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> nans;</span><br><span class="line">    <span class="keyword">while</span> (nans = <span class="built_in">spfa</span>()) &#123;</span><br><span class="line">        ansf += nans;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = t; i != s; i = b[pre[i]].from)</span><br><span class="line">            b[pre[i]].flow += nans, b[<span class="built_in">rev</span>(pre[i])].flow -= nans, ansc += nans * b[pre[i]].cost;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;s, &amp;t);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, ui, vi, wi, fi; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>, &amp;ui, &amp;vi, &amp;wi, &amp;fi);</span><br><span class="line">        <span class="built_in">ade</span>(ui, vi, wi, fi);</span><br><span class="line">        <span class="built_in">ade</span>(vi, ui, <span class="number">0</span>, -fi);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">solve</span>();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d&quot;</span>, ansf, ansc);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最大流"><ahref="https://www.luogu.com.cn/problem/P3376">最大流</a></h3><p>忘写了一些东西 当前弧优化实属op</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (200)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXM (5000)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF (2139062143)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rev(i) ((((i) - 1) ^ 1) + 1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edg</span> &#123;</span><br><span class="line">    <span class="type">int</span> from, to, next, cap, flow;</span><br><span class="line">&#125; b[(MAXM &lt;&lt; <span class="number">1</span>) + <span class="number">5</span>];</span><br><span class="line"><span class="type">int</span> g[MAXN + <span class="number">5</span>], cntb, n, m, s, t, dis[MAXN + <span class="number">5</span>], cur[MAXN + <span class="number">5</span>];</span><br><span class="line">LL ans;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ade</span><span class="params">(<span class="type">int</span> fr, <span class="type">int</span> tr, <span class="type">int</span> ca)</span> </span>&#123;</span><br><span class="line">    b[++cntb] = &#123;fr, tr, g[fr], ca, <span class="number">0</span>&#125;;</span><br><span class="line">    g[fr] = cntb;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) cur[i] = g[i];</span><br><span class="line">    <span class="built_in">memset</span>(dis, <span class="number">0</span>, <span class="built_in">sizeof</span>(dis));</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(s);</span><br><span class="line">    dis[s] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="type">int</span> now = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = g[now]; i; i = b[i].next)</span><br><span class="line">            <span class="keyword">if</span> (b[i].cap &gt; b[i].flow &amp;&amp; !dis[b[i].to])</span><br><span class="line">                dis[b[i].to] = dis[now] + <span class="number">1</span>, q.<span class="built_in">push</span>(b[i].to);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dis[t];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">dinic</span><span class="params">(<span class="type">int</span> now, <span class="type">int</span> maxf)</span> </span>&#123;</span><br><span class="line">    LL re = <span class="number">0</span>, zl;</span><br><span class="line">    <span class="keyword">if</span> (now == t || !maxf) <span class="keyword">return</span> maxf;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = cur[now]; i; i = b[i].next)</span><br><span class="line">        <span class="keyword">if</span> (b[i].cap &gt; b[i].flow &amp;&amp; dis[b[i].to] == dis[now] + <span class="number">1</span>) &#123;</span><br><span class="line">            cur[now] = i;</span><br><span class="line">            zl = <span class="built_in">dinic</span>(b[i].to, <span class="built_in">min</span>(maxf, b[i].cap - b[i].flow));</span><br><span class="line">            maxf -= zl; </span><br><span class="line">            b[i].flow += zl;</span><br><span class="line">            b[<span class="built_in">rev</span>(i)].flow -= zl;</span><br><span class="line">            re += zl;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">bfs</span>())</span><br><span class="line">        ans += <span class="built_in">dinic</span>(s, INF);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;s, &amp;t);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, ui, vi, wi; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;ui, &amp;vi, &amp;wi);</span><br><span class="line">        <span class="built_in">ade</span>(ui, vi, wi), <span class="built_in">ade</span>(vi, ui, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">solve</span>();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="缩点"><ahref="https://www.luogu.com.cn/problem/P3387">缩点</a></h3><p>妈的把<code>i</code>和<code>j</code>搞混了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (10000)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXM (100000)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edg</span> &#123;</span><br><span class="line">    <span class="type">int</span> from, to, next;</span><br><span class="line">&#125; b[MAXM + <span class="number">5</span>], nb[MAXM + <span class="number">5</span>];</span><br><span class="line"><span class="type">int</span> g[MAXN + <span class="number">5</span>], ng[MAXN + <span class="number">5</span>], n, m, cntb, ncntb, belong[MAXN + <span class="number">5</span>], f[MAXN + <span class="number">5</span>], dfn[MAXN + <span class="number">5</span>], low[MAXN + <span class="number">5</span>], cntdfn, a[MAXN + <span class="number">5</span>], </span><br><span class="line">    na[MAXN + <span class="number">5</span>];</span><br><span class="line"><span class="type">bool</span> ins[MAXN + <span class="number">5</span>];</span><br><span class="line">stack&lt;<span class="type">int</span>&gt; gary;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ade</span><span class="params">(<span class="type">int</span>* dg, edg* db, <span class="type">int</span>&amp;dcntb, <span class="type">int</span> fr, <span class="type">int</span> tr)</span> </span>&#123;</span><br><span class="line">    db[++dcntb] = &#123;fr, tr, dg[fr]&#125;;</span><br><span class="line">    dg[fr] = dcntb;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">tarjan</span><span class="params">(<span class="type">int</span> now)</span> </span>&#123;</span><br><span class="line">    belong[now] = now;</span><br><span class="line">    low[now] = dfn[now] = ++cntdfn;</span><br><span class="line">    ins[now] = <span class="literal">true</span>;</span><br><span class="line">    gary.<span class="built_in">push</span>(now);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = g[now]; i; i = b[i].next)</span><br><span class="line">        <span class="keyword">if</span> (ins[b[i].to])</span><br><span class="line">            low[now] = <span class="built_in">min</span>(low[now], dfn[b[i].to]);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!dfn[b[i].to])</span><br><span class="line">            <span class="built_in">tarjan</span>(b[i].to), low[now] = <span class="built_in">min</span>(low[now], low[b[i].to]);</span><br><span class="line">    <span class="keyword">if</span> (low[now] == dfn[now]) &#123;</span><br><span class="line">        <span class="keyword">while</span> (gary.<span class="built_in">top</span>() != now) &#123;</span><br><span class="line">            ins[gary.<span class="built_in">top</span>()] = <span class="literal">false</span>;</span><br><span class="line">            belong[gary.<span class="built_in">top</span>()] = now;</span><br><span class="line">            gary.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        gary.<span class="built_in">pop</span>();</span><br><span class="line">        ins[now] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> now)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (f[now] &gt;= <span class="number">0</span>) <span class="keyword">return</span> f[now];</span><br><span class="line">    f[now] = na[now]; </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = ng[now]; i; i = nb[i].next)</span><br><span class="line">        f[now] = <span class="built_in">max</span>(f[now], na[now] + <span class="built_in">dfs</span>(nb[i].to));</span><br><span class="line">    <span class="keyword">return</span> f[now];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">if</span> (!dfn[i])</span><br><span class="line">            <span class="built_in">tarjan</span>(i);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        na[belong[i]] += a[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = g[i]; j; j = b[j].next)</span><br><span class="line">            <span class="keyword">if</span> (belong[b[j].to] != belong[b[j].from])</span><br><span class="line">                <span class="built_in">ade</span>(ng, nb, ncntb, belong[b[j].from], belong[b[j].to]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(f, <span class="number">-1</span>, <span class="built_in">sizeof</span>(f));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">if</span> (f[belong[i]] == <span class="number">-1</span>)</span><br><span class="line">            <span class="built_in">dfs</span>(belong[i]);</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, f[belong[i]]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, ui, vi; i &lt;= m; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;ui, &amp;vi), <span class="built_in">ade</span>(g, b, cntb, ui, vi);</span><br><span class="line">    <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="nim"><ahref="https://www.luogu.com.cn/problem/P2197">Nim</a></h3><p>想在洛谷上刷通过数的是不是多多少少都有点...?</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="type">int</span> n, ans = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, ai; i &lt;= n; i++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;ai), ans ^= ai;</span><br><span class="line">        <span class="built_in">puts</span>(ans ? <span class="string">&quot;Yes&quot;</span> : <span class="string">&quot;No&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="负权多源最短路"><ahref="https://www.luogu.com.cn/problem/P5905">负权多源最短路</a></h3><p>这题有点意思把每条边的边权变为<code>b[i].cost - dis[0][b[i].from] + dis[0][b[i].to]</code>这样以来在求最短路的时候中间部分能全部消掉,而用Bellman-ford预处理的时候已经保证了<code>dis[0][b[i].from] + cost &gt;= dis[0][b[i].to]]</code>(不然就松弛了)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (3000)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXM (6000)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF (1000000000)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edg</span> &#123;</span><br><span class="line">    <span class="type">int</span> from, to, cost, next;</span><br><span class="line">&#125; b[MAXM + MAXN + <span class="number">5</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">cmp</span> &#123;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">operator</span> <span class="params">()</span> <span class="params">(<span class="type">const</span> pii x, <span class="type">const</span> pii y)</span> </span>&#123; <span class="keyword">return</span> x.second &gt; y.second; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> g[MAXN + <span class="number">5</span>], cntb, n, m, hdis[MAXN + <span class="number">5</span>], dis[MAXN + <span class="number">5</span>];</span><br><span class="line"><span class="type">bool</span> vis[MAXN + <span class="number">5</span>];</span><br><span class="line">LL ans;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ade</span><span class="params">(<span class="type">int</span> fr, <span class="type">int</span> tr, <span class="type">int</span> cr)</span> </span>&#123;</span><br><span class="line">    b[++cntb] = &#123;fr, tr, cr, g[fr]&#125;;</span><br><span class="line">    g[fr] = cntb;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">bellmanFord</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">ade</span>(<span class="number">0</span>, i, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">memset</span>(hdis, <span class="number">0x7f</span>, <span class="built_in">sizeof</span>(hdis));</span><br><span class="line">    hdis[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= cntb; j++)</span><br><span class="line">            <span class="keyword">if</span> (hdis[b[j].from] &lt; INF)</span><br><span class="line">                hdis[b[j].to] = <span class="built_in">min</span>(hdis[b[j].to], hdis[b[j].from] + b[j].cost);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= cntb; i++)</span><br><span class="line">        <span class="keyword">if</span> (hdis[b[i].to] &gt; hdis[b[i].from] + b[i].cost)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dijk</span><span class="params">(<span class="type">int</span> s)</span> </span>&#123;</span><br><span class="line">    priority_queue&lt;pii, vector&lt;pii&gt;, cmp&gt; q;</span><br><span class="line">    <span class="built_in">memset</span>(vis, <span class="literal">false</span>, <span class="built_in">sizeof</span>(vis));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) dis[i] = INF;</span><br><span class="line">    dis[s] = <span class="number">0</span>;</span><br><span class="line">    q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(s, <span class="number">0</span>));</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="type">int</span> now = q.<span class="built_in">top</span>().first;</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (vis[now]) <span class="keyword">continue</span>;</span><br><span class="line">        vis[now] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = g[now]; i; i = b[i].next)</span><br><span class="line">            <span class="keyword">if</span> (dis[b[i].to] &gt; dis[now] + b[i].cost)</span><br><span class="line">                dis[b[i].to] = dis[now] + b[i].cost, q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(b[i].to, dis[b[i].to]));</span><br><span class="line">    &#125;</span><br><span class="line">    ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">if</span> (dis[i] != INF)</span><br><span class="line">            ans += (LL)i * (dis[i] - hdis[s] + hdis[i]);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            ans += (LL)i * INF;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, ui, vi, ci; i &lt;= m; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;ui, &amp;vi, &amp;ci), <span class="built_in">ade</span>(ui, vi, ci);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">bellmanFord</span>()) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= cntb; i++)</span><br><span class="line">        b[i].cost += hdis[b[i].from], b[i].cost -= hdis[b[i].to];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">dijk</span>(i);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>By Cansult</p>]]></content>
      
      
      <categories>
          
          <category> 水题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>颓废笔记 博客搭建遇到的坑 [翻车]</title>
      <link href="/posts/4482.html"/>
      <url>/posts/4482.html</url>
      
        <content type="html"><![CDATA[<p>重建博客 我再也不想碰这玩意了</p><span id="more"></span><h3 id="永久链接">永久链接</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure><p>在<code>_config.yml</code>里改为<code>permalink: posts/:abbrlink.html</code></p><h3 id="脚标">脚标</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall hexo-renderer-marked --save</span><br><span class="line">npm install hexo-renderer-pandoc --save</span><br><span class="line">sudo apt-get install pandoc</span><br></pre></td></tr></table></figure><p>然后<code>hexo g</code>就可以了</p><h3 id="搜索">搜索</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-search</span><br></pre></td></tr></table></figure><p>然后在next的配置文件里把<code>local search</code>改成<code>true</code>就行了<del>next实在是太方便了</del></p><p>By 不知道上啥大学的 Cansult</p>]]></content>
      
      
      <categories>
          
          <category> 颓废笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 颓废 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>颓废笔记 xMinh的机房人物列传</title>
      <link href="/posts/41314.html"/>
      <url>/posts/41314.html</url>
      
        <content type="html"><![CDATA[<p>用来骗访问量的</p><span id="more"></span><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=28687722&amp;auto=1&amp;height=66"></iframe><h3 id="人物列传cdotrefunaufun虚凡人赢">人物列传<spanclass="math inline">\(\cdot\)</span>Refun（Aufun，虚凡，人赢）</h3><p>机房最人赢的人赢，上过表白墙的男人在宿舍公然开设情感讲座和人赢培训班, 教学成果显著,他的徒弟要么gay了要么凉了 认识的人极其广泛, 包括但不限于外校教练,远古神犇, 集训队爷, 各路妹子, 甚至新疆女队的家长当NOIP2017机房全体爆炸的时候, 只有他一枝独秀地考了400+ 声名在外的AK爷,每每出现总是引起众人前呼后拥, 锣鼓喧天, 山呼海啸一般的膜拜被机惨的次数在全国排的上号, 全国各地经常水群的OIer,手里都多少攥着几张他的机惨截图</p><p>多个群的群主, 禁言狂魔, 在权力中迷失自我(然而被集体退群推翻了)游戏天赋爆表, 但游戏习惯恶劣, 垃圾话狂魔曾经因为打拳皇在NOIP一周前被loli连续抓颓三次 自诩欧洲白皇,曾经三国杀用火诸葛连抽十多张红牌, 但从未抽中过牛客的T恤吃饭速度堪比闪电侠, 吃完后总是先行离去, 留下一个潇洒的背影明明是个人赢偏要自称死宅, 被Asia嘲讽没看过几部番</p><blockquote><p>"我的徒弟都是烂泥扶不上墙" "等我退役了就找个妹子安慰自己""反正你们没录音, 我太神了, 我就是欧皇" "大哥, 大哥, 别打我, 我错了,诶等会, 我大招好了, 去死吧你"(打游戏ing)</p></blockquote><blockquote><p>"这个fun怎么越来越虚了"——gayge "三千越甲可吞吴, 百万妹子终属褚"——AH"Aufun是唯一能在吃饭速度上与我匹敌的男人"——Asia</p></blockquote><h3 id="人物列传cdotgarystackjan哥-绿太阳-韭菜精">人物列传<spanclass="math inline">\(\cdot\)</span>Garystack(Jan哥, 绿太阳,韭菜精)</h3><p>能在没学过动态规划的情况下手推DP, 被称作单传DP爷, DP神教第二代教宗甚至在没学过的情况下手推出网络流, A掉后仍以为只是做出了一道图论由于暑假集训时期每天只穿同一件嫩绿色外套, 得到了绿太阳和韭菜精的法号不管讲师多么毒瘤都能听懂课的魔鬼 正睿OI为数不多的橙名大佬,且从不屑于打其他网站的比赛</p><p>戴上墨镜气质酷似黑帮大哥, 自带走秀BGM 亚洲舞王, 非著名dancer,据说演出费高达两百块钱(所以我们现在都没怎么看他跳过)为了OI放弃了篮球(和妹子?) 几乎没见过他打游戏, 但CS技术十分强悍时刻开启网易云音乐, 并热衷于给笔者播放Butterflies和Worthit等经典鬼畜老歌 对机惨毫无防范意识, 无数次在浑然不觉之间被公然处刑</p><blockquote><p>"Fake"(口头禅之一) 每考一次试就得发一条诸如"T1怎么写, T2怎么写,T3怎么写, 又要掉分了"之类的说说</p><p>——"出太阳了" ——"是啊, 我回来了"</p></blockquote><blockquote><p>"这个Jan怎么越来越gay了"——gayge "胜利一中顶上, 升起绿色太阳,那不是绿色太阳, 那是Jan哥的光芒"——菡姐"Jan哥身上全是纯情少年的人赢气息"——Refun</p></blockquote><h3 id="人物列传cdotdispwnlgayge-ljl-人形自走oj一号">人物列传<spanclass="math inline">\(\cdot\)</span>Dispwnl(gayge, LJL,人形自走OJ一号)</h3><p>码力惊人, 数据结构狂魔, 几乎学过所有的数据结构,热衷于调试几百行的树套树套树在没接触过OI的情况下以第一名的好成绩通过了信息自招AC数1k的人形自走OJ一号</p><p>潜在骚话王体质, 笑点忽高忽低经常会疯狂挠头或者做出各种鬼畜的表情来表示自己的心情, 尤其喜欢用头蹭Asia对食堂的肥肉和炸蘑菇非常痴迷, 疑似成瘾 每次放假都不想回家,因为会遭到他妹妹惨无人道的折磨 拥有被教导主任gank过14次的孽缘,且此记录仍在不断刷新中 拥有连吃3个苹果和1个橘子的战绩,且此记录仍在不断刷新中 拥有在luogu日报置顶过的3篇博文,且此记录仍在不断刷新中</p><blockquote><p>"这题我要是过了就请你们出去嫖"(成功AC)"fuge上紫我就女装"(fuge成功上紫)</p><p>——dzm："我要妹子" ——Refun: "那我要汉子" ——gayge: "小孩子才做选择,我全都要"</p></blockquote><blockquote><p>"wjl同学在学习上是大家的榜样"——gayge高一的班主任"你俩男的怎么还睡一张床了！"——教导主任1 "你三只眼, 你马王爷,你牛逼啊！"——教导主任2</p></blockquote><h3 id="人物列传cdotberettyfuge-biefu">人物列传<spanclass="math inline">\(\cdot\)</span>Beretty(fuge, biefu)</h3><p>在所有OJ从不掉分的怪物, 所有掉分的场次都会因为各种不可抗力因素作废经常会写出诡谲的解法进行花式AC表演 甚至一怒之下写过长达13k的猪国杀</p><p>但他更知名的身份是我国著名诗人, 相声演员, 脱口秀艺术家开创的"无限停顿说话法"和"主谓宾错排说话法"达到了中文史上前所未有的高峰真正的骚话王, 不经意间的一句话就可以让全机房笑出内伤但每次大家等待他激情演讲的时候, 他的声音都会越来越小, 最后归于沉寂正所谓艺术都是共通的, fuge的抽象画也是一流水准,可以达到"只见其神而不见其形"的境界据说曾经在金牌爷还不是金牌爷的时候嘲讽过金牌爷,所以金牌爷才成为了金牌爷</p><blockquote><p>"嘿 嘿 嘿" "zsc是他爸学校领导吧!" "我把机房落水杯里了!" "来,给儿子让个位!"(fuge想让xg给他让位)</p><p>——"隔壁班妹子数量多, 但是质量不行啊" ——"我只要数量"</p><p>"诗就是我的根, 诗已经融入到了我的生命里" "Refun老是被绿, 被gayge绿,不对, 是gayge老是被绿……" "不是, 哎呀, 那个, 我, 算了我不说了……"</p></blockquote><blockquote><p>"这个fu怎么越来越逊了"——gayge "fuge就是个鳖"——昊哥"你永远不知道fuge是真蛇皮还是假蛇皮,因为他真蛇皮假蛇皮都一个样"——Refun</p></blockquote><h3 id="人物列传cdotcaptain_paul生蚝-蚝爷-人形自走oj二号">人物列传<spanclass="math inline">\(\cdot\)</span>Captain_Paul(生蚝, 蚝爷,人形自走OJ二号)</h3><p>真正的人形自走OJ之王, AC数高达1.3k 曾经一天狂切十余道网络流,平均20min一道, 仅次于Jan哥在AH的操控下72秒24题的神速 文化课巨佬,凭着出色的文化课成绩荼毒机房生灵, 为害一方 整个机房最耐膜的人,欣然接受凡人膜拜</p><p>对篮球无比热爱, 某炮姓球星铁粉, 对58这个数有着奇妙的感情非常有妹子缘, 在NOIP2017时被机房全体女生拿faceu拍了个遍一直在玩大家都不玩的游戏, 包括但不限于NBA2k和穿越火线 外表天真无鞋,但内心文艺并且闷骚, 日夜研读朱生豪情诗集和各种知乎文艺问答一直保持着规律的作息, 但一旦骚起来就语不惊人死不休, 可以聊到凌晨不知疲倦曾多次在空间发表情诗和各种(土味)情话, 但均没有引发天雷地火效应</p><blockquote><p>"小gaygay" "小fufu" "嘿嘿嘿" "我也考砸过呀, 我有一次掉到200多名去了""好, 你说得对, 我太强了"</p></blockquote><blockquote><p>"这个蚝怎么越来越骚了"——gayge "做人不能太蚝爷,要给别人留点面子"——xMinh "蚝这个天赋, 再让我一教,肯定妻妾成群"——Refun</p></blockquote><h3 id="人物列传cdotvictoriqueasia">人物列传<spanclass="math inline">\(\cdot\)</span>Victorique(Asia)</h3><p>对某些特殊算法有着惊人的恐怖造诣, 比如贪心, 最短路, 网络流自称可以一眼秒掉绝大多数的网络流题,对玄学网络流复杂度的分析总是有理有据, 但正确率感人 乱搞界的一朵奇葩,曾经在各种线上线下比赛通过极骚的操作得到意想不到的分数在打表界封神的存在, 强大如舒老师打比赛也仰仗过他的打表</p><p>游戏王一般的存在,所有的游戏只要听一遍规则就可以熟练掌握甚至找到必胜法来吊打别人 荣誉等身,前魔兽争霸天梯40, 前球球大作战王者玩家,前生死狙击联通一区第二战队荣誉队长, 前王者荣耀D市第7墨子,加冕的其他游戏还有fgo, cf, 饥荒, 德州扑克等等等等曾单挑whx引以为豪的AI并大获全胜, 在此之前众人挑战whx的战绩是全败真正的肥宅中的战斗宅, 宅文化活百科, 阅番阅本不计其数,被Cansult称作galの王者凭借100kg+的体重成为那位经常收拾gayge的教导主任所无法撼动的人之一对杠文化情有独钟, 自诩天才杠神 qq音乐无限续费的绿钻,除了ACG音乐外最喜欢的竟然是华语老情歌虽然自己不喜欢听lostrivers和大悲咒但热衷于调大音量给gayge播放</p><blockquote><p>"卧槽, sb吧"(用于咏叹某物之出乎意料) "你看对不对, 我就说嘛,这个表它就非常稳" "gayge现在已经习惯我给他放lostrivers了,你看他听的津津有味"</p></blockquote><blockquote><p>"这个Asia怎么越来越不是东西了"——gayge "Asia杠人的时候,我仿佛看到了体操王子李宁"——xMinh</p><p>——"为什么把Asia写的这么详细?" ——"因为字数与质量成正比"</p></blockquote><h3 id="人物列传cdotslr昊哥-天才-社会人">人物列传<spanclass="math inline">\(\cdot\)</span>Slr(昊哥, 天才, 社会人)</h3><p>OI界的樱木花道, 从初四就开始自称天才选手 树上操作臻入化境,机房唯一学会了仙人掌的人 做题质量极高, Bzoj的AC数已接近lx的"银牌标准",经常苦恼自己是去清华好还是去北大好</p><p>篮球水平不错, 一大特点是爱秀, 投篮前惯例是战术滞空一秒,高兴了还会在空中劈叉 上篮的时候总是气势如龙, 所以大家都会帮他喊"刀,怒斩雪翼雕" 一大特点是有钱, 不管什么游戏一上手就氪金, 见礼包就买,曾经想要购置一辆和谐号 有钱还有背景的社会黑恶势力, 从来只听社会歌曲,包括但不限于刀山火海、社会摇和保卫钓鱼岛 自称在新疆有过一万小弟,但是圣战都牺牲了 讲话慢条斯理, 但思维及其跳跃,经常把加他QQ的骗子调戏得云里雾里 Refun的大徒弟, 曾经的现充,但也只是曾经的现充了</p><blockquote><p>"我简直就是个天——才" "这题都做不出来, 傻——逼吧""你们跟我一个宿舍就得做好早上听我和妹子开语音的准备"</p></blockquote><blockquote><p>"这个昊哥怎么越来越蛇皮了"——gayge "昊哥就是个鳖"——fuge"昊哥要是没有我助攻, 人家妹子根本不可能要他"——Refun</p></blockquote><h3 id="人物列传cdotcansult宽嫂">人物列传<spanclass="math inline">\(\cdot\)</span>Cansult(宽嫂)</h3><p>在所有人都在学搜索的时候, 宽嫂已经开始DP了在所有人都不知道什么是数据结构的时候, 宽嫂已经熟练掌握线段树了由于在某省选营不停发出"全程OK""很休闲啊""左转百度"来催促讲师,导致无数人叫苦不迭 最可怕的是, 他真的全程OK而且真的觉得很休闲</p><p>自称一中颓神, 自称一中宅王, 但这两个项目上都只能惜败Asia外表高贵冷艳, 甚至被初中同学认为是总裁人设,实际上是个经常发出鬼畜笑声的逗比在氪金买游戏(仅限steam)这件事上有着不亚于昊哥的热情,甚至总金额要高于昊哥 资深军宅, 精通各种军械知识,战争雷霆和彩虹六号资深玩家(现在还有For Honor了) 经常换老婆,只可惜都是纸片人, 每天都用印有他老婆(们)的咖啡杯喝水前胜利一中OJ万恶的root, 甚至无耻的用权限给自己的毒瘤模拟赛刷赞</p><blockquote><p>"卧槽, 炫啊, 好捷豹酷炫啊" "你们给我众筹买女装吧""我也是为了OI放弃了妹子的人啊"</p></blockquote><blockquote><p>"宽嫂可爱!"——qwq教众 "这个宽嫂怎么越来越该死了"——gayge"cyk是我见过的最毒瘤的人, 如果非要加上之一, 那就带上Refun吧"——xMinh</p></blockquote><h3 id="人物列传cdotxg虚高">人物列传<spanclass="math inline">\(\cdot\)</span>XG(虚高)</h3><p>理解力惊人, 在各种集训营里面唯一能从头到尾听懂老师讲课的人,并且能和各种金牌讲师谈笑风生 打比赛从不组队, 经常以一己之力单挑车队不管看什么题都是难度虚高的板子题, 其不屑之意流露于题解,所以得到虚高这一雅号</p><p>篮球技术与昊哥相仿, 某詹姓球星铁粉,一直认为fuge是其职业生涯最大的敌人 游戏技能树点的极偏,对部分游戏表现出没有兴趣且极无天赋, 但热衷于2k和吃鸡并技术尚可对Refun最壮大的一次机惨的幕后黑手,制定了堪称完美的计划并成功影响了Refun的私人情感生活曾是油一初中部社会大哥并拥有一名初一小弟, 并且和真<spanclass="math inline">\(\cdot\)</span>社会大哥做过同桌 扯皮技术一流,吹嘘自己能一顿吃六十串鸡翅, 也就是120个, 360块钱 曾经有亲密度94的妹子,但其背后的故事一直成谜</p><blockquote><p>"这些都是板子题, 难度虚高" "老师, 等会,这个题他是不是这么这么做……"(一枝独秀) "这罗哲正女朋友多还爱秀恩爱,可恶就可恶在这两点, 少一点也不行。他要光是秀恩爱, 那就是钟皓曦,他要光是女朋友多, 那就是zkJan"</p></blockquote><blockquote><p>"xg今天太虚了"——zzzyc "他是不是看什么题都是虚高题啊"——Cansult"xg和那妹子亲密度94, 没问题就鬼了"——Refun</p></blockquote><h3 id="人物列传cdotah独秀-逼王">人物列传<spanclass="math inline">\(\cdot\)</span>AH(独秀, 逼王)</h3><p>对数学有着极高的天赋, 能够推出各种常人无法理解的式子,月考数学考过满分, 并且总分年级前20 真正的逼王之王, 热衷于装逼,曾经在学长讲题的时候径自走到黑板上推式子, 并被合力拉了下来在Loli的模拟赛中经常取得极高的分数, 然后考完试就会在群里哀叹, fake,如果还没有人禁言他, 就会开始装逼 经常故意说出欠揍的话来吸引别人膜拜他,但往往没人上当 由于经常不自觉地炫耀自己的强大, 所以被称作马独秀</p><p>曾经因为颓王者荣耀被loli连续抓颓两次,被迫在众人都放假的时候独自在学校待了一天撰写过那位经常制裁gayge的教导主任的文言传记, 并在校公告栏发表用Jan哥的号完成了通过复制粘贴72秒AK网络流24题的神迹曾经公然把三个妹子的名字作为胡策题目, 三个题的模数分别是三个生日,但惨遭集体抵制 Refun的三徒弟, 曾经的现充, 甚至把ID都改成了妹子的名字,但可惜他只是曾经的现充了</p><blockquote><p>"我被钦定进队了" "我数学只是偶然有一次考过满分而已""这个式子你推一推就会发现它其实十分简单"</p></blockquote><blockquote><p>"马独秀, 请你坐下"——Cansult "谁又把mhr放出来了, 禁言他啊"——Refun"你和mhr坐在一块, 就得时刻做好被机惨或者被关机的准备"——Jan哥</p></blockquote><h3 id="人物列传cdotzzzyc">人物列传<spanclass="math inline">\(\cdot\)</span>zzzyc</h3><p>对前缀和有着莫名的痴迷, 口头禅是"这个可以用前缀和做"出过史上最敷衍的模拟赛, 板子题和超纲题导致风评惨淡其班主任曾对其家长赌咒发誓"zyc如果不学竞赛就可以考年级前50"</p><p>说话口头禅有"泥萌""怎么这样子""。。。"等, 因此经常被误认成妹子,也经常被机房众人模仿取乐 在玩冷门游戏这方面不逊于蚝爷,玩的熟练的游戏别人都不玩, 但狼人杀玩的不错 资深伪球迷, 但可惜被轻易识破和zyx学长以及zyx学姐关系甚好, 在学弟中表现十分亲民在进入胜利一中机房前几乎所有好友都是妹子, 被金麟大哥戏称为开后宫经常被长辈称作好孩子, 但更惨的是经常被妹子称作好人</p><blockquote><p>"你不信看题解, 这个真能用前缀和做" "自从魔术师走了之后,魔术队就越来越不行了"</p></blockquote><blockquote><p>"你是个好人"——某妹子 "你让zyc给我捎过来就行"——zyx学长"zyc长得就像个身价两千万的暴发户"——Asia</p></blockquote><h3 id="人物列传cdotwzhqwq">人物列传<spanclass="math inline">\(\cdot\)</span>wzhqwq</h3><p>机房公认的技术人员, 精通其他竞赛狗所不及的编程知识 胜利一中OJ维修师,betaOJ的缔造者</p><p>P图界的一股清流, 尤其喜欢以Refun为蓝本进行二次创作,代表作有《AufunVivo广告》《Aufun极乐净土》《Aufun打球》和《Aufun面向对象们编程》等曾因为以Jan哥为蓝本创作而被某教导主任拎出去训话 内心闷骚程度不亚于蚝爷,深夜会变得车速极快, 只要说话便令人措手不及 从来不屑于用别人的博客模板,向来自己制作博客, 结局就是博客换了又换, 依旧长得很丑</p><p>wzh一般情况下的说话状态:</p><blockquote><p>"&amp;...*&amp;%&amp;$...#"(认真科普我们听不懂的信息技术知识)</p></blockquote><blockquote><p>"快来修OJ!"——Cansult "P图这方面能比我还强的只有wzh"——Refun</p></blockquote><figure><img src="../pictures/20190108A.png" alt="family" /><figcaption aria-hidden="true">family</figcaption></figure><p>转自<a href="https://xminh.github.io/">xMinh</a></p>]]></content>
      
      
      <categories>
          
          <category> 颓废笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 颓废 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>翻车笔记 [PA2015]Fibonacci [清奇脑回路, 数学, 搜索]</title>
      <link href="/posts/58870.html"/>
      <url>/posts/58870.html</url>
      
        <content type="html"><![CDATA[<p>啦啦啦啦啦啦啦啦啦啦</p><span id="more"></span><h3 id="懵逼的-题目">懵逼的 题目</h3><p><ahref="https://lydsy.com/JudgeOnline/problem.php?id=4294">BZOJ</a></p><h3 id="扯淡的-题解">扯淡的 题解</h3><p>首先我们要知道一个结论 叫斐波那契数模<spanclass="math inline">\(10^n\)</span>的循环周期是<spanclass="math inline">\(6 \times 10^n\)</span><a href="#fn1"class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a></p><p>然后呢 我们就可以从低到高的搜索<span class="math inline">\(s\)</span>因为有循环 所以我们只需要检验上一个<spanclass="math inline">\(k\)</span>加上任意个<span class="math inline">\(6\times 10^{dq}\)</span>所在的斐波那契树的<spanclass="math inline">\(dq\)</span>位是否是我们搜的这一位就行了</p><h3 id="沙茶的-代码">沙茶的 代码</h3><p>抄抄抄</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 20</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> ull;</span><br><span class="line"><span class="type">int</span> n,i,flag;<span class="type">char</span> a[N];ll mo[N],b[N];ull ans;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ull <span class="title">mul</span><span class="params">(ull a,ull b,ull P)</span></span>&#123;ull t=<span class="number">0</span>;<span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>,a=(a+a)%P)<span class="keyword">if</span>(b&amp;<span class="number">1</span>)t=(t+a)%P;<span class="keyword">return</span> t;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">cal</span><span class="params">(ll n,ll&amp;x,ll&amp;y,ll P)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!n)&#123;x=<span class="number">0</span>,y=<span class="number">1</span>;<span class="keyword">return</span>;&#125;</span><br><span class="line">  <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;x=y=<span class="number">1</span>;<span class="keyword">return</span>;&#125;</span><br><span class="line">  <span class="keyword">if</span>(n&amp;<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="built_in">cal</span>(n<span class="number">-1</span>,y,x,P);</span><br><span class="line">    y=(<span class="number">1ULL</span>*y+x)%P;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  ll a,b;</span><br><span class="line">  <span class="built_in">cal</span>(n&gt;&gt;<span class="number">1</span>,a,b,P);</span><br><span class="line">  x=(<span class="built_in">mul</span>(a,b,P)+<span class="built_in">mul</span>(a,b&lt;a?b-a+P:b-a,P))%P;</span><br><span class="line">  y=(<span class="built_in">mul</span>(a,a,P)+<span class="built_in">mul</span>(b,b,P))%P;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">fib</span><span class="params">(ll n,ll P)</span></span>&#123;ll x,y;<span class="built_in">cal</span>(n,x,y,P);<span class="keyword">return</span> x;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> n,ll t,ll T)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(flag)<span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">fib</span>(t,mo[n])!=b[n])<span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;flag=<span class="number">1</span>,ans=<span class="number">6000000000000000000ULL</span>+t;<span class="keyword">return</span>;&#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)<span class="built_in">dfs</span>(n<span class="number">-1</span>,(<span class="number">1ULL</span>*t+T*i)%(T*<span class="number">10</span>),T*<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,a+<span class="number">1</span>),n=<span class="built_in">strlen</span>(a+<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">for</span>(mo[i=n]=<span class="number">1</span>;i;i--,mo[i]=mo[i+<span class="number">1</span>]*<span class="number">10</span>)b[i]=mo[i]*(a[i]-<span class="string">&#x27;0&#x27;</span>)+b[i+<span class="number">1</span>];</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)mo[i]*=<span class="number">10</span>;</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">60</span>;i++)<span class="built_in">dfs</span>(n,i,<span class="number">60</span>);</span><br><span class="line">  <span class="keyword">if</span>(flag)<span class="built_in">printf</span>(<span class="string">&quot;%llu&quot;</span>,ans);<span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;NIE&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>By 准备退役旅游的 Cansult</p><aside id="footnotes" class="footnotes footnotes-end-of-document"role="doc-endnotes"><hr /><ol><li id="fn1"><p>其实更普遍的情况是模<spanclass="math inline">\(A^x\)</span>的循环节<spanclass="math inline">\(L(A^x)\)</span>是<span class="math inline">\(A^{x- 1} \cdot L(A)\)</span><a href="#fnref1" class="footnote-back"role="doc-backlink">↩︎</a></p></li></ol></aside>]]></content>
      
      
      <categories>
          
          <category> 翻车笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 清奇脑回路 </tag>
            
            <tag> 搜索 </tag>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>水题笔记 [JSOI2008]火星人prefix [Hash, Splay]</title>
      <link href="/posts/43963.html"/>
      <url>/posts/43963.html</url>
      
        <content type="html"><![CDATA[<p>我爱HT008</p><span id="more"></span><h3 id="懵逼的-题目">懵逼的 题目</h3><p><ahref="https://lydsy.com/JudgeOnline/problem.php?id=1014">BZOJ</a></p><h3 id="扯淡的-题解">扯淡的 题解</h3><p>一看Hash应该就都会了吧<code>←_←</code></p><p>修改的话用splay维护一下就好了</p><h3 id="沙茶的-代码">沙茶的 代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">咕咕咕</span><br></pre></td></tr></table></figure><p>By 准备退役旅游的 Cansult</p>]]></content>
      
      
      <categories>
          
          <category> 水题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分 </tag>
            
            <tag> Hash </tag>
            
            <tag> Splay </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>水题笔记 [Jsoi2009]有趣的游戏 [AC自动机, 矩阵, DP]</title>
      <link href="/posts/49409.html"/>
      <url>/posts/49409.html</url>
      
        <content type="html"><![CDATA[<p>APIO和CTSC一个都去不了太真实了</p><p>其实能去才奇怪吧<code>←_←</code></p><p>如果进不了R2还得去APIO似乎更惨一下啊<code>←_←</code></p><span id="more"></span><h3 id="懵逼的题目">懵逼的题目</h3><p><ahref="https://lydsy.com/JudgeOnline/problem.php?id=1444">BZOJ</a></p><h3 id="扯淡的-题解">扯淡的 题解</h3><p>把上面那个题的KMP换成AC自动机就行了</p><p>注意因为要"保留贡献"</p><p>所以单词的结尾节点在矩阵中要置为1</p><h3 id="沙茶的-代码">沙茶的 代码</h3><p>我居然一遍写对了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**************************************************************</span></span><br><span class="line"><span class="comment">    Problem: 1444</span></span><br><span class="line"><span class="comment">    User: Cansult</span></span><br><span class="line"><span class="comment">    Language: C++</span></span><br><span class="line"><span class="comment">    Result: Accepted</span></span><br><span class="line"><span class="comment">    Time:796 ms</span></span><br><span class="line"><span class="comment">    Memory:12492 kb</span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 把那个题的dp改成概率dp是不是就行了</span></span><br><span class="line"><span class="comment">// 一直到当前的影响小于eps?</span></span><br><span class="line"><span class="comment">// 设f[i][j]: 当前已经进行了i次, 在第j个节点, 还未决出胜负的概率</span></span><br><span class="line"><span class="comment">// 对于下一个节点: 如果能结束游戏就结束 然后算出贡献; 否则到f值小于eps时结束</span></span><br><span class="line"><span class="comment">// 还得整矩阵 高消是不存在的</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (100)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXS (11)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DXG (10000000000000ll + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DD double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">    <span class="type">int</span> son[MAXS], fail, bh;</span><br><span class="line">&#125; b[MAXN &lt;&lt; <span class="number">5</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">matrix</span> &#123;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    DD zh[MAXN][MAXN];</span><br><span class="line">    <span class="built_in">matrix</span>() &#123; <span class="built_in">memset</span>(zh, <span class="number">0</span>, <span class="built_in">sizeof</span>(zh)); &#125;</span><br><span class="line">&#125; m1, ma, f;</span><br><span class="line"><span class="type">int</span> n, l, m, cntb;</span><br><span class="line">pii mb[MAXN];</span><br><span class="line"><span class="type">char</span> s[MAXN][MAXN];</span><br><span class="line">DD ans[MAXN];</span><br><span class="line"><span class="function">matrix <span class="title">tim</span><span class="params">(matrix x, matrix y)</span> </span>&#123;</span><br><span class="line">    matrix re;</span><br><span class="line">    re.n = x.n, re.m = y.m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; re.n; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; re.m; j++) </span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; x.m; k++)</span><br><span class="line">                re.zh[i][j] += x.zh[i][k] * y.zh[k][j];</span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">matrix <span class="title">ksm</span><span class="params">(LL b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!b) <span class="keyword">return</span> m1;</span><br><span class="line">    matrix re = <span class="built_in">ksm</span>(b &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    re = <span class="built_in">tim</span>(re, re);</span><br><span class="line">    <span class="keyword">if</span> (b &amp; <span class="number">1</span>) re = <span class="built_in">tim</span>(re, ma);</span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">initac</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; MAXS; i++) <span class="keyword">if</span> (b[<span class="number">0</span>].son[i]) q.<span class="built_in">push</span>(b[<span class="number">0</span>].son[i]);</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="type">int</span> dq = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; MAXS; i++)</span><br><span class="line">            <span class="keyword">if</span> (b[dq].son[i]) b[b[dq].son[i]].fail = b[b[dq].fail].son[i], q.<span class="built_in">push</span>(b[dq].son[i]);</span><br><span class="line">            <span class="keyword">else</span> b[dq].son[i] = b[b[dq].fail].son[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">pd</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (; x; x = b[x].fail)</span><br><span class="line">        <span class="keyword">if</span> (b[x].bh)</span><br><span class="line">            <span class="keyword">return</span> b[x].bh;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">initac</span>();</span><br><span class="line">    m1.n = m1.m = cntb;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; cntb; i++) m1.zh[i][i] = <span class="number">1</span>;</span><br><span class="line">    f.n = <span class="number">1</span>, f.m = cntb;</span><br><span class="line">    f.zh[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    ma.n = ma.m = cntb;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; cntb; i++)</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">pd</span>(i))</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; j++)</span><br><span class="line">                ma.zh[i][b[i].son[j]] += (DD)mb[j].first / mb[j].second;</span><br><span class="line">        <span class="keyword">else</span> ma.zh[i][i] = <span class="number">1</span>; <span class="comment">// 就是这个地方 如果不赋为1的话之前的工作就白做了</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;l, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;mb[i].first, &amp;mb[i].second);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s[i]);</span><br><span class="line">        <span class="type">int</span> dq = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>, ndq; j &lt; <span class="built_in">strlen</span>(s[i]); j++) &#123;</span><br><span class="line">            ndq = s[i][j] - <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span> (!b[dq].son[ndq]) b[dq].son[ndq] = ++cntb;</span><br><span class="line">            dq = b[dq].son[ndq];</span><br><span class="line">        &#125;</span><br><span class="line">        b[dq].bh = i;</span><br><span class="line">    &#125;</span><br><span class="line">    ++cntb;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    f = <span class="built_in">tim</span>(f, <span class="built_in">ksm</span>(DXG));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; cntb; i++) ans[<span class="built_in">pd</span>(i)] += f.zh[<span class="number">0</span>][i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">printf</span>(<span class="string">&quot;%.2lf\n&quot;</span>, ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>By 准备退役旅游的 Cansult</p>]]></content>
      
      
      <categories>
          
          <category> 水题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 矩阵 </tag>
            
            <tag> AC自动机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>水题笔记 [HNOI2008]GT考试 [KMP, 矩阵, DP]</title>
      <link href="/posts/1386.html"/>
      <url>/posts/1386.html</url>
      
        <content type="html"><![CDATA[<p>Roll boys~ Roll boys roll!</p><p>从R1回来了 突然发现我联赛和省选前的一个月都一个题没写</p><p>不知道怎么回事就是不想学习<code>←_←</code></p><span id="more"></span><h3 id="懵逼的题目">懵逼的题目</h3><p><ahref="https://lydsy.com/JudgeOnline/problem.php?id=1009">BZOJ</a></p><h3 id="扯淡的-题解">扯淡的 题解</h3><p>我们发现这题和我一个月之前做的<ahref="https://cansult.ga/28220.html">那个题</a>肥肠像</p><p>除了<span class="math inline">\(n\)</span>有点大</p><p>那就矩乘优化一下就好了因为如果已经匹配的位数和当前位是什么都确定了的话 转移也是确定的</p><h3 id="沙茶的-代码">沙茶的 代码</h3><p>我居然一遍写对了</p><p><del>除了忘给矩阵里的<code>n</code>和<code>m</code>赋值了</del></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**************************************************************</span></span><br><span class="line"><span class="comment">    Problem: 1009</span></span><br><span class="line"><span class="comment">    User: Cansult</span></span><br><span class="line"><span class="comment">    Language: C++</span></span><br><span class="line"><span class="comment">    Result: Accepted</span></span><br><span class="line"><span class="comment">    Time:56 ms</span></span><br><span class="line"><span class="comment">    Memory:1460 kb</span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 构造21 * 21的矩阵 对于每一行 除了要转移过去的地方全部置为0 </span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (1000000000 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXM (20 + 5)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">matrix</span> &#123;</span><br><span class="line">    <span class="type">int</span> n, m, zh[MAXM][MAXM];</span><br><span class="line">    <span class="built_in">matrix</span>() &#123; <span class="built_in">memset</span>(zh, <span class="number">0</span>, <span class="built_in">sizeof</span>(zh)); &#125;</span><br><span class="line">&#125; m1, ma, f;</span><br><span class="line"><span class="type">int</span> n, m, p, nex[MAXM], ans;</span><br><span class="line"><span class="type">char</span> s[MAXM];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    m1.n = m1.m = m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) m1.zh[i][i] = <span class="number">1</span>;</span><br><span class="line">    f.n = <span class="number">1</span>, f.m = m;</span><br><span class="line">    f.zh[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        j = nex[i];</span><br><span class="line">        <span class="keyword">while</span> (j &amp;&amp; s[j] != s[i]) j = nex[j]; </span><br><span class="line">        nex[i + <span class="number">1</span>] = (s[i] == s[j]) ? (j + <span class="number">1</span>) : <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ma.n = ma.m = m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">            <span class="type">int</span> ndq = i;</span><br><span class="line">            <span class="keyword">while</span> (ndq &amp;&amp; s[ndq] - <span class="string">&#x27;0&#x27;</span> != j) ndq = nex[ndq];</span><br><span class="line">            <span class="keyword">if</span> (s[ndq] - <span class="string">&#x27;0&#x27;</span> == j) ++ndq;</span><br><span class="line">            ++ma.zh[i][ndq];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">matrix <span class="title">tim</span><span class="params">(matrix x, matrix y)</span> </span>&#123;</span><br><span class="line">    matrix re;</span><br><span class="line">    re.n = x.n, re.m = y.m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; re.n; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; re.m; j++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; x.m; k++)</span><br><span class="line">                re.zh[i][j] += x.zh[i][k] * y.zh[k][j] % p, re.zh[i][j] %= p;</span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">matrix <span class="title">ksm</span><span class="params">(<span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!b) <span class="keyword">return</span> m1;</span><br><span class="line">    matrix re = <span class="built_in">ksm</span>(b &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    re = <span class="built_in">tim</span>(re, re);</span><br><span class="line">    <span class="keyword">if</span> (b &amp; <span class="number">1</span>) re = <span class="built_in">tim</span>(re, ma);</span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;p);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s);</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    f = <span class="built_in">tim</span>(f, <span class="built_in">ksm</span>(n));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) ans += f.zh[<span class="number">0</span>][i], ans %= p;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>By 准备退役旅游的 Cansult</p>]]></content>
      
      
      <categories>
          
          <category> 水题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> KMP </tag>
            
            <tag> DP </tag>
            
            <tag> 矩阵 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>翻车笔记 [Tjoi2013]单词 [翻车, AC自动机]</title>
      <link href="/posts/60210.html"/>
      <url>/posts/60210.html</url>
      
        <content type="html"><![CDATA[<p>记得平衡复杂度</p><p><del>又及: 这是一个悲惨的故事: 我又忘<code>push</code>了</del></p><span id="more"></span><h3 id="懵逼的-题目">懵逼的 题目</h3><p><ahref="https://lydsy.com/JudgeOnline/problem.php?id=3172">BZOJ</a></p><h3 id="扯淡的-题解">扯淡的 题解</h3><p>这题暴跳<code>fail</code>也才<span class="math inline">\(\mathrm O(2\times 10^8)\)</span>不是...</p><p>那写啥正解啊</p><p>预处理<code>fail</code>的时候要把终点标记沿着<code>fail</code>下放,不然复杂度就是<span class="math inline">\(\mathrmO(10^{10})\)</span>左右了</p><h3 id="沙茶的-代码">沙茶的 代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**************************************************************</span></span><br><span class="line"><span class="comment">    Problem: 3172</span></span><br><span class="line"><span class="comment">    User: Cansult</span></span><br><span class="line"><span class="comment">    Language: C++</span></span><br><span class="line"><span class="comment">    Result: Accepted</span></span><br><span class="line"><span class="comment">    Time:3292 ms</span></span><br><span class="line"><span class="comment">    Memory:182656 kb</span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (1000200 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXC (27)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">    <span class="type">int</span> son[MAXC], fail;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; bh;</span><br><span class="line">&#125; b[MAXN];</span><br><span class="line"><span class="type">int</span> ans[MAXN], cntb, n, ns;</span><br><span class="line"><span class="type">char</span> s[MAXN], sn[MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; MAXC; i++) <span class="keyword">if</span> (b[<span class="number">0</span>].son[i]) q.<span class="built_in">push</span>(b[<span class="number">0</span>].son[i]);</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="type">int</span> dq = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; b[b[dq].fail].bh.<span class="built_in">size</span>(); i++)</span><br><span class="line">            b[dq].bh.<span class="built_in">push_back</span>(b[b[dq].fail].bh[i]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; MAXC; i++)</span><br><span class="line">            <span class="keyword">if</span> (b[dq].son[i]) b[b[dq].son[i]].fail = b[b[dq].fail].son[i], q.<span class="built_in">push</span>(b[dq].son[i]);</span><br><span class="line">            <span class="keyword">else</span> b[dq].son[i] = b[b[dq].fail].son[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pd</span><span class="params">(<span class="type">int</span> dq)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; b[dq].bh.<span class="built_in">size</span>(); j++)</span><br><span class="line">        ++ans[b[dq].bh[j]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s);</span><br><span class="line">        <span class="type">int</span> dqn = <span class="built_in">strlen</span>(s), dq = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; dqn; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!b[dq].son[s[j] - <span class="string">&#x27;a&#x27;</span>]) b[dq].son[s[j] - <span class="string">&#x27;a&#x27;</span>] = ++cntb;</span><br><span class="line">            dq = b[dq].son[s[j] - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">            sn[++ns] = s[j];</span><br><span class="line">        &#125;</span><br><span class="line">        b[dq].bh.<span class="built_in">push_back</span>(i);</span><br><span class="line">        sn[++ns] = <span class="string">&#x27;a&#x27;</span> + <span class="number">26</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, dq = <span class="number">0</span>; i &lt; ns; i++) </span><br><span class="line">        <span class="keyword">if</span> (sn[i] &lt;= <span class="string">&#x27;z&#x27;</span>)</span><br><span class="line">            <span class="built_in">pd</span>(dq = b[dq].son[sn[i] - <span class="string">&#x27;a&#x27;</span>]);</span><br><span class="line">        <span class="keyword">else</span> dq = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>By 准备退役旅游的 Cansult</p>]]></content>
      
      
      <categories>
          
          <category> 翻车笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 翻车 </tag>
            
            <tag> AC自动机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>翻车笔记 [JSOI2007]文本生成器 [AC自动机, 翻车, 清奇脑回路]</title>
      <link href="/posts/28220.html"/>
      <url>/posts/28220.html</url>
      
        <content type="html"><![CDATA[<p>又忘了计数题算补集这回事了</p><p>感觉<code>trie</code>的好处就是一个节点代表一个串啊?</p><p><del>又及: wdnmd真都一个错误犯三次啊</del></p><span id="more"></span><h3 id="懵逼的-题目">懵逼的 题目</h3><p><ahref="https://lydsy.com/JudgeOnline/problem.php?id=1030">BZOJ</a></p><h3 id="扯淡的-题解">扯淡的 题解</h3><p>一开始想着是在<code>trie</code>上遍历然后算贡献云云然后发现这个容斥似乎有点反人类</p><p>然后抄题解第一句就是取补集</p><p>Emmmmm...</p><p><code>f[i][j]</code>代表当前生成第<code>i</code>位,匹配到了自动机的第<code>j</code>个点上 没有出现过已知单词的方案数</p><p>然后随便写写就好了</p><h3 id="沙茶的-代码">沙茶的 代码</h3><p>我构建<code>fail</code>的时候又㕛叒叕忘了把下一层<code>push</code>进去了</p><p>这是有多大仇...</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**************************************************************</span></span><br><span class="line"><span class="comment">    Problem: 1030</span></span><br><span class="line"><span class="comment">    User: Cansult</span></span><br><span class="line"><span class="comment">    Language: C++</span></span><br><span class="line"><span class="comment">    Result: Accepted</span></span><br><span class="line"><span class="comment">    Time:184 ms</span></span><br><span class="line"><span class="comment">    Memory:4460 kb</span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (6000 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXM (100 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXC (26)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Aufun (10007)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">    <span class="type">int</span> son[MAXC], fail;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; bh;</span><br><span class="line">&#125; b[MAXN];</span><br><span class="line"><span class="type">int</span> n, m, f[MAXM][MAXN], cntb, ans;</span><br><span class="line"><span class="type">char</span> s[MAXM];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; MAXC; i++) <span class="keyword">if</span> (b[<span class="number">0</span>].son[i]) q.<span class="built_in">push</span>(b[<span class="number">0</span>].son[i]);</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="type">int</span> dq = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; MAXC; i++) </span><br><span class="line">            <span class="keyword">if</span> (b[dq].son[i]) b[b[dq].son[i]].fail = b[b[dq].fail].son[i], q.<span class="built_in">push</span>(b[dq].son[i]);</span><br><span class="line">            <span class="keyword">else</span> b[dq].son[i] = b[b[dq].fail].son[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">mpow</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> re = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= b; i++) </span><br><span class="line">        re *= a, re %= Aufun;</span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">pd</span><span class="params">(<span class="type">int</span> dq)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = dq; i; i = b[i].fail)</span><br><span class="line">        <span class="keyword">if</span> (b[i].bh.<span class="built_in">size</span>())</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s);</span><br><span class="line">        <span class="type">int</span> dqn = <span class="built_in">strlen</span>(s), dq = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; dqn; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!b[dq].son[s[j] - <span class="string">&#x27;A&#x27;</span>]) b[dq].son[s[j] - <span class="string">&#x27;A&#x27;</span>] = ++cntb;</span><br><span class="line">            dq = b[dq].son[s[j] - <span class="string">&#x27;A&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        b[dq].bh.<span class="built_in">push_back</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    f[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= cntb; j++)</span><br><span class="line">            <span class="keyword">if</span> (f[i][j])</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; MAXC; k++)</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">pd</span>(b[j].son[k]))</span><br><span class="line">                        f[i + <span class="number">1</span>][b[j].son[k]] += f[i][j], f[i + <span class="number">1</span>][b[j].son[k]] %= Aufun;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= cntb; i++) ans += f[m][i], ans %= Aufun;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, ((<span class="built_in">mpow</span>(<span class="number">26</span>, m) - ans) % Aufun + Aufun) % Aufun);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>By 准备退役旅游的 Cansult</p>]]></content>
      
      
      <categories>
          
          <category> 翻车笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 翻车 </tag>
            
            <tag> 清奇脑回路 </tag>
            
            <tag> AC自动机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>翻车笔记 最近群里出现的口嗨题</title>
      <link href="/posts/3420.html"/>
      <url>/posts/3420.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>世界上最遥远的距离 不是生与死的距离而是我和你一起睡裙，你却秒了我不会的题</p></blockquote><span id="more"></span><h3 id="矩形加-矩形求和">矩形加 矩形求和</h3><p>一开始以为不可做… = =因为不会合并标记</p><p>后来发现在标记永久化之后 标记实际上不是打在外层的点上而是打在这个点的子树里</p><p>每次查询到外层的点的时候顺便查一下这个点挂着的子树然后加上贡献就好了</p><h3 id="ah的毒瘤题1">AH的毒瘤题1</h3><p>很搞笑 出题人都搞不懂题是啥意思(</p><p>然后还说这题可以开到<span class="math inline">\(\mathrm O(n)\)</span>(注意flag</p><p>给一个序列 每个元素有两种属性 <span class="math inline">\(a \in\mathbb{Z}, b\in [0, 1] ​\)</span>, 要求对每一个子区间<spanclass="math inline">\([le,ri]\)</span>, 都求出<spanclass="math inline">\(\min(le, ri)\cdot \sum_{i = le}^{ri} [b_i = 0]\cdot \sum_{i = le}^{ri} [b_i = 1]​\)</span></p><p>首先很显然的是要对每一个数 都把他当做最小值 然后扩出一个区间<spanclass="math inline">\([le,ri]\)</span></p><p>设<span class="math inline">\(f(i, j) = \sum_{i = le}^{ri} [b_i = 0]\cdot \sum_{i = le}^{ri} [b_i = 1]\)</span>, 我们就要求出<spanclass="math inline">\(\sum_{i \in [le, id]} \sum_{j \in [id, ri]} f(i,j)\)</span></p><p>一开始我以为这个玩意是个矩形嘛 他肯定木得办法一维的求啊然后就被广东的高一大爷教育了 <span class="math display">\[\begin{aligned} &amp;f(i, j) = (s0_j - s0_i) (s1_j - s1_i) \\&amp;\sum_{i \in [le, id]} \sum_{j \in [id, ri]} f(i, j) \\ &amp;\sum_{i\in [le, id]} \sum_{j \in [id, ri]} (s0_j - s0_i)  (s1_j - s1_i) \\&amp;\sum_{i \in [le, id]} \sum_{j \in [id, ri]} s0_j  s1_j - s0_i  s1_j- s0_j  s1_i - s1_js0_i \end{aligned}\]</span></p><p>这么一看这题还真能<span class="math inline">\(\mathrmO(n)\)</span>的做…</p><h3 id="神仙学弟的神仙题">神仙学弟的神仙题</h3><p>要求<span class="math inline">\(\mathrmO(n)\)</span>左右的预处理出每个点作为次大值的最长区间</p><p>居然炸出来SDOI出题人了...<del>你看就不像我等小透明就天天被踢</del></p><p>首先用单调栈求出来左边和右边比这个数大的位置 然后用二分主席树(?)</p><p>By 准备退役旅游的 Cansult</p>]]></content>
      
      
      <categories>
          
          <category> 翻车笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 清奇脑回路 </tag>
            
            <tag> 杂题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>翻车笔记 种树 + [POJ Challenge]生日礼物 + [CTSC2007]数据备份Backup [贪心, 清奇脑回路, 翻车] + [NOI2010]超级钢琴</title>
      <link href="/posts/18992.html"/>
      <url>/posts/18992.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>Siehst, Vater, du den Erlkönig nicht?</p><p>Den Erlkönig mit Kron' und Schweif?</p></blockquote><span id="more"></span><h3 id="懵逼的-题目">懵逼的 题目</h3><p><ahref="https://lydsy.com/JudgeOnline/problem.php?id=1150">[CTSC2007]数据备份Backup</a></p><p><ahref="https://lydsy.com/JudgeOnline/problem.php?id=2151">种树</a></p><p><a href="https://lydsy.com/JudgeOnline/problem.php?id=2288">[POJChallenge]生日礼物</a></p><h3 id="扯淡的-题解">扯淡的 题解</h3><p>我头一次感觉到智商是我做题(抄题解)的瓶颈(遭了 是脑死亡的感觉) = =</p><p>ZKY学长让我们做的种树 不会 遂抄黄学长博客 发现黄学长的做题顺序是<span class="math inline">\(2288 \to 1150 \to2151\)</span>可是为什么我觉着<spanclass="math inline">\(2288\)</span>明明是最难的呢...<del>当然你先做完最难的就可以秒后面的题了</del></p><p>三个题的思路都是用一个堆记录当前的所有决策 越优的决策越靠近堆顶,每次做决策就是取堆顶元素 然后取出堆顶元素之后 再考虑怎么处理影响</p><h4 id="section">1150</h4><p>就是选出<span class="math inline">\(k\)</span>个间隔 让他们的总和最小任意两个间隔不能共享一个点</p><p>把间隔化成点 就是选<span class="math inline">\(k\)</span>个不相邻的点让他们的点权和最小</p><p>所以我们每次取出堆顶元素的时候 就要把[堆顶的两边点权和 -堆顶点权]加入到堆里供"不时之需"</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**************************************************************</span></span><br><span class="line"><span class="comment">    Problem: 1150</span></span><br><span class="line"><span class="comment">    User: Cansult</span></span><br><span class="line"><span class="comment">    Language: C++</span></span><br><span class="line"><span class="comment">    Result: Accepted</span></span><br><span class="line"><span class="comment">    Time:640 ms</span></span><br><span class="line"><span class="comment">    Memory:10032 kb</span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF ((MAXN &lt;&lt; 1) - 1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LINF (100000000000000000ll)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (100000 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int LL </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">cmp</span> &#123;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">operator</span> <span class="params">()</span> <span class="params">(<span class="type">const</span> pii x, <span class="type">const</span> pii y)</span> </span>&#123; <span class="keyword">return</span> x.first &gt; y.first; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> n, m, a[MAXN], nex[MAXN &lt;&lt; <span class="number">1</span>], pre[MAXN &lt;&lt; <span class="number">1</span>];</span><br><span class="line">LL ta[MAXN &lt;&lt; <span class="number">1</span>], ans;</span><br><span class="line"><span class="type">bool</span> del[MAXN &lt;&lt; <span class="number">1</span>];</span><br><span class="line">priority_queue&lt;pii, vector&lt;pii&gt;, cmp&gt; q;</span><br><span class="line"><span class="built_in">main</span>() &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;a[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;a[i]), ta[++ta[<span class="number">0</span>]] = a[i] - a[i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= ta[<span class="number">0</span>]; i++) pre[i] = i - <span class="number">1</span>, nex[i] = i + <span class="number">1</span>, q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(ta[i], i));</span><br><span class="line">    n = ta[<span class="number">0</span>];</span><br><span class="line">    pre[<span class="number">1</span>] = nex[n] = INF, pre[INF] = n, nex[INF] = INF;</span><br><span class="line">    ta[INF] = LINF;</span><br><span class="line">    <span class="keyword">while</span> (m) &#123;</span><br><span class="line">        <span class="keyword">while</span> (del[q.<span class="built_in">top</span>().second]) q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="type">int</span> dqz = q.<span class="built_in">top</span>().first, dqx = q.<span class="built_in">top</span>().second;</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        ans += dqz;</span><br><span class="line">        ta[++ta[<span class="number">0</span>]] = ta[pre[dqx]] + ta[nex[dqx]] - dqz;</span><br><span class="line">        del[dqx] = del[pre[dqx]] = del[nex[dqx]] = <span class="literal">true</span>;</span><br><span class="line">        nex[ta[<span class="number">0</span>]] = nex[nex[dqx]], pre[ta[<span class="number">0</span>]] = pre[pre[dqx]];</span><br><span class="line">        pre[nex[ta[<span class="number">0</span>]]] = ta[<span class="number">0</span>], nex[pre[ta[<span class="number">0</span>]]] = ta[<span class="number">0</span>];</span><br><span class="line">        q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(ta[ta[<span class="number">0</span>]], ta[<span class="number">0</span>]));</span><br><span class="line">        --m;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="section-1">2151</h4><p>和上面的问题差不多 无非就是转成了环形 并且求的是点权和最大</p><p>双向链表的边界处理一下再把<code>cmp</code>函数的大于号方向换一下就行了</p><p><del>顺便提一下当时zky学长讲这题的时候被烜爷爷用DP+FFT秒了</del></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**************************************************************</span></span><br><span class="line"><span class="comment">    Problem: 2151</span></span><br><span class="line"><span class="comment">    User: Cansult</span></span><br><span class="line"><span class="comment">    Language: C++</span></span><br><span class="line"><span class="comment">    Result: Accepted</span></span><br><span class="line"><span class="comment">    Time:472 ms</span></span><br><span class="line"><span class="comment">    Memory:9448 kb</span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (200000 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">cmp</span> &#123;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">operator</span> <span class="params">()</span> <span class="params">(<span class="type">const</span> pii x, <span class="type">const</span> pii y)</span> </span>&#123; <span class="keyword">return</span> x.first &lt; y.first; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> n, m, ta[MAXN &lt;&lt; <span class="number">1</span>], pre[MAXN &lt;&lt; <span class="number">1</span>], nex[MAXN &lt;&lt; <span class="number">1</span>], ans;</span><br><span class="line"><span class="type">bool</span> del[MAXN &lt;&lt; <span class="number">1</span>];</span><br><span class="line">priority_queue&lt;pii, vector&lt;pii&gt;, cmp&gt; q;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">if</span> (m &gt; n / <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Error!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;ta[i]), pre[i] = i - <span class="number">1</span>, nex[i] = i + <span class="number">1</span>, q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(ta[i], i));</span><br><span class="line">    pre[<span class="number">1</span>] = n, nex[n] = <span class="number">1</span>;</span><br><span class="line">    ta[<span class="number">0</span>] = n; <span class="comment">// 这个地方忘记没有用过ta[0]就忘给他赋值了 导致后面错了一片</span></span><br><span class="line">    <span class="keyword">while</span> (m) &#123;</span><br><span class="line">        <span class="keyword">while</span> (q.<span class="built_in">size</span>() &amp;&amp; del[q.<span class="built_in">top</span>().second]) q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="type">int</span> dqz = q.<span class="built_in">top</span>().first, dqx = q.<span class="built_in">top</span>().second;</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        ans += dqz;</span><br><span class="line">        ta[++ta[<span class="number">0</span>]] = -dqz + ta[pre[dqx]] + ta[nex[dqx]];</span><br><span class="line">        del[dqx] = del[pre[dqx]] = del[nex[dqx]] = <span class="literal">true</span>;</span><br><span class="line">        pre[ta[<span class="number">0</span>]] = pre[pre[dqx]], nex[ta[<span class="number">0</span>]] = nex[nex[dqx]];</span><br><span class="line">        nex[pre[ta[<span class="number">0</span>]]] = ta[<span class="number">0</span>], pre[nex[ta[<span class="number">0</span>]]] = ta[<span class="number">0</span>];</span><br><span class="line">        q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(ta[ta[<span class="number">0</span>]], ta[<span class="number">0</span>]));</span><br><span class="line">        --m;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="section-2">2288</h4><p>这题绝对难度不是一个档次的好吧... = =</p><p>首先 我们要把整个序列合并 让同号的区间变成一个点(把他们的点权加起来)把<code>0</code>都舍去(对没影响)</p><p>然后我们发现这个序列现在变得正负交错了考虑如果正数的个数小于等于<spanclass="math inline">\(m\)</span>就不用做了直接输出他们的和就可以了现在的情况是正数的个数大于<span class="math inline">\(m\)</span></p><p>我们就有了两个决策:</p><ol type="1"><li><p>扔掉几个正数</p></li><li><p>加入一些负数 让这个负数的两边的正数连成一个</p></li></ol><p>这两个决策都会让我们选的数的个数减少<spanclass="math inline">\(1\)</span></p><p>考虑怎么表示出这两个决策和他们对答案的影响<del>反正我想不出来</del>:把所有数加到堆里 按照绝对值从小到大排序</p><p>是不是很妙?</p><p>对于正数 绝对值小就代表对答案的贡献小 可以扔掉ta</p><p>对于负数 绝对值小就代表用这个负数把两边的正数连起来"损失"最小于是就用这个负数来连接ta两边的正数</p><p>当然还有喜闻乐见的边界问题边界上的负数是不能选的(选了也不会减少答案选择的块数) (当然正数是可以选的(就相当于扔掉了))</p><p>说道选数 选出来我们要干什么呢我们知道了负数是用来连接旁边的两块正数的我们可以直接把这个负数和两边的正数合一起放到堆里</p><p>那正数呢 其实正数也是连接两边的两块负数就想到与把两边的负数和这个正数合在一起变成一大段负数(为什么是负数呢因为这个正数的绝对值比旁边的两个负数都要小嘛)</p><p>还有就是选一个数对答案的影响 正数就是直接减去这个正数的值负数就是加上负数的值 然后就喜闻乐见的可以统一为减去堆顶的绝对值</p><p>到这就算做完了反正我觉得考场上想出这种做法的人...大概已经可以归为神了</p><p><del><ahref="https://a-failure.github.io/2018/10/26/BZOJ2288-POJ-Challenge-%E7%94%9F%E6%97%A5%E7%A4%BC%E7%89%A9/">当然gayge给我安利了一天他的线段树做法(虽然维护了18个值就跟一坨狗屎一样吧)(还有我很想吐槽他背景那个哒哒哒冒蓝火的加特林怎么办)</a></del></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**************************************************************</span></span><br><span class="line"><span class="comment">    Problem: 2288</span></span><br><span class="line"><span class="comment">    User: Cansult</span></span><br><span class="line"><span class="comment">    Language: C++</span></span><br><span class="line"><span class="comment">    Result: Accepted</span></span><br><span class="line"><span class="comment">    Time:124 ms</span></span><br><span class="line"><span class="comment">    Memory:4996 kb</span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (100000 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF ((MAXN &lt;&lt; 1) - 1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> abs(x) (((x) &gt; 0) ? (x) : (-(x)))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">cmp</span> &#123;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">operator</span> <span class="params">()</span> <span class="params">(<span class="type">const</span> pii x, <span class="type">const</span> pii y)</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">abs</span>(x.first) &gt; <span class="built_in">abs</span>(y.first); &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> n, m, a[MAXN], ta[MAXN &lt;&lt; <span class="number">1</span>], pre[MAXN &lt;&lt; <span class="number">1</span>], nex[MAXN &lt;&lt; <span class="number">1</span>], ans, cntz;</span><br><span class="line"><span class="type">bool</span> del[MAXN &lt;&lt; <span class="number">1</span>];</span><br><span class="line">priority_queue&lt;pii, vector&lt;pii&gt;, cmp&gt; q;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[++a[<span class="number">0</span>]]), a[<span class="number">0</span>] -= (!a[a[<span class="number">0</span>]]); <span class="comment">// 刚刚忘记处理有0的情况</span></span><br><span class="line">    n = a[<span class="number">0</span>];</span><br><span class="line">    <span class="type">int</span> dq = a[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">if</span> (a[i] * a[i - <span class="number">1</span>] &gt; <span class="number">0</span>) dq += a[i];</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (dq &gt; <span class="number">0</span>) ans += dq, ++cntz;</span><br><span class="line">            <span class="keyword">if</span> (dq) ta[++ta[<span class="number">0</span>]] = dq;</span><br><span class="line">            dq = a[i];</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">if</span> (dq &gt; <span class="number">0</span>) ans += dq, ++cntz;</span><br><span class="line">    <span class="keyword">if</span> (dq) ta[++ta[<span class="number">0</span>]] = dq;</span><br><span class="line">    <span class="keyword">if</span> (cntz &lt;= m) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, ans);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    n = ta[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) pre[i] = i - <span class="number">1</span>, nex[i] = i + <span class="number">1</span>, q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(ta[i], i));</span><br><span class="line">    pre[<span class="number">1</span>] = pre[<span class="number">0</span>] = <span class="number">0</span>, nex[n] = nex[INF] = INF;</span><br><span class="line">    pre[INF] = n, nex[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (cntz &gt; m) &#123;</span><br><span class="line">        <span class="keyword">while</span> (del[q.<span class="built_in">top</span>().second]) q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="type">int</span> dqz = q.<span class="built_in">top</span>().first, dqx = q.<span class="built_in">top</span>().second;</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (pre[dqx] == <span class="number">0</span> || nex[dqx] == INF) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dqz &gt; <span class="number">0</span>) </span><br><span class="line">                ans -= dqz, --cntz; <span class="comment">// cntz的修改写到if外面了</span></span><br><span class="line">            del[dqx] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (pre[dqx]) nex[pre[dqx]] = INF;</span><br><span class="line">            <span class="keyword">else</span> pre[nex[dqx]] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ans -= <span class="built_in">abs</span>(dqz);</span><br><span class="line">        ta[++ta[<span class="number">0</span>]] = dqz + ta[pre[dqx]] + ta[nex[dqx]];</span><br><span class="line">        pre[ta[<span class="number">0</span>]] = pre[pre[dqx]], nex[ta[<span class="number">0</span>]] = nex[nex[dqx]];</span><br><span class="line">        nex[pre[ta[<span class="number">0</span>]]] = ta[<span class="number">0</span>], pre[nex[ta[<span class="number">0</span>]]] = ta[<span class="number">0</span>];</span><br><span class="line">        del[dqx] = del[pre[dqx]] = del[nex[dqx]] = <span class="literal">true</span>;</span><br><span class="line">        q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(ta[ta[<span class="number">0</span>]], ta[<span class="number">0</span>]));</span><br><span class="line">        --cntz;  <span class="comment">// 这个地方一不小心减了两遍</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>By 准备退役旅游的 Cansult</p>]]></content>
      
      
      <categories>
          
          <category> 翻车笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 翻车 </tag>
            
            <tag> 清奇脑回路 </tag>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>翻车笔记 ZKY 学长的杂题2 [杂题, 清奇脑回路]</title>
      <link href="/posts/37019.html"/>
      <url>/posts/37019.html</url>
      
        <content type="html"><![CDATA[<p>第一篇文章莫名就1w字了</p><p>辣鸡Typora打开已经有点卡了...于是新开一个...</p><p>计数器:</p><h2 id="section"><font color=#b11d23>5</font></h2><span id="more"></span><h3 id="种树"><ahref="https://lydsy.com/JudgeOnline/problem.php?id=2151">种树</a></h3><p><a href="https://cansult.ga/18992.html">这类问题的合集</a></p><h3 id="noi2010超级钢琴"><ahref="https://lydsy.com/JudgeOnline/problem.php?id=2006">[NOI2010]超级钢琴</a></h3><p>这个题和上一个一脉相承啊... = =</p><p>这个限制不用合并区间 也就不用搞链表了 挺舒服的</p><p>然而写着写着发现还有区间重复的问题... = =</p><p>去参拜了一发题解才发现还要记录当前的右端点是从哪个区间里选出来的然后就不会重复了... = =</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**************************************************************</span></span><br><span class="line"><span class="comment">    Problem: 2006</span></span><br><span class="line"><span class="comment">    User: Cansult</span></span><br><span class="line"><span class="comment">    Language: C++</span></span><br><span class="line"><span class="comment">    Result: Accepted</span></span><br><span class="line"><span class="comment">    Time:4484 ms</span></span><br><span class="line"><span class="comment">    Memory:82800 kb</span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int LL </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (500000 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LS(dq) ((dq) &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RS(dq) (LS(dq) | 1)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">    <span class="type">int</span> le, ri, zh;</span><br><span class="line">&#125; b[MAXN &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">num</span> &#123;</span><br><span class="line">    <span class="type">int</span> le, ri, zh, lil, lir;</span><br><span class="line">    <span class="built_in">num</span>() &#123;&#125;</span><br><span class="line">    <span class="built_in">num</span>(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> z, <span class="type">int</span> ll, <span class="type">int</span> rr): <span class="built_in">le</span>(l), <span class="built_in">ri</span>(r), <span class="built_in">zh</span>(z), <span class="built_in">lil</span>(ll), <span class="built_in">lir</span>(rr) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">cmp</span> &#123;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">operator</span> <span class="params">()</span> <span class="params">(<span class="type">const</span> num x, <span class="type">const</span> num y)</span> </span>&#123; <span class="keyword">return</span> x.zh &lt; y.zh; &#125;</span><br><span class="line">&#125;; </span><br><span class="line"><span class="type">int</span> n, k, L, R, fr[MAXN], ans;</span><br><span class="line">priority_queue&lt;num, vector&lt;num&gt;, cmp&gt; q;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">js</span><span class="params">(<span class="type">int</span> dq, <span class="type">int</span> le, <span class="type">int</span> ri)</span> </span>&#123;</span><br><span class="line">    b[dq].le = le, b[dq].ri = ri, b[dq].zh = le;</span><br><span class="line">    <span class="keyword">if</span> (le == ri) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="type">int</span> mi = (le + ri) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">js</span>(<span class="built_in">LS</span>(dq), le, mi), <span class="built_in">js</span>(<span class="built_in">RS</span>(dq), mi + <span class="number">1</span>, ri);</span><br><span class="line">    b[dq].zh = (fr[b[<span class="built_in">LS</span>(dq)].zh] &gt; fr[b[<span class="built_in">RS</span>(dq)].zh]) ? b[<span class="built_in">LS</span>(dq)].zh : b[<span class="built_in">RS</span>(dq)].zh;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cx</span><span class="params">(<span class="type">int</span> dq, <span class="type">int</span> le, <span class="type">int</span> ri)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (le &gt; ri || le &lt; <span class="number">1</span> || ri &gt; n) <span class="keyword">return</span> n + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (b[dq].le == le &amp;&amp; b[dq].ri == ri) <span class="keyword">return</span> b[dq].zh;</span><br><span class="line">    <span class="type">int</span> mi = (b[dq].le + b[dq].ri) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (le &gt; mi) <span class="keyword">return</span> <span class="built_in">cx</span>(<span class="built_in">RS</span>(dq), le, ri);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (ri &lt;= mi) <span class="keyword">return</span> <span class="built_in">cx</span>(<span class="built_in">LS</span>(dq), le, ri);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">int</span> ls = <span class="built_in">cx</span>(<span class="built_in">LS</span>(dq), le, mi), rs = <span class="built_in">cx</span>(<span class="built_in">RS</span>(dq), mi + <span class="number">1</span>, ri);</span><br><span class="line">        <span class="keyword">return</span> (fr[ls] &gt; fr[rs]) ? ls : rs;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">main</span>() &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld%lld&quot;</span>, &amp;n, &amp;k, &amp;L, &amp;R);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, dqx; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;dqx), fr[i] = fr[i - <span class="number">1</span>] + dqx;</span><br><span class="line">    <span class="built_in">js</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, maxi; i + L - <span class="number">1</span> &lt;= n; i++) maxi = <span class="built_in">cx</span>(<span class="number">1</span>, i + L - <span class="number">1</span>, <span class="built_in">min</span>(n, i + R - <span class="number">1</span>)), q.<span class="built_in">push</span>(<span class="built_in">num</span>(i, maxi, fr[maxi] - fr[i - <span class="number">1</span>], i + L - <span class="number">1</span>, i + R - <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, maxi; i &lt;= k; i++) &#123;</span><br><span class="line">        num dq = q.<span class="built_in">top</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        ans += dq.zh;</span><br><span class="line">        maxi = <span class="built_in">cx</span>(<span class="number">1</span>, <span class="built_in">max</span>(dq.lil, dq.le + L - <span class="number">1</span>), <span class="built_in">min</span>(dq.lir, dq.ri - <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">if</span> (maxi &gt;= <span class="number">1</span> &amp;&amp; maxi &lt;= n) q.<span class="built_in">push</span>(<span class="built_in">num</span>(dq.le, maxi, fr[maxi] - fr[dq.le - <span class="number">1</span>], <span class="built_in">max</span>(dq.lil, dq.le + L - <span class="number">1</span>), <span class="built_in">min</span>(dq.lir, dq.ri - <span class="number">1</span>)));</span><br><span class="line">        maxi = <span class="built_in">cx</span>(<span class="number">1</span>, <span class="built_in">max</span>(dq.lil, dq.ri + <span class="number">1</span>), <span class="built_in">min</span>(n, <span class="built_in">min</span>(dq.lir, dq.le + R - <span class="number">1</span>)));</span><br><span class="line">        <span class="keyword">if</span> (maxi &gt;= <span class="number">1</span> &amp;&amp; maxi &lt;= n) q.<span class="built_in">push</span>(<span class="built_in">num</span>(dq.le, maxi, fr[maxi] - fr[dq.le - <span class="number">1</span>], <span class="built_in">max</span>(dq.lil, dq.ri + <span class="number">1</span>), <span class="built_in">min</span>(dq.lir, dq.le + R - <span class="number">1</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="noi2014动物园"><ahref="https://lydsy.com/JudgeOnline/problem.php?id=3670">[Noi2014]动物园</a></h3><p>emmmm...一开始看错题了...以为要求最长的不超过中间的border...</p><p>后来发现是要求个数... = = 感觉用树状数组做肥肠显然啊</p><p>感觉我的kmp似乎要重新学习一个了... = =</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**************************************************************</span></span><br><span class="line"><span class="comment">    Problem: 3670</span></span><br><span class="line"><span class="comment">    User: Cansult</span></span><br><span class="line"><span class="comment">    Language: C++</span></span><br><span class="line"><span class="comment">    Result: Accepted</span></span><br><span class="line"><span class="comment">    Time:3512 ms</span></span><br><span class="line"><span class="comment">    Memory:93596 kb</span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(i) ((i) &amp; (-(i)))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (1000000 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Aufun (1000000000 + 7)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edg</span> &#123;</span><br><span class="line">    <span class="type">int</span> from, to, next;</span><br><span class="line">&#125; tb[MAXN &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> g[MAXN], cntb, b[MAXN], n, nex[MAXN];</span><br><span class="line">LL ans;</span><br><span class="line"><span class="type">char</span> s[MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">xg</span><span class="params">(<span class="type">int</span> wz, <span class="type">int</span> zh)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!wz) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = wz; i &lt;= n; i += <span class="built_in">lowbit</span>(i)) b[i] += zh;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cx</span><span class="params">(<span class="type">int</span> wz)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> re = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = wz; i; i -= <span class="built_in">lowbit</span>(i)) re += b[i];</span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">adn</span><span class="params">(<span class="type">int</span> from, <span class="type">int</span> to)</span> </span>&#123;</span><br><span class="line">    tb[++cntb].next = g[from];</span><br><span class="line">    tb[cntb].from = from, tb[cntb].to = to;</span><br><span class="line">    g[from] = cntb;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> dq, <span class="type">int</span> fa)</span> </span>&#123;</span><br><span class="line">    ans = ans * (<span class="built_in">cx</span>((dq) / <span class="number">2</span>) + <span class="number">1</span>) % Aufun;</span><br><span class="line">    <span class="built_in">xg</span>(dq, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = g[dq]; i; i = tb[i].next) </span><br><span class="line">        <span class="keyword">if</span> (tb[i].to != fa)</span><br><span class="line">            <span class="built_in">dfs</span>(tb[i].to, dq);</span><br><span class="line">    <span class="built_in">xg</span>(dq, <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(g, <span class="number">0</span>, <span class="built_in">sizeof</span>(g));</span><br><span class="line">    <span class="built_in">memset</span>(b, <span class="number">0</span>, <span class="built_in">sizeof</span>(b));</span><br><span class="line">    <span class="built_in">memset</span>(nex, <span class="number">0</span>, <span class="built_in">sizeof</span>(nex));</span><br><span class="line">    cntb = <span class="number">0</span>;</span><br><span class="line">    n = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">adn</span>(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>, j = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (j &amp;&amp; s[j + <span class="number">1</span>] != s[i]) j = nex[j];</span><br><span class="line">        nex[i] = j += (s[i] == s[j + <span class="number">1</span>]);</span><br><span class="line">        <span class="built_in">adn</span>(nex[i], i);</span><br><span class="line">    &#125;</span><br><span class="line">    ans = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s + <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我怎么感觉<span class="math inline">\(\mathrmO(n)\)</span>的那个递推和这个差不多呢 = = 这复杂度真的是<spanclass="math inline">\(\mathrm O(n)\)</span>的吗...</p><h3 id="poi2000病毒"><ahref="https://lydsy.com/JudgeOnline/problem.php?id=2938">[Poi2000]病毒</a></h3><p>复(学)习字符串...</p><p>trie图上找环...找到了就说明可以一直匹配...</p><p>环上的任意节点跳<code>fail</code>到<code>root</code>都不能是结尾(以病毒串为后缀)</p><p>发现我不会找环了都...</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**************************************************************</span></span><br><span class="line"><span class="comment">    Problem: 2938</span></span><br><span class="line"><span class="comment">    User: Cansult</span></span><br><span class="line"><span class="comment">    Language: C++</span></span><br><span class="line"><span class="comment">    Result: Accepted</span></span><br><span class="line"><span class="comment">    Time:96 ms</span></span><br><span class="line"><span class="comment">    Memory:1900 kb</span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (30000 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXC (2)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">    <span class="type">int</span> fail, son[MAXC], isend;</span><br><span class="line">&#125; b[MAXN];</span><br><span class="line"><span class="type">int</span> cntb, n;</span><br><span class="line"><span class="type">bool</span> vis[MAXN], inq[MAXN];</span><br><span class="line"><span class="type">char</span> s[MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; MAXC; i++) </span><br><span class="line">        <span class="keyword">if</span> (b[<span class="number">0</span>].son[i])</span><br><span class="line">            q.<span class="built_in">push</span>(b[<span class="number">0</span>].son[i]);</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="type">int</span> dq = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; MAXC; i++)</span><br><span class="line">            <span class="keyword">if</span> (b[dq].son[i]) b[b[dq].son[i]].fail = b[b[dq].fail].son[i], q.<span class="built_in">push</span>(b[dq].son[i]);</span><br><span class="line">            <span class="keyword">else</span> b[dq].son[i] = b[b[dq].fail].son[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">pd</span><span class="params">(<span class="type">int</span> dq)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = dq; i; i = b[i].fail)</span><br><span class="line">        <span class="keyword">if</span> (b[i].isend)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> dq)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (inq[dq]) &#123; <span class="comment">// 必须要是从这个点走 又回到自己才能叫环(排除横叉边)</span></span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;TAK&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    inq[dq] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; MAXC; i++) </span><br><span class="line">        <span class="keyword">if</span> (!vis[b[dq].son[i]] &amp;&amp; <span class="built_in">pd</span>(b[dq].son[i])) <span class="comment">// 这个地方要求只要判断有没有环 所以不用再顺着横叉边去找一遍(如果有早就退出了)</span></span><br><span class="line">            <span class="built_in">dfs</span>(b[dq].son[i]);</span><br><span class="line">    inq[dq] = <span class="literal">false</span>;</span><br><span class="line">    vis[dq] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s);</span><br><span class="line">        <span class="type">int</span> dqn = <span class="built_in">strlen</span>(s), dq = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; dqn; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!b[dq].son[s[i] - <span class="string">&#x27;0&#x27;</span>]) b[dq].son[s[i] - <span class="string">&#x27;0&#x27;</span>] = ++cntb;</span><br><span class="line">            dq = b[dq].son[s[i] - <span class="string">&#x27;0&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        ++b[dq].isend;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;NIE&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="noi2011阿狸的打字机"><ahref="https://lydsy.com/JudgeOnline/problem.php?id=2434">[Noi2011]阿狸的打字机</a></h3><p>是我太菜了还是这题太神了...</p><p>首先明确一下一个串的子串就是这个串在<code>trie</code>的那条<strong>路径</strong>上的每个节点上跳<code>fail</code>到根, 途中遇到的每个结尾就是这个串的子串</p><p>考虑建一个<code>fail</code>树, 然后考虑从<spanclass="math inline">\(x\)</span>出发 如何得出答案: 在这个节点的子树里有多少个点是<span class="math inline">\(y​\)</span>的节点</p><p>我们就可以遍历<code>trie</code>树,把当前的点在<code>fail</code>树的<code>dfs</code>序上的位置<code>+1</code>,然后每到达一个终点, 就枚举所有以这个串为<spanclass="math inline">\(y\)</span>的询问, 这时<spanclass="math inline">\(x\)</span>的子树和就是这个询问的答案</p><p>最后...我又把编号搞乱了...</p><p>又及: 我在想这题的时候...yy了一个东西 然后似乎发现 这东西叫dsu ontree... = =为什么当时学长讲课的时候我连这玩意要干啥都没听懂...<del>此题最大收获在于让我学会了dsuon tree</del></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**************************************************************</span></span><br><span class="line"><span class="comment">    Problem: 2434</span></span><br><span class="line"><span class="comment">    User: Cansult</span></span><br><span class="line"><span class="comment">    Language: C++</span></span><br><span class="line"><span class="comment">    Result: Accepted</span></span><br><span class="line"><span class="comment">    Time:764 ms</span></span><br><span class="line"><span class="comment">    Memory:27244 kb</span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (100000 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXC (26)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(i) ((i) &amp; (-(i)))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">    <span class="type">int</span> son[MAXC], fail, fa;</span><br><span class="line">    <span class="type">bool</span> isnt[MAXC];</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; bh;</span><br><span class="line">&#125; b[MAXN];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edg</span> &#123;</span><br><span class="line">    <span class="type">int</span> from, to, next;</span><br><span class="line">&#125; tb[MAXN &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> cntb, g[MAXN], cntt, n, cntbh, a[MAXN], cnta, ans[MAXN], q, fuck[MAXN];</span><br><span class="line">pii be[MAXN];</span><br><span class="line">vector&lt;pii&gt; que[MAXN];</span><br><span class="line"><span class="type">char</span> s[MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">xg</span><span class="params">(<span class="type">int</span> wz, <span class="type">int</span> zh)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = wz; i &lt;= cntb + <span class="number">1</span>; i += <span class="built_in">lowbit</span>(i)) a[i] += zh;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cx</span><span class="params">(<span class="type">int</span> le, <span class="type">int</span> ri)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> re = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = ri; i; i -= <span class="built_in">lowbit</span>(i)) re += a[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = le - <span class="number">1</span>; i; i -= <span class="built_in">lowbit</span>(i)) re -= a[i];</span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">adn</span><span class="params">(<span class="type">int</span> from, <span class="type">int</span> to)</span> </span>&#123;</span><br><span class="line">    tb[++cntt].next = g[from];</span><br><span class="line">    tb[cntt].from = from, tb[cntt].to = to;</span><br><span class="line">    g[from] = cntt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; MAXC; i++)</span><br><span class="line">        <span class="keyword">if</span> (b[<span class="number">0</span>].son[i]) q.<span class="built_in">push</span>(b[<span class="number">0</span>].son[i]);</span><br><span class="line">        <span class="keyword">else</span> b[<span class="number">0</span>].isnt[i] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="type">int</span> dq = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; MAXC; i++) </span><br><span class="line">            <span class="keyword">if</span> (b[dq].son[i]) b[b[dq].son[i]].fail = b[b[dq].fail].son[i], q.<span class="built_in">push</span>(b[dq].son[i]);</span><br><span class="line">            <span class="keyword">else</span> b[dq].isnt[i] = <span class="literal">true</span>, b[dq].son[i] = b[b[dq].fail].son[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= cntb; i++)</span><br><span class="line">        <span class="built_in">adn</span>(b[i].fail, i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfsonfail</span><span class="params">(<span class="type">int</span> dq)</span> </span>&#123;</span><br><span class="line">    be[dq].first = ++cnta;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = g[dq]; i; i = tb[i].next)</span><br><span class="line">        <span class="built_in">dfsonfail</span>(tb[i].to);</span><br><span class="line">    be[dq].second = cnta;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfsontrie</span><span class="params">(<span class="type">int</span> dq)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">xg</span>(be[dq].first, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; b[dq].bh.<span class="built_in">size</span>(); i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; que[b[dq].bh[i]].<span class="built_in">size</span>(); j++)</span><br><span class="line">            ans[que[b[dq].bh[i]][j].second] += <span class="built_in">cx</span>(be[que[b[dq].bh[i]][j].first].first, be[que[b[dq].bh[i]][j].first].second);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; MAXC; i++)</span><br><span class="line">        <span class="keyword">if</span> (!b[dq].isnt[i])</span><br><span class="line">            <span class="built_in">dfsontrie</span>(b[dq].son[i]);</span><br><span class="line">    <span class="built_in">xg</span>(be[dq].first, <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s);</span><br><span class="line">    n = <span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, dq = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i] == <span class="string">&#x27;B&#x27;</span>) dq = b[dq].fa;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (s[i] == <span class="string">&#x27;P&#x27;</span>) b[dq].bh.<span class="built_in">push_back</span>(++cntbh), fuck[cntbh] = dq;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!b[dq].son[s[i] - <span class="string">&#x27;a&#x27;</span>]) b[b[dq].son[s[i] - <span class="string">&#x27;a&#x27;</span>] = ++cntb].fa = dq;</span><br><span class="line">            dq = b[dq].son[s[i] - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;q);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, srx, sry; i &lt;= q; i++) </span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;srx, &amp;sry), que[sry].<span class="built_in">push_back</span>(<span class="built_in">make_pair</span>(fuck[srx], i));</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="built_in">dfsonfail</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">dfsontrie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= q; i++) </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>By 准备退役旅游的 Cansult</p>]]></content>
      
      
      <categories>
          
          <category> 翻车笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 清奇脑回路 </tag>
            
            <tag> 杂题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>翻车笔记 ProjectEuler 总结</title>
      <link href="/posts/55261.html"/>
      <url>/posts/55261.html</url>
      
        <content type="html"><![CDATA[<p>计数器:</p><h2 id="section"><font color=#b11d23>1</font></h2><span id="more"></span><ol type="1"><li>求1000以内所有可以被3或5整除的数的和: 求出3的倍数和 和5的倍数和之后就一直在考虑容斥 没想到直接减去15的倍数和就可以了</li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> 翻车笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 清奇脑回路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>翻车笔记 ZKY 学长的杂题 [杂题, 清奇脑回路]</title>
      <link href="/posts/31177.html"/>
      <url>/posts/31177.html</url>
      
        <content type="html"><![CDATA[<p>给大家拜个晚年 祝大家狗年快乐</p><p>计数器:</p><h2 id="section"><font color=#b11d23>19</font></h2><span id="more"></span><p>上学了...还是学校舒服...里面个个都是人才...说话又好听...</p><p>zky学长来讲课啦! zky学长好帅啊!</p><h3 id="简单题"><ahref="https://lydsy.com/JudgeOnline/problem.php?id=3687">简单题</a></h3><p><code>bitset</code>优化一下背包就行了, 比手写的好用多了...</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**************************************************************</span></span><br><span class="line"><span class="comment">    Problem: 3687</span></span><br><span class="line"><span class="comment">    User: Cansult</span></span><br><span class="line"><span class="comment">    Language: C++</span></span><br><span class="line"><span class="comment">    Result: Accepted</span></span><br><span class="line"><span class="comment">    Time:2640 ms</span></span><br><span class="line"><span class="comment">    Memory:1948 kb</span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (2000000 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL unsigned long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">LL ans;</span><br><span class="line">bitset&lt;MAXN&gt; f;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, srx; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;srx);</span><br><span class="line">        f[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        f ^= (f &lt;&lt; srx);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; MAXN; i++)</span><br><span class="line">        <span class="keyword">if</span> (f[i])</span><br><span class="line">            ans ^= i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="preprefix-sum"><ahref="https://lydsy.com/JudgeOnline/problem.php?id=3155">Preprefixsum</a></h3><p>维护前缀和然后区间修改区间查询就完事了</p><p>当然也可以推一波式子...和树状数组维护区间的感觉差不多...</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**************************************************************</span></span><br><span class="line"><span class="comment">    Problem: 3155</span></span><br><span class="line"><span class="comment">    User: Cansult</span></span><br><span class="line"><span class="comment">    Language: C++</span></span><br><span class="line"><span class="comment">    Result: Accepted</span></span><br><span class="line"><span class="comment">    Time:672 ms</span></span><br><span class="line"><span class="comment">    Memory:11840 kb</span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LS(dq) ((dq) &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RS(dq) (LS(dq) + 1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (100000 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">    <span class="type">int</span> le, ri;</span><br><span class="line">    LL zh, lazy;</span><br><span class="line">&#125; b[MAXN &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> n, a[MAXN];</span><br><span class="line">LL f[MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">js</span><span class="params">(<span class="type">int</span> dq, <span class="type">int</span> le, <span class="type">int</span> ri)</span> </span>&#123;</span><br><span class="line">    b[dq].le = le, b[dq].ri = ri, b[dq].zh = f[le];</span><br><span class="line">    <span class="keyword">if</span> (le == ri) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="type">int</span> mi = (le + ri) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">js</span>(<span class="built_in">LS</span>(dq), le, mi), <span class="built_in">js</span>(<span class="built_in">RS</span>(dq), mi + <span class="number">1</span>, ri);</span><br><span class="line">    b[dq].zh = b[<span class="built_in">LS</span>(dq)].zh + b[<span class="built_in">RS</span>(dq)].zh;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_down</span><span class="params">(<span class="type">int</span> dq)</span> </span>&#123;</span><br><span class="line">    LL zh = b[dq].lazy;</span><br><span class="line">    b[<span class="built_in">LS</span>(dq)].lazy += zh, b[<span class="built_in">RS</span>(dq)].lazy += zh;</span><br><span class="line">    b[<span class="built_in">LS</span>(dq)].zh += (b[<span class="built_in">LS</span>(dq)].ri - b[<span class="built_in">LS</span>(dq)].le + <span class="number">1</span>) * zh;</span><br><span class="line">    b[<span class="built_in">RS</span>(dq)].zh += (b[<span class="built_in">RS</span>(dq)].ri - b[<span class="built_in">RS</span>(dq)].le + <span class="number">1</span>) * zh;</span><br><span class="line">    b[dq].lazy = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">xg</span><span class="params">(<span class="type">int</span> dq, <span class="type">int</span> le, <span class="type">int</span> ri, <span class="type">int</span> zh)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (b[dq].le == le &amp;&amp; b[dq].ri == ri) &#123;</span><br><span class="line">        b[dq].zh += (LL)(ri - le + <span class="number">1</span>) * zh;</span><br><span class="line">        b[dq].lazy += zh;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mi = (b[dq].le + b[dq].ri) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (b[dq].lazy) <span class="built_in">push_down</span>(dq);</span><br><span class="line">    <span class="keyword">if</span> (le &gt; mi) <span class="built_in">xg</span>(<span class="built_in">RS</span>(dq), le, ri, zh);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (ri &lt;= mi) <span class="built_in">xg</span>(<span class="built_in">LS</span>(dq), le, ri, zh);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">xg</span>(<span class="built_in">LS</span>(dq), le, mi, zh), <span class="built_in">xg</span>(<span class="built_in">RS</span>(dq), mi + <span class="number">1</span>, ri, zh);</span><br><span class="line">    b[dq].zh = b[<span class="built_in">LS</span>(dq)].zh + b[<span class="built_in">RS</span>(dq)].zh;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">cx</span><span class="params">(<span class="type">int</span> dq, <span class="type">int</span> le, <span class="type">int</span> ri)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (b[dq].le == le &amp;&amp; b[dq].ri == ri)</span><br><span class="line">        <span class="keyword">return</span> b[dq].zh;</span><br><span class="line">    <span class="type">int</span> mi = (b[dq].le + b[dq].ri) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (b[dq].lazy) <span class="built_in">push_down</span>(dq);</span><br><span class="line">    <span class="keyword">if</span> (le &gt; mi) <span class="keyword">return</span> <span class="built_in">cx</span>(<span class="built_in">RS</span>(dq), le, ri);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (ri &lt;= mi) <span class="keyword">return</span> <span class="built_in">cx</span>(<span class="built_in">LS</span>(dq), le, ri);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">cx</span>(<span class="built_in">LS</span>(dq), le, mi) + <span class="built_in">cx</span>(<span class="built_in">RS</span>(dq), mi + <span class="number">1</span>, ri);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> q;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;q);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]), f[i] = f[i - <span class="number">1</span>] + a[i];</span><br><span class="line">    <span class="built_in">js</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    <span class="type">char</span> srs[<span class="number">10</span> + <span class="number">5</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, srx, sry; i &lt;= q; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, srs);</span><br><span class="line">        <span class="keyword">if</span> (srs[<span class="number">0</span>] == <span class="string">&#x27;Q&#x27;</span>) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;srx), <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">cx</span>(<span class="number">1</span>, <span class="number">1</span>, srx));</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;srx, &amp;sry), <span class="built_in">xg</span>(<span class="number">1</span>, srx, n, sry - a[srx]), a[srx] = sry;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="jsoi2009等差数列"><ahref="https://lydsy.com/JudgeOnline/problem.php?id=1558">[JSOI2009]等差数列</a></h3><p>这题...呕...</p><p>一看到是等差 显然要对区间差分 我一看等差数列差分完不就都相等了吗那不就是求区间颜色个数吗</p><p>写写写...这答案怎么都比标准答案...似乎...大了一倍?</p><p>后来才发现首项的问题...才发现这题真相在哪...</p><p>就是合并的时候注意是否可能前一个区间的最后一个数是后一个区间的首项然后就完事了</p><p>至于转移为什么维护4个值...就是你写着写着发现维护少了写不出来...</p><p>那四个值的含义其实就是对于当前区间可以去掉两边的值后的答案(去掉的那个值就给旁边的区间当首项了)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**************************************************************</span></span><br><span class="line"><span class="comment">    Problem: 1558</span></span><br><span class="line"><span class="comment">    User: Cansult</span></span><br><span class="line"><span class="comment">    Language: C++</span></span><br><span class="line"><span class="comment">    Result: Accepted</span></span><br><span class="line"><span class="comment">    Time:3520 ms</span></span><br><span class="line"><span class="comment">    Memory:15744 kb</span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (100000 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LS(dq) ((dq) &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RS(dq) (LS(dq) | 1)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">    <span class="type">int</span> le, ri, lc, rc, ans[<span class="number">4</span>], lazy; <span class="comment">// 0: l和r都不在等差数列中; 1: l在等差数列中; 2: r在等差数列中; 3: l和r都在等差数列中</span></span><br><span class="line">&#125; b[MAXN &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> a[MAXN], n;</span><br><span class="line"><span class="function">node <span class="title">push_up</span><span class="params">(node le, node ri)</span> </span>&#123;</span><br><span class="line">    node re;</span><br><span class="line">    re.lazy = <span class="number">0</span>;</span><br><span class="line">    re.le = le.le, re.ri = ri.ri;</span><br><span class="line">    re.lc = le.lc, re.rc = ri.rc;</span><br><span class="line"> </span><br><span class="line">    re.ans[<span class="number">0</span>] = le.ans[<span class="number">2</span>] + ri.ans[<span class="number">1</span>] - (le.rc == ri.lc);</span><br><span class="line">    re.ans[<span class="number">0</span>] = <span class="built_in">min</span>(re.ans[<span class="number">0</span>], le.ans[<span class="number">0</span>] + ri.ans[<span class="number">1</span>]);</span><br><span class="line">    re.ans[<span class="number">0</span>] = <span class="built_in">min</span>(re.ans[<span class="number">0</span>], le.ans[<span class="number">2</span>] + ri.ans[<span class="number">0</span>]);</span><br><span class="line"> </span><br><span class="line">    re.ans[<span class="number">1</span>] = le.ans[<span class="number">3</span>] + ri.ans[<span class="number">1</span>] - (le.rc == ri.lc);</span><br><span class="line">    re.ans[<span class="number">1</span>] = <span class="built_in">min</span>(re.ans[<span class="number">1</span>], le.ans[<span class="number">1</span>] + ri.ans[<span class="number">1</span>]);</span><br><span class="line">    re.ans[<span class="number">1</span>] = <span class="built_in">min</span>(re.ans[<span class="number">1</span>], le.ans[<span class="number">3</span>] + ri.ans[<span class="number">0</span>]);</span><br><span class="line"> </span><br><span class="line">    re.ans[<span class="number">2</span>] = le.ans[<span class="number">2</span>] + ri.ans[<span class="number">3</span>] - (le.rc == ri.lc);</span><br><span class="line">    re.ans[<span class="number">2</span>] = <span class="built_in">min</span>(re.ans[<span class="number">2</span>], le.ans[<span class="number">0</span>] + ri.ans[<span class="number">3</span>]);</span><br><span class="line">    re.ans[<span class="number">2</span>] = <span class="built_in">min</span>(re.ans[<span class="number">2</span>], le.ans[<span class="number">2</span>] + ri.ans[<span class="number">2</span>]);</span><br><span class="line"> </span><br><span class="line">    re.ans[<span class="number">3</span>] = le.ans[<span class="number">3</span>] + ri.ans[<span class="number">3</span>] - (le.rc == ri.lc);</span><br><span class="line">    re.ans[<span class="number">3</span>] = <span class="built_in">min</span>(re.ans[<span class="number">3</span>], le.ans[<span class="number">3</span>] + ri.ans[<span class="number">2</span>]);</span><br><span class="line">    re.ans[<span class="number">3</span>] = <span class="built_in">min</span>(re.ans[<span class="number">3</span>], le.ans[<span class="number">1</span>] + ri.ans[<span class="number">3</span>]);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">js</span><span class="params">(<span class="type">int</span> dq, <span class="type">int</span> le, <span class="type">int</span> ri)</span> </span>&#123;</span><br><span class="line">    b[dq].le = le, b[dq].ri = ri, b[dq].lazy = <span class="number">0</span>, b[dq].lc = b[dq].rc = a[le];</span><br><span class="line">    b[dq].ans[<span class="number">3</span>] = b[dq].ans[<span class="number">2</span>] = b[dq].ans[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    b[dq].ans[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (le == ri) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="type">int</span> mi = (le + ri) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">js</span>(<span class="built_in">LS</span>(dq), le, mi), <span class="built_in">js</span>(<span class="built_in">RS</span>(dq), mi + <span class="number">1</span>, ri);</span><br><span class="line">    b[dq] = <span class="built_in">push_up</span>(b[<span class="built_in">LS</span>(dq)], b[<span class="built_in">RS</span>(dq)]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_down</span><span class="params">(<span class="type">int</span> dq)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> zh = b[dq].lazy;</span><br><span class="line">    b[<span class="built_in">LS</span>(dq)].lazy += zh, b[<span class="built_in">LS</span>(dq)].lc += zh, b[<span class="built_in">LS</span>(dq)].rc += zh;</span><br><span class="line">    b[<span class="built_in">RS</span>(dq)].lazy += zh, b[<span class="built_in">RS</span>(dq)].lc += zh, b[<span class="built_in">RS</span>(dq)].rc += zh;</span><br><span class="line">    b[dq].lazy = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">xg</span><span class="params">(<span class="type">int</span> dq, <span class="type">int</span> le, <span class="type">int</span> ri, <span class="type">int</span> zh)</span> </span>&#123;</span><br><span class="line">    le = <span class="built_in">max</span>(le, <span class="number">1</span>), ri = <span class="built_in">min</span>(ri, n - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (le &gt; ri) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">if</span> (b[dq].le == le &amp;&amp; b[dq].ri == ri) &#123;</span><br><span class="line">        b[dq].lc += zh, b[dq].rc += zh;</span><br><span class="line">        b[dq].lazy += zh;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mi = (b[dq].le + b[dq].ri) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (b[dq].lazy) <span class="built_in">push_down</span>(dq);</span><br><span class="line">    <span class="keyword">if</span> (le &gt; mi) <span class="built_in">xg</span>(<span class="built_in">RS</span>(dq), le, ri, zh);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (ri &lt;= mi) <span class="built_in">xg</span>(<span class="built_in">LS</span>(dq), le, ri, zh);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">xg</span>(<span class="built_in">LS</span>(dq), le, mi, zh), <span class="built_in">xg</span>(<span class="built_in">RS</span>(dq), mi + <span class="number">1</span>, ri, zh);</span><br><span class="line">    b[dq] = <span class="built_in">push_up</span>(b[<span class="built_in">LS</span>(dq)], b[<span class="built_in">RS</span>(dq)]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">node <span class="title">cx</span><span class="params">(<span class="type">int</span> dq, <span class="type">int</span> le, <span class="type">int</span> ri)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (b[dq].le == le &amp;&amp; b[dq].ri == ri)</span><br><span class="line">        <span class="keyword">return</span> b[dq];</span><br><span class="line">    <span class="type">int</span> mi = (b[dq].le + b[dq].ri) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (b[dq].lazy) <span class="built_in">push_down</span>(dq);</span><br><span class="line">    <span class="keyword">if</span> (le &gt; mi) <span class="keyword">return</span> <span class="built_in">cx</span>(<span class="built_in">RS</span>(dq), le, ri);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (ri &lt;= mi) <span class="keyword">return</span> <span class="built_in">cx</span>(<span class="built_in">LS</span>(dq), le, ri);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">push_up</span>(<span class="built_in">cx</span>(<span class="built_in">LS</span>(dq), le, mi), <span class="built_in">cx</span>(<span class="built_in">RS</span>(dq), mi + <span class="number">1</span>, ri));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) a[i] = a[i + <span class="number">1</span>] - a[i];</span><br><span class="line">    <span class="built_in">js</span>(<span class="number">1</span>, <span class="number">1</span>, n - <span class="number">1</span>);</span><br><span class="line">    <span class="type">int</span> q;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;q);</span><br><span class="line">    <span class="type">char</span> srs[<span class="number">10</span> + <span class="number">5</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, srx, sry, sra, srb; i &lt;= q; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, srs);</span><br><span class="line">        <span class="keyword">if</span> (srs[<span class="number">0</span>] == <span class="string">&#x27;A&#x27;</span>) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>, &amp;srx, &amp;sry, &amp;sra, &amp;srb);</span><br><span class="line">            <span class="built_in">xg</span>(<span class="number">1</span>, srx - <span class="number">1</span>, srx - <span class="number">1</span>, sra);</span><br><span class="line">            <span class="built_in">xg</span>(<span class="number">1</span>, srx, sry - <span class="number">1</span>, srb);</span><br><span class="line">            <span class="built_in">xg</span>(<span class="number">1</span>, sry, sry, -sra - (sry - srx) * srb);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;srx, &amp;sry), <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, (srx == sry) ? <span class="number">1</span> : <span class="built_in">cx</span>(<span class="number">1</span>, srx, sry - <span class="number">1</span>).ans[<span class="number">3</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="poi2010intelligence-test"><ahref="https://lydsy.com/JudgeOnline/problem.php?id=2083">[Poi2010]Intelligencetest</a></h3><p>这题...众(不包括我)所周知这种一个数(<spanclass="math inline">\(n\)</span>)特别大的情况, 就尽量只扫一遍<spanclass="math inline">\(n\)</span></p><p>然后...就扫一遍<spanclass="math inline">\(n\)</span>....就完事了....</p><p>(可以体会一下注释中的代码和AC代码的微妙区别)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**************************************************************</span></span><br><span class="line"><span class="comment">    Problem: 2083</span></span><br><span class="line"><span class="comment">    User: Cansult</span></span><br><span class="line"><span class="comment">    Language: C++</span></span><br><span class="line"><span class="comment">    Result: Accepted</span></span><br><span class="line"><span class="comment">    Time:7444 ms</span></span><br><span class="line"><span class="comment">    Memory:52752 kb</span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (1000000 + 5)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n, m, a[MAXN], len[MAXN];</span><br><span class="line"><span class="type">bool</span> ans[MAXN];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; b[MAXN], nex[MAXN];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    <span class="type">int</span> m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, dqn; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;dqn);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>, srx; j &lt;= dqn; j++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;srx), b[i].<span class="built_in">push_back</span>(srx);</span><br><span class="line">        nex[b[i][<span class="number">0</span>]].<span class="built_in">push_back</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; bk = nex[a[i]];</span><br><span class="line">        nex[a[i]].<span class="built_in">clear</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; bk.<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">            <span class="type">int</span> wz = bk[j];</span><br><span class="line">            ++len[wz];</span><br><span class="line">            <span class="keyword">if</span> (len[wz] &gt;= b[wz].<span class="built_in">size</span>()) ans[wz] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">else</span> nex[b[wz][len[wz]]].<span class="built_in">push_back</span>(wz);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">        <span class="built_in">puts</span>(ans[i] ? <span class="string">&quot;TAK&quot;</span> : <span class="string">&quot;NIE&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#include &lt;cstdio&gt;</span></span><br><span class="line"><span class="comment">#include &lt;vector&gt;</span></span><br><span class="line"><span class="comment">#define MAXN (1000000 + 5)</span></span><br><span class="line"><span class="comment">using namespace std;</span></span><br><span class="line"><span class="comment">int n, m, a[MAXN], len[MAXN];</span></span><br><span class="line"><span class="comment">bool ans[MAXN];</span></span><br><span class="line"><span class="comment">vector&lt;int&gt; b[MAXN], nex[MAXN];</span></span><br><span class="line"><span class="comment">int main() &#123;</span></span><br><span class="line"><span class="comment">scanf(&quot;%d&quot;, &amp;n);</span></span><br><span class="line"><span class="comment">for (int i = 1; i &lt;= n; i++) scanf(&quot;%d&quot;, &amp;a[i]);</span></span><br><span class="line"><span class="comment">int m;</span></span><br><span class="line"><span class="comment">scanf(&quot;%d&quot;, &amp;m);</span></span><br><span class="line"><span class="comment">for (int i = 1, dqn; i &lt;= m; i++) &#123;</span></span><br><span class="line"><span class="comment">scanf(&quot;%d&quot;, &amp;dqn);</span></span><br><span class="line"><span class="comment">for (int j = 1, srx; j &lt;= dqn; j++)</span></span><br><span class="line"><span class="comment">scanf(&quot;%d&quot;, &amp;srx), b[i].push_back(srx);</span></span><br><span class="line"><span class="comment">nex[b[i][0]].push_back(i);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">for (int i = 1; i &lt;= n; i++) &#123;</span></span><br><span class="line"><span class="comment">vector&lt;int&gt; bk = nex[a[i]];</span></span><br><span class="line"><span class="comment">nex[a[i]].clear();</span></span><br><span class="line"><span class="comment">for (int j = 0; j &lt; bk.size(); j++) &#123;</span></span><br><span class="line"><span class="comment">int wz = bk[j];</span></span><br><span class="line"><span class="comment">if (len[wz] &gt;= b[wz].size() - 1) continue;</span></span><br><span class="line"><span class="comment">nex[b[wz][++len[wz]]].push_back(wz);</span></span><br><span class="line"><span class="comment">if (len[wz] &gt;= b[wz].size() - 1) ans[wz] = true; //这个地方可能只是把下一位push进了vector, 而还没有在a[]中出现过, 所以可能造成有些NIE变成TAK</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">for (int i = 1; i &lt;= m; i++)</span></span><br><span class="line"><span class="comment">puts(ans[i] ? &quot;TAK&quot; : &quot;NIE&quot;);</span></span><br><span class="line"><span class="comment">return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="count"><ahref="https://lydsy.com/JudgeOnline/problem.php?id=3956">Count</a></h3><p>根据影魔的套路我们发现所谓的好区间就是一个数和他的<code>premax</code>,<code>nexmax</code></p><p>然后就是在给定的区间里看有多少个这样的区间 二维数点 用树套树即可</p><p>发现这题没修改 直接用主席树也就做完了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**************************************************************</span></span><br><span class="line"><span class="comment">    Problem: 3956</span></span><br><span class="line"><span class="comment">    User: Cansult</span></span><br><span class="line"><span class="comment">    Language: C++</span></span><br><span class="line"><span class="comment">    Result: Accepted</span></span><br><span class="line"><span class="comment">    Time:3872 ms</span></span><br><span class="line"><span class="comment">    Memory:204608 kb</span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (300000 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF (0x7fffffff)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">    <span class="type">int</span> ls, rs, zh, le, ri;</span><br><span class="line">&#125; b[MAXN &lt;&lt; <span class="number">5</span>];</span><br><span class="line"><span class="type">int</span> a[MAXN], n, root[MAXN], cntb, bh[MAXN], cntr;</span><br><span class="line">vector&lt;pii&gt; pa;</span><br><span class="line">stack&lt;pii&gt; Gary;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ins</span><span class="params">(<span class="type">int</span> pre, <span class="type">int</span>&amp; dq, <span class="type">int</span> le, <span class="type">int</span> ri, <span class="type">int</span> zh)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!dq) dq = ++cntb, b[dq].le = le, b[dq].ri = ri, b[dq].ls = b[dq].rs = <span class="number">0</span>, b[dq].zh = b[pre].zh;</span><br><span class="line">    <span class="keyword">if</span> (le == ri) &#123; ++b[dq].zh; <span class="keyword">return</span> ; &#125;</span><br><span class="line">    <span class="type">int</span> mi = (le + ri) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (zh &lt;= mi) b[dq].rs = (b[dq].rs ? b[dq].rs : b[pre].rs), <span class="built_in">ins</span>(b[pre].ls, b[dq].ls, le, mi, zh);</span><br><span class="line">    <span class="keyword">else</span> b[dq].ls = (b[dq].ls ? b[dq].ls : b[pre].ls), <span class="built_in">ins</span>(b[pre].rs, b[dq].rs, mi + <span class="number">1</span>, ri, zh);</span><br><span class="line">    b[dq].zh = b[b[dq].ls].zh + b[b[dq].rs].zh;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cx</span><span class="params">(<span class="type">int</span> dq, <span class="type">int</span> le, <span class="type">int</span> ri)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!dq) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (b[dq].le == le &amp;&amp; b[dq].ri == ri) <span class="keyword">return</span> b[dq].zh;</span><br><span class="line">    <span class="type">int</span> mi = (b[dq].le + b[dq].ri) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (le &gt; mi) <span class="keyword">return</span> <span class="built_in">cx</span>(b[dq].rs, le, ri);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (ri &lt;= mi) <span class="keyword">return</span> <span class="built_in">cx</span>(b[dq].ls, le, ri);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">cx</span>(b[dq].ls, le, mi) + <span class="built_in">cx</span>(b[dq].rs, mi + <span class="number">1</span>, ri);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Gary.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(INF, <span class="number">0</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (Gary.<span class="built_in">top</span>().first &lt; a[i]) Gary.<span class="built_in">pop</span>();</span><br><span class="line">        pa.<span class="built_in">push_back</span>(<span class="built_in">make_pair</span>(Gary.<span class="built_in">top</span>().second, i));</span><br><span class="line">        Gary.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(a[i], i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!Gary.<span class="built_in">empty</span>()) Gary.<span class="built_in">pop</span>();</span><br><span class="line">    Gary.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(INF, n + <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">while</span> (Gary.<span class="built_in">top</span>().first &lt; a[i]) Gary.<span class="built_in">pop</span>();</span><br><span class="line">        pa.<span class="built_in">push_back</span>(<span class="built_in">make_pair</span>(i, Gary.<span class="built_in">top</span>().second));</span><br><span class="line">        Gary.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(a[i], i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(pa.<span class="built_in">begin</span>(), pa.<span class="built_in">end</span>());</span><br><span class="line">    vector&lt;pii&gt;::iterator te = <span class="built_in">unique</span>(pa.<span class="built_in">begin</span>(), pa.<span class="built_in">end</span>());</span><br><span class="line">    pa.<span class="built_in">erase</span>(te, pa.<span class="built_in">end</span>());</span><br><span class="line">    <span class="type">int</span> dq = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; pa.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (pa[i].first &lt; <span class="number">1</span> || pa[i].second &gt; n || pa[i].second - pa[i].first &lt;= <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">while</span> (dq &lt; pa[i].first - <span class="number">1</span>) bh[++dq] = cntr;</span><br><span class="line">        ++cntr;</span><br><span class="line">        <span class="built_in">ins</span>(root[cntr - <span class="number">1</span>], root[cntr], <span class="number">1</span>, n, pa[i].second);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (dq &lt; n) bh[++dq] = cntr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> ty, q;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;q, &amp;ty);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, lastans = <span class="number">0</span>, srx, sry; i &lt;= q; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;srx, &amp;sry);</span><br><span class="line">        <span class="keyword">if</span> (ty) &#123;</span><br><span class="line">            srx = (srx + lastans - <span class="number">1</span>) % n + <span class="number">1</span>, sry = (sry + lastans - <span class="number">1</span>) % n + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (srx &gt; sry) <span class="built_in">swap</span>(srx, sry);</span><br><span class="line">        &#125;</span><br><span class="line">        lastans = <span class="built_in">cx</span>(root[bh[n]], <span class="number">1</span>, sry) - <span class="built_in">cx</span>(root[bh[srx - <span class="number">1</span>]], <span class="number">1</span>, sry) + sry - srx;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, lastans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="罗马游戏"><ahref="https://lydsy.com/JudgeOnline/problem.php?id=1455">罗马游戏</a></h3><p>可并对板子</p><p>忘了在合并的时候判断他们是否已经在一个堆里了 丢人</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**************************************************************</span></span><br><span class="line"><span class="comment">    Problem: 1455</span></span><br><span class="line"><span class="comment">    User: Cansult</span></span><br><span class="line"><span class="comment">    Language: C++</span></span><br><span class="line"><span class="comment">    Result: Accepted</span></span><br><span class="line"><span class="comment">    Time:2208 ms</span></span><br><span class="line"><span class="comment">    Memory:42308 kb</span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (2000000 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF (0x7fffffff)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">    <span class="type">int</span> ls, rs, zh, dis, fa;</span><br><span class="line">&#125; b[MAXN];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">bool</span> hsdie[MAXN];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == y) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">if</span> (!x || !y) <span class="keyword">return</span> x + y;</span><br><span class="line">    <span class="keyword">if</span> (b[x].zh &gt; b[y].zh) <span class="built_in">swap</span>(x, y);</span><br><span class="line">    b[b[x].rs = <span class="built_in">merge</span>(b[x].rs, y)].fa = b[b[x].ls].fa = x;</span><br><span class="line">    <span class="keyword">if</span> (b[b[x].ls].dis &lt; b[b[x].rs].dis) <span class="built_in">swap</span>(b[x].ls, b[x].rs);</span><br><span class="line">    b[x].dis = b[b[x].rs].dis + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (b[x].fa != x) x = b[x].fa; </span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">uni</span><span class="params">(<span class="type">int</span> fx, <span class="type">int</span> fy)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (b[fx].zh &gt; b[fy].zh) b[fy].fa = fy;</span><br><span class="line">    <span class="keyword">else</span> b[fx].fa = fx;</span><br><span class="line">    <span class="built_in">merge</span>(fx, fy);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">del</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> fx = <span class="built_in">find</span>(x);</span><br><span class="line">    b[fx].zh = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">uni</span>(b[fx].ls, b[fx].rs);</span><br><span class="line">    b[fx].ls = b[fx].rs = <span class="number">0</span>;</span><br><span class="line">    hsdie[fx] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;b[i].zh), b[i].fa = i;</span><br><span class="line">    b[<span class="number">0</span>].zh = INF;</span><br><span class="line">    <span class="type">int</span> q;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;q);</span><br><span class="line">    <span class="type">char</span> srs[<span class="number">5</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, srx, sry; i &lt;= q; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, srs);</span><br><span class="line">        <span class="keyword">if</span> (srs[<span class="number">0</span>] == <span class="string">&#x27;M&#x27;</span>) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;srx, &amp;sry);</span><br><span class="line">            <span class="keyword">if</span> (hsdie[srx] || hsdie[sry]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="built_in">uni</span>(<span class="built_in">find</span>(srx), <span class="built_in">find</span>(sry));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;srx);</span><br><span class="line">            <span class="keyword">if</span> (hsdie[srx]) <span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> &#123; </span><br><span class="line">                <span class="type">int</span> fx = <span class="built_in">find</span>(srx);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, b[fx].zh), <span class="built_in">del</span>(fx);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="tjoi2012-桥"><ahref="https://lydsy.com/JudgeOnline/problem.php?id=4400">tjoi2012桥</a></h3><p>众所周知boss在的边肯定在最短路的那条链上</p><p>联想一下<a href="https://cansult.ga/2897.html">这个题</a>, 考虑枚举边更新在最短路链上删除边后的收益</p><p>对于每一条边, 可以更新的区间是 [起点在以<spanclass="math inline">\(s\)</span>为根的最短路树上与<spanclass="math inline">\(t\)</span>的LCA, 终点在以<spanclass="math inline">\(t\)</span>为根的最短路树上与<spanclass="math inline">\(s\)</span>的LCA]</p><p>之所以要这么更新主要是因为我们不知道在是否会删掉这条边后会经过我们枚举的边所以我们要对这个区间用[经过我们枚举的边的最短路的长度]来取<spanclass="math inline">\(\min\)</span></p><p>然后最后在最短路链上找值最大的边 就是要删掉的边,最大值的数量就是方案数</p><p>注意特判有两条没有公共边的最短路的情况 这时候无论删掉哪条边答案都不变方案数要输出总边数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**************************************************************</span></span><br><span class="line"><span class="comment">    Problem: 4400</span></span><br><span class="line"><span class="comment">    User: Cansult</span></span><br><span class="line"><span class="comment">    Language: C++</span></span><br><span class="line"><span class="comment">    Result: Accepted</span></span><br><span class="line"><span class="comment">    Time:2348 ms</span></span><br><span class="line"><span class="comment">    Memory:15380 kb</span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (100000 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXM (200000 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF (0x7ffffff)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LS(dq) ((dq) &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RS(dq) (LS(dq) | 1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rev(i) (((i - 1) ^ 1) + 1)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edg</span> &#123;</span><br><span class="line">    <span class="type">int</span> from, to, next, cost;</span><br><span class="line">&#125; tb[MAXM &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">    <span class="type">int</span> le, ri, lazy;</span><br><span class="line">&#125; b[MAXN &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">cmp</span> &#123;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">operator</span> <span class="params">()</span> <span class="params">(<span class="type">const</span> pii x, <span class="type">const</span> pii y)</span> </span>&#123; <span class="keyword">return</span> x.second &gt; y.second; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> n, m, pre[<span class="number">2</span>][MAXN], g[MAXN], cntb, dis[<span class="number">2</span>][MAXN], ats[MAXN], att[MAXN];</span><br><span class="line"><span class="comment">// pre: 最短路树; ats: 这个点从s为根的最短路树上往上爬能达到的编号; att: 从以t为...的编号</span></span><br><span class="line"><span class="type">bool</span> chosen[MAXM &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dijk</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span>* disx, <span class="type">int</span>* prex)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> vis[MAXN];</span><br><span class="line">    <span class="built_in">memset</span>(vis, <span class="literal">false</span>, <span class="built_in">sizeof</span>(vis));</span><br><span class="line">    priority_queue&lt;pii, vector&lt;pii&gt;, cmp&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(s, <span class="number">0</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) disx[i] =  INF;</span><br><span class="line">    disx[s] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="type">int</span> dq = q.<span class="built_in">top</span>().first;</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (vis[dq]) <span class="keyword">continue</span>;</span><br><span class="line">        vis[dq] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = g[dq]; i; i = tb[i].next)</span><br><span class="line">            <span class="keyword">if</span> (disx[tb[i].to] &gt; disx[dq] + tb[i].cost) &#123;</span><br><span class="line">                disx[tb[i].to] = disx[dq] + tb[i].cost;</span><br><span class="line">                prex[tb[i].to] = i;</span><br><span class="line">                q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(tb[i].to, disx[tb[i].to]));</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">js</span><span class="params">(<span class="type">int</span> dq, <span class="type">int</span> le, <span class="type">int</span> ri)</span> </span>&#123;</span><br><span class="line">    b[dq].le = le, b[dq].ri = ri, b[dq].lazy = INF;</span><br><span class="line">    <span class="keyword">if</span> (le == ri) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="type">int</span> mi = (le + ri) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">js</span>(<span class="built_in">LS</span>(dq), le, mi), <span class="built_in">js</span>(<span class="built_in">RS</span>(dq), mi + <span class="number">1</span>, ri);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">xg</span><span class="params">(<span class="type">int</span> dq, <span class="type">int</span> le, <span class="type">int</span> ri, <span class="type">int</span> zh)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (le &gt; ri) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">if</span> (b[dq].le == le &amp;&amp; b[dq].ri == ri) &#123;</span><br><span class="line">        b[dq].lazy = <span class="built_in">min</span>(b[dq].lazy, zh);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mi = (b[dq].le + b[dq].ri) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (ri &lt;= mi) <span class="built_in">xg</span>(<span class="built_in">LS</span>(dq), le, ri, zh);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (le &gt; mi) <span class="built_in">xg</span>(<span class="built_in">RS</span>(dq), le, ri, zh);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">xg</span>(<span class="built_in">LS</span>(dq), le, mi, zh), <span class="built_in">xg</span>(<span class="built_in">RS</span>(dq), mi + <span class="number">1</span>, ri, zh);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cx</span><span class="params">(<span class="type">int</span> dq, <span class="type">int</span> wz)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (b[dq].le == b[dq].ri) <span class="keyword">return</span> b[dq].lazy;</span><br><span class="line">    <span class="type">int</span> mi = (b[dq].le + b[dq].ri) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (wz &lt;= mi) <span class="keyword">return</span> <span class="built_in">min</span>(b[dq].lazy, <span class="built_in">cx</span>(<span class="built_in">LS</span>(dq), wz));</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">min</span>(b[dq].lazy, <span class="built_in">cx</span>(<span class="built_in">RS</span>(dq), wz));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> dq, <span class="type">int</span>* prex, <span class="type">int</span>* at)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (at[dq]) <span class="keyword">return</span> at[dq];</span><br><span class="line">    <span class="keyword">return</span> (at[dq] = <span class="built_in">dfs</span>(tb[prex[dq]].from, prex, at));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> cnta = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i; i = tb[pre[<span class="number">1</span>][i]].from) ats[i] = att[i] = ++cnta, chosen[pre[<span class="number">1</span>][i]] = chosen[<span class="built_in">rev</span>(pre[<span class="number">1</span>][i])] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt; n; i++) </span><br><span class="line">        <span class="keyword">if</span> (!ats[i])</span><br><span class="line">            ats[i] = <span class="built_in">dfs</span>(i, pre[<span class="number">0</span>], ats);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt; n; i++)</span><br><span class="line">        <span class="keyword">if</span> (!att[i])</span><br><span class="line">            att[i] = <span class="built_in">dfs</span>(i, pre[<span class="number">1</span>], att);</span><br><span class="line">    <span class="built_in">js</span>(<span class="number">1</span>, <span class="number">1</span>, cnta - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= cntb; i += <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span> (!chosen[i]) &#123;</span><br><span class="line">            <span class="type">int</span> u = tb[i].from, v = tb[i].to;</span><br><span class="line">            <span class="keyword">if</span> (dis[<span class="number">0</span>][u] &gt; dis[<span class="number">0</span>][v]) <span class="built_in">swap</span>(u, v);</span><br><span class="line">            <span class="built_in">xg</span>(<span class="number">1</span>, ats[u], att[v] - <span class="number">1</span>, dis[<span class="number">0</span>][u] + dis[<span class="number">1</span>][v] + tb[i].cost);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>, cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; att[n]; i++)</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, <span class="built_in">cx</span>(<span class="number">1</span>, i));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; att[n]; i++)</span><br><span class="line">        <span class="keyword">if</span> (ans == <span class="built_in">cx</span>(<span class="number">1</span>, i))</span><br><span class="line">            ++cnt;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d&quot;</span>, ans, (ans == dis[<span class="number">0</span>][n]) ? m : cnt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">adn</span><span class="params">(<span class="type">int</span> from, <span class="type">int</span> to, <span class="type">int</span> cost)</span> </span>&#123;</span><br><span class="line">    tb[++cntb].next = g[from];</span><br><span class="line">    tb[cntb].from = from, tb[cntb].to = to, tb[cntb].cost = cost;</span><br><span class="line">    g[from] = cntb;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, srx, sry, src; i &lt;= m; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;srx, &amp;sry, &amp;src), <span class="built_in">adn</span>(srx, sry, src), <span class="built_in">adn</span>(sry, srx, src);</span><br><span class="line">    <span class="built_in">dijk</span>(<span class="number">1</span>, dis[<span class="number">0</span>], pre[<span class="number">0</span>]), <span class="built_in">dijk</span>(n, dis[<span class="number">1</span>], pre[<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="poi2012warehouse-store"><ahref="https://lydsy.com/JudgeOnline/problem.php?id=2802">[Poi2012]WarehouseStore</a></h3><p>我一开始想二分最大能连续选的商品价值 后来发现剩下的没法处理</p><p>考虑有<ahref="https://cansult.ga/2254.html">一道类似的题</a>...就是删除之前选过的东西</p><p>所以...这题我们发现可以...遇到一个不能选的点看看他的前面能否去掉一个<code>b[x]</code>更大的<code>x</code>,然后让这个点加入</p><p>一定要记得什么类型就用什么输出 我被输出锤自闭了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**************************************************************</span></span><br><span class="line"><span class="comment">    Problem: 2802</span></span><br><span class="line"><span class="comment">    User: Cansult</span></span><br><span class="line"><span class="comment">    Language: C++</span></span><br><span class="line"><span class="comment">    Result: Accepted</span></span><br><span class="line"><span class="comment">    Time:1144 ms</span></span><br><span class="line"><span class="comment">    Memory:6840 kb</span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (250000 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">cmp</span> &#123;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">operator</span> <span class="params">()</span> <span class="params">(<span class="type">const</span> pii x, <span class="type">const</span> pii y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x &lt; y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> n, a[MAXN], b[MAXN];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; outp;</span><br><span class="line">priority_queue&lt;pii, vector&lt;pii&gt; &gt; q;</span><br><span class="line"><span class="built_in">main</span>() &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;b[i]);</span><br><span class="line">    LL dq = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        dq += a[i];</span><br><span class="line">        <span class="keyword">if</span> (dq &gt;= b[i]) q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(b[i], i)), dq -= b[i];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!q.<span class="built_in">empty</span>() &amp;&amp; q.<span class="built_in">top</span>().first &gt; b[i]) &#123;</span><br><span class="line">                dq += q.<span class="built_in">top</span>().first - b[i];</span><br><span class="line">                q.<span class="built_in">pop</span>();</span><br><span class="line">                q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(b[i], i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, q.<span class="built_in">size</span>()); <span class="comment">// 这个地方用lld输出就会出问题</span></span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) outp.<span class="built_in">push_back</span>(q.<span class="built_in">top</span>().second), q.<span class="built_in">pop</span>();</span><br><span class="line">    <span class="built_in">sort</span>(outp.<span class="built_in">begin</span>(), outp.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; outp.<span class="built_in">size</span>(); i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, outp[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="poi2018prawnicy"><ahref="https://lydsy.com/JudgeOnline/problem.php?id=5102">[POI2018]Prawnicy</a></h3><p>我们可以枚举<strong>答案区间</strong>的左端点</p><p>然后让左端点在答案区间左边的区间中 右端点尽量靠右就完事了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**************************************************************</span></span><br><span class="line"><span class="comment">    Problem: 2802</span></span><br><span class="line"><span class="comment">    User: Cansult</span></span><br><span class="line"><span class="comment">    Language: C++</span></span><br><span class="line"><span class="comment">    Result: Accepted</span></span><br><span class="line"><span class="comment">    Time:1144 ms</span></span><br><span class="line"><span class="comment">    Memory:6840 kb</span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (250000 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">cmp</span> &#123;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">operator</span> <span class="params">()</span> <span class="params">(<span class="type">const</span> pii x, <span class="type">const</span> pii y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x &lt; y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> n, a[MAXN], b[MAXN];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; outp;</span><br><span class="line">priority_queue&lt;pii, vector&lt;pii&gt; &gt; q;</span><br><span class="line"><span class="built_in">main</span>() &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;b[i]);</span><br><span class="line">    LL dq = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        dq += a[i];</span><br><span class="line">        <span class="keyword">if</span> (dq &gt;= b[i]) q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(b[i], i)), dq -= b[i];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!q.<span class="built_in">empty</span>() &amp;&amp; q.<span class="built_in">top</span>().first &gt; b[i]) &#123;</span><br><span class="line">                dq += q.<span class="built_in">top</span>().first - b[i];</span><br><span class="line">                q.<span class="built_in">pop</span>();</span><br><span class="line">                q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(b[i], i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, q.<span class="built_in">size</span>());</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) outp.<span class="built_in">push_back</span>(q.<span class="built_in">top</span>().second), q.<span class="built_in">pop</span>();</span><br><span class="line">    <span class="built_in">sort</span>(outp.<span class="built_in">begin</span>(), outp.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; outp.<span class="built_in">size</span>(); i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, outp[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="noi2002savage"><ahref="https://lydsy.com/JudgeOnline/problem.php?id=1407">[Noi2002]Savage</a></h3><p>首先你要知道 这题数据水的和鳖一样<span class="math inline">\(\mathrmO(m n^2\lg \mathrm {maxint})\)</span>可过</p><p>然后我们可以列式子: 他们如果遇见了 是在什么时候然后解出来时间之后再和他们的寿命比较一下</p><p>然后我发现我似乎之前exGCD都写假了 最小整数解要<spanclass="math inline">\(\mod \frac{b}{gcd}\)</span>很真实</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**************************************************************</span></span><br><span class="line"><span class="comment">    Problem: 1407</span></span><br><span class="line"><span class="comment">    User: Cansult</span></span><br><span class="line"><span class="comment">    Language: C++</span></span><br><span class="line"><span class="comment">    Result: Accepted</span></span><br><span class="line"><span class="comment">    Time:1280 ms</span></span><br><span class="line"><span class="comment">    Memory:1288 kb</span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// c[i] + p[i] * x % m == c[j] + p[j] * x % m</span></span><br><span class="line"><span class="comment">// (p[i] - p[j]) * x == c[j] - c[i] &amp;&amp; x &lt;= hp</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (15 + 5)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">exgcd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span>&amp; x, <span class="type">int</span>&amp; y)</span> </span>&#123; <span class="comment">// ax + by == gcd</span></span><br><span class="line">    <span class="keyword">if</span> (!b) &#123;</span><br><span class="line">        x = <span class="number">1</span>, y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">exgcd</span>(b, a % b, y, x);</span><br><span class="line">    y -= a / b * x;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> (!y) ? x : <span class="built_in">gcd</span>(y, x % y); &#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> m, <span class="type">int</span> hp)</span> </span>&#123; <span class="comment">// ax == b (mod m) =&gt; ax + my == b</span></span><br><span class="line">    a = (a % m + m) % m, b = (b % m + m) % m; <span class="comment">// 注意处理负数</span></span><br><span class="line">    <span class="type">int</span> qaq = <span class="built_in">gcd</span>(a, m), x, y;</span><br><span class="line">    <span class="keyword">if</span> (b % qaq) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">exgcd</span>(a, m, x, y);</span><br><span class="line">    x *= b / qaq;</span><br><span class="line">    x %= (m / qaq);</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>) x += m / qaq;</span><br><span class="line">    <span class="keyword">return</span> hp &lt; x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n, c[MAXN], p[MAXN], l[MAXN];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">solve</span>(p[i] - p[j], c[j] - c[i], m, <span class="built_in">min</span>(l[i], l[j])))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="type">int</span> minans = n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) </span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;c[i], &amp;p[i], &amp;l[i]), minans = <span class="built_in">max</span>(minans, c[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = minans; i &lt;= <span class="number">1000000</span>; i++)</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">solve</span>(i)) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, i);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="dzy-loves-chinese-ii"><ahref="https://lydsy.com/JudgeOnline/problem.php?id=3569">DZY LovesChinese II</a></h3><p>这题很有意思</p><p>建出dfs树, 对于所有的非树边 随机一个权值,然后将这个非树边在树上的一段区间全部异或上这个权值, 最后得出树边的权值,这样 对于一次询问我们只需要判断出这些边是否能异或出0(树边和覆盖ta的非树边都被删掉了)</p><p>一开始我想写32棵标记永久化的线段树 然后对每次询问的非树边区间修改树边单点查询</p><p>后来发现直接对这些边建线性基就能看出来是否能异或出0</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**************************************************************</span></span><br><span class="line"><span class="comment">    Problem: 3569</span></span><br><span class="line"><span class="comment">    User: Cansult</span></span><br><span class="line"><span class="comment">    Language: C++</span></span><br><span class="line"><span class="comment">    Result: Accepted</span></span><br><span class="line"><span class="comment">    Time:3368 ms</span></span><br><span class="line"><span class="comment">    Memory:30736 kb</span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (100000 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXM (500000 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXL (32 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXK (15 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LS(dq) ((dq) &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RS(dq) (LS(dq) | 1)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edg</span> &#123;</span><br><span class="line">    <span class="type">int</span> from, to, next, bh;</span><br><span class="line">&#125; tb[MAXN], eb[MAXM &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">tnode</span> &#123;</span><br><span class="line">    <span class="type">int</span> fa, deep, top, hs, size;</span><br><span class="line">&#125; ta[MAXN];</span><br><span class="line"><span class="type">int</span> n, m, q, tg[MAXN], eg[MAXN], cntt, cnte, cost[MAXM], lazy[MAXN], b[MAXL], dqk[MAXK];</span><br><span class="line"><span class="type">bool</span> ist[MAXM], vis[MAXN];</span><br><span class="line">pii pb[MAXM];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">adn</span><span class="params">(edg* bx, <span class="type">int</span>* gx, <span class="type">int</span>&amp; cntx, <span class="type">int</span> from, <span class="type">int</span> to, <span class="type">int</span> bh)</span> </span>&#123;</span><br><span class="line">    bx[++cntx].next = gx[from];</span><br><span class="line">    bx[cntx].from = from, bx[cntx].to = to, bx[cntx].bh = bh;</span><br><span class="line">    gx[from] = cntx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> dq)</span> </span>&#123;</span><br><span class="line">    ta[dq].size = <span class="number">1</span>;</span><br><span class="line">    vis[dq] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = eg[dq]; i; i = eb[i].next)</span><br><span class="line">        <span class="keyword">if</span> (!vis[eb[i].to]) &#123;</span><br><span class="line">            ta[eb[i].to].deep = ta[dq].deep + <span class="number">1</span>;</span><br><span class="line">            ta[eb[i].to].fa = dq;</span><br><span class="line">            <span class="built_in">adn</span>(tb, tg, cntt, dq, eb[i].to, eb[i].bh);</span><br><span class="line">            ist[eb[i].bh] = <span class="literal">true</span>;</span><br><span class="line">            <span class="built_in">init</span>(eb[i].to);</span><br><span class="line">            ta[dq].size += ta[eb[i].to].size;</span><br><span class="line">            <span class="keyword">if</span> (ta[eb[i].to].size &gt; ta[ta[dq].hs].size) ta[dq].hs = eb[i].to;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> dq)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ta[dq].hs) ta[ta[dq].hs].top = ta[dq].top, <span class="built_in">dfs</span>(ta[dq].hs);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = tg[dq]; i; i = tb[i].next)</span><br><span class="line">        <span class="keyword">if</span> (tb[i].to != ta[dq].hs &amp;&amp; tb[i].to != ta[dq].fa)</span><br><span class="line">            ta[tb[i].to].top = tb[i].to, <span class="built_in">dfs</span>(tb[i].to);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (ta[x].top != ta[y].top) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ta[ta[x].top].deep &lt; ta[ta[y].top].deep) <span class="built_in">swap</span>(x, y);</span><br><span class="line">        x = ta[ta[x].top].fa;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ta[x].deep &gt; ta[y].deep) <span class="built_in">swap</span>(x, y);</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">xg</span><span class="params">(<span class="type">int</span> dq)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = tg[dq]; i; i = tb[i].next) &#123;</span><br><span class="line">        <span class="built_in">xg</span>(tb[i].to);</span><br><span class="line">        lazy[dq] ^= (cost[tb[i].bh] = lazy[tb[i].to]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ins</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = MAXL - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        <span class="keyword">if</span> ((<span class="number">1ll</span> &lt;&lt; i) &amp; x) &#123;</span><br><span class="line">            <span class="keyword">if</span> (b[i]) x ^= b[i];</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                b[i] = x;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">srand</span>(<span class="number">20020522</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;pb[i].first, &amp;pb[i].second), <span class="built_in">adn</span>(eb, eg, cnte, pb[i].first, pb[i].second, i), <span class="built_in">adn</span>(eb, eg, cnte, pb[i].second, pb[i].first, i);</span><br><span class="line">    ta[<span class="number">1</span>].fa = ta[<span class="number">1</span>].top = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">init</span>(<span class="number">1</span>), <span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">        <span class="keyword">if</span> (!ist[i]) &#123;</span><br><span class="line">            cost[i] = <span class="built_in">rand</span>();</span><br><span class="line">            <span class="type">int</span> lcaxy = <span class="built_in">lca</span>(pb[i].first, pb[i].second);</span><br><span class="line">            lazy[pb[i].first] ^= cost[i], lazy[pb[i].second] ^= cost[i];</span><br><span class="line">            <span class="keyword">if</span> (lcaxy != pb[i].first &amp;&amp; lcaxy != pb[i].second) lazy[lcaxy] ^= cost[i];</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">xg</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;q);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, sumans = <span class="number">0</span>; i &lt;= q; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;dqk[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= dqk[<span class="number">0</span>]; j++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;dqk[j]);</span><br><span class="line">        <span class="built_in">memset</span>(b, <span class="number">0</span>, <span class="built_in">sizeof</span>(b));</span><br><span class="line">        <span class="type">bool</span> ok = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>, srx; j &lt;= dqk[<span class="number">0</span>]; j++) &#123;</span><br><span class="line">            srx = dqk[j], srx ^= sumans;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">ins</span>(cost[srx])) &#123;</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">&quot;Disconnected&quot;</span>);</span><br><span class="line">                ok = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ok)</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;Connected&quot;</span>), ++sumans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="cqoi2013新nim游戏"><ahref="https://lydsy.com/JudgeOnline/problem.php?id=3105">[cqoi2013]新Nim游戏</a></h3><p>首先我们知道 对于普通Nim游戏所有的石子数量异或起来如果是0就先手必败</p><p>也就是说我们要让第二个人拿完几堆之后 异或和不为0</p><p>考虑线性基插入的时候 不能插入的数就是异或和为0的子集的"关键元素"(没了他就异或不出0来)</p><p>所以我们只需要把这些不能插入线性基的数删掉就好了</p><p>因为答案要求尽量小 所以我们把数从小到大插入即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**************************************************************</span></span><br><span class="line"><span class="comment">    Problem: 3105</span></span><br><span class="line"><span class="comment">    User: Cansult</span></span><br><span class="line"><span class="comment">    Language: C++</span></span><br><span class="line"><span class="comment">    Result: Accepted</span></span><br><span class="line"><span class="comment">    Time:4 ms</span></span><br><span class="line"><span class="comment">    Memory:1292 kb</span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (100 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXL (32 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">LL ans = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> a[MAXN], n, b[MAXL];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ins</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> dans = x;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = MAXL - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        <span class="keyword">if</span> ((<span class="number">1ll</span> &lt;&lt; i) &amp; x) &#123;</span><br><span class="line">            <span class="keyword">if</span> (b[i]) x ^= b[i];</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                b[i] = x;</span><br><span class="line">                <span class="keyword">return</span> ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ans += dans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    <span class="built_in">sort</span>(a + <span class="number">1</span>, a + n + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">        <span class="built_in">ins</span>(a[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="再见xor"><ahref="https://lydsy.com/JudgeOnline/problem.php?id=4269">4269:再见Xor</a></h3><p>放在这里记录一个结论线性基能异或出的次大值就是不异或最后一个基底的最大值</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**************************************************************</span></span><br><span class="line"><span class="comment">    Problem: 4269</span></span><br><span class="line"><span class="comment">    User: Cansult</span></span><br><span class="line"><span class="comment">    Language: C++</span></span><br><span class="line"><span class="comment">    Result: Accepted</span></span><br><span class="line"><span class="comment">    Time:252 ms</span></span><br><span class="line"><span class="comment">    Memory:1288 kb</span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXL (35)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> b[MAXL], n;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ins</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = MAXL - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        <span class="keyword">if</span> (x &amp; (<span class="number">1ll</span> &lt;&lt; i)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (b[i]) x ^= b[i];</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                b[i] = x;</span><br><span class="line">                <span class="keyword">return</span> ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, srx; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;srx), <span class="built_in">ins</span>(srx);</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = MAXL - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, ans ^ b[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, ans);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; MAXL; i++)</span><br><span class="line">        <span class="keyword">if</span> (b[i]) &#123;</span><br><span class="line">            ans ^= b[i];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="poi2003sums"><ahref="https://lydsy.com/JudgeOnline/problem.php?id=2612">[Poi2003]Sums</a></h3><p>这题很有意思</p><p>先说结论: 把<span class="math inline">\(\{a\}\)</span>从小到大排序对于<span class="math inline">\(x \in [0, a_1 -1]\)</span>中的每一个<spanclass="math inline">\(x\)</span>计算出[最小的模<spanclass="math inline">\(a_1\)</span>后等于<spanclass="math inline">\(x\)</span>的数<spanclass="math inline">\(dis_x\)</span>], 然后对于每一个询问<spanclass="math inline">\(b_i\)</span>, 如果<spanclass="math inline">\(dis_{b_i \% a_1} &gt;b_i\)</span>就是<code>NIE</code>, 否则就是<code>TAK</code></p><p>首先 一个很显然的结论就是 如果<spanclass="math inline">\(b_x\)</span>能被凑出来 那么<spanclass="math inline">\(b_x + na_y\)</span>也可以被凑出来</p><p>所以如果<span class="math inline">\(b\%a_1\)</span>能凑出来 <spanclass="math inline">\(b\)</span>就也一定能凑出来</p><p>那么为什么<span class="math inline">\(b \% a_1\)</span>大于<spanclass="math inline">\(b\)</span>就凑不出来呢? 废话这个都大于<spanclass="math inline">\(b\)</span>了还怎么往上面加数</p><p>那么为什么只用试一个<span class="math inline">\(a_1\)</span>呢?基本和上面的理由一样 因为其他的<spanclass="math inline">\(a\)</span>无非就是看上去多了几个<spanclass="math inline">\(dis\)</span>, 然而这些<spanclass="math inline">\(dis\)</span>在刚才的做法里也是有的(算到<spanclass="math inline">\(\mod a_1\)</span>之后的下标上了),所以根据上面的那一条 较小的<spanclass="math inline">\(a_1\)</span>都凑不出来 其他的<spanclass="math inline">\(a\)</span>就也一定凑不出来</p><p>据说存边会炸空间</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**************************************************************</span></span><br><span class="line"><span class="comment">    Problem: 2612</span></span><br><span class="line"><span class="comment">    User: Cansult</span></span><br><span class="line"><span class="comment">    Language: C++</span></span><br><span class="line"><span class="comment">    Result: Accepted</span></span><br><span class="line"><span class="comment">    Time:384 ms</span></span><br><span class="line"><span class="comment">    Memory:2068 kb</span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (50000 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF (0x7ffffffffffffll)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int, LL&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">cmp</span> &#123;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">operator</span> <span class="params">()</span> <span class="params">(<span class="type">const</span> pii x, <span class="type">const</span> pii y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x.second &gt; y.second;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> n, a[MAXN];</span><br><span class="line">LL dis[MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dijk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> vis[MAXN];</span><br><span class="line">    <span class="built_in">memset</span>(vis, <span class="literal">false</span>, <span class="built_in">sizeof</span>(vis));</span><br><span class="line">    <span class="built_in">memset</span>(dis, <span class="number">0x7f</span>, <span class="built_in">sizeof</span>(dis));</span><br><span class="line">    priority_queue&lt;pii, vector&lt;pii&gt;, cmp&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(<span class="number">0</span>, dis[<span class="number">0</span>] = <span class="number">0</span>));</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="type">int</span> dq = q.<span class="built_in">top</span>().first;</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (vis[dq]) <span class="keyword">continue</span>;</span><br><span class="line">        vis[dq] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) </span><br><span class="line">            <span class="keyword">if</span> (dis[dq] + a[i] &lt; dis[(dq + a[i]) % a[<span class="number">1</span>]])</span><br><span class="line">                q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>((dq + a[i]) % a[<span class="number">1</span>], dis[(dq + a[i]) % a[<span class="number">1</span>]] = dis[dq] + a[i]));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    <span class="built_in">sort</span>(a + <span class="number">1</span>, a + n + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">dijk</span>();</span><br><span class="line">    <span class="type">int</span> q;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;q);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, srx; i &lt;= q; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;srx), <span class="built_in">puts</span>(dis[srx % a[<span class="number">1</span>]] &lt;= srx ? <span class="string">&quot;TAK&quot;</span> : <span class="string">&quot;NIE&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="hnoi2012矿场搭建"><ahref="https://lydsy.com/JudgeOnline/problem.php?id=2730">[HNOI2012]矿场搭建</a></h3><p>我怎么老是记得我好像写过这题... = =</p><p>这题我已经不想说啥了...先是Tarjan求割点写了个假板子...然后统计有几个联通块连着几个割点的时候又自闭了</p><p>后来直接大力<code>set&lt;int&gt; []</code>终于过了...哦对了我中间还忘清数组了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**************************************************************</span></span><br><span class="line"><span class="comment">    Problem: 2730</span></span><br><span class="line"><span class="comment">    User: Cansult</span></span><br><span class="line"><span class="comment">    Language: C++</span></span><br><span class="line"><span class="comment">    Result: Accepted</span></span><br><span class="line"><span class="comment">    Time:44 ms</span></span><br><span class="line"><span class="comment">    Memory:1632 kb</span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (5000 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edg</span> &#123;</span><br><span class="line">    <span class="type">int</span> from, to, next;</span><br><span class="line">&#125; b[MAXN &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> g[MAXN], cntb, n, m, dfn[MAXN], low[MAXN], cntdfn, size[MAXN], fa[MAXN];</span><br><span class="line"><span class="type">bool</span> isc[MAXN];</span><br><span class="line">set&lt;<span class="type">int</span>&gt; fuck[MAXN];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; cpoint;</span><br><span class="line">LL ans1, ans2;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">adn</span><span class="params">(<span class="type">int</span> from, <span class="type">int</span> to)</span> </span>&#123;</span><br><span class="line">    b[++cntb].next = g[from];</span><br><span class="line">    b[cntb].from = from, b[cntb].to = to;</span><br><span class="line">    g[from] = cntb;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">tarjan</span><span class="params">(<span class="type">int</span> dq, <span class="type">bool</span> isroot)</span> </span>&#123;</span><br><span class="line">    low[dq] = dfn[dq] = ++cntdfn;</span><br><span class="line">    <span class="type">int</span> cntc = <span class="number">0</span>;</span><br><span class="line">    <span class="type">bool</span> ok = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = g[dq]; i; i = b[i].next)</span><br><span class="line">        <span class="keyword">if</span> (b[i].to != fa[dq]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dfn[b[i].to]) low[dq] = <span class="built_in">min</span>(low[dq], dfn[b[i].to]);</span><br><span class="line">            <span class="keyword">else</span> fa[b[i].to] = dq, ++cntc, <span class="built_in">tarjan</span>(b[i].to, <span class="literal">false</span>), low[dq] = <span class="built_in">min</span>(low[dq], low[b[i].to]), ok |= (low[b[i].to] &gt;= dfn[dq] &amp;&amp; !isroot);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">if</span> ((isroot &amp;&amp; cntc &gt; <span class="number">1</span>) || ok)</span><br><span class="line">        isc[dq] = <span class="literal">true</span>, cpoint.<span class="built_in">push_back</span>(dq);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> dq)</span> </span>&#123;</span><br><span class="line">    size[dq] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = g[dq]; i; i = b[i].next)</span><br><span class="line">        <span class="keyword">if</span> (!size[b[i].to] &amp;&amp; !isc[b[i].to]) &#123;</span><br><span class="line">            <span class="built_in">dfs</span>(b[i].to);</span><br><span class="line">            size[dq] += size[b[i].to];</span><br><span class="line">            fuck[dq].<span class="built_in">insert</span>(fuck[b[i].to].<span class="built_in">begin</span>(), fuck[b[i].to].<span class="built_in">end</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (isc[b[i].to])</span><br><span class="line">            fuck[dq].<span class="built_in">insert</span>(b[i].to);</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> casei)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">if</span> (!dfn[i])</span><br><span class="line">            fa[i] = i, <span class="built_in">tarjan</span>(i, <span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">if</span> (!cpoint.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Case %d: 2 %d\n&quot;</span> ,casei, n * (n - <span class="number">1</span>) / <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">if</span> (!size[i] &amp;&amp; !isc[i]) &#123;</span><br><span class="line">            <span class="built_in">dfs</span>(i);</span><br><span class="line">            <span class="keyword">if</span> (fuck[i].<span class="built_in">size</span>() == <span class="number">1</span>)</span><br><span class="line">                ++ans1, ans2 *= size[i];</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Case %d: %lld %lld\n&quot;</span>, casei, ans1, ans2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> cntc = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(isc, <span class="literal">false</span>, <span class="built_in">sizeof</span>(isc));</span><br><span class="line">        <span class="built_in">memset</span>(g, <span class="number">0</span>, <span class="built_in">sizeof</span>(g));</span><br><span class="line">        <span class="built_in">memset</span>(dfn, <span class="number">0</span>, <span class="built_in">sizeof</span>(dfn));</span><br><span class="line">        <span class="built_in">memset</span>(low, <span class="number">0</span>, <span class="built_in">sizeof</span>(low));</span><br><span class="line">        <span class="built_in">memset</span>(size, <span class="number">0</span>, <span class="built_in">sizeof</span>(size));</span><br><span class="line">        <span class="built_in">memset</span>(fa, <span class="number">0</span>, <span class="built_in">sizeof</span>(fa));</span><br><span class="line">        cpoint.<span class="built_in">clear</span>();</span><br><span class="line">        cntb = n = m = cntdfn = <span class="number">0</span>;</span><br><span class="line">        ans1 = <span class="number">0</span>, ans2 = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;m);</span><br><span class="line">        <span class="keyword">if</span> (!m) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, srx, sry; i &lt;= m; i++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;srx, &amp;sry), <span class="built_in">adn</span>(srx, sry), <span class="built_in">adn</span>(sry, srx), n = <span class="built_in">max</span>(n, <span class="built_in">max</span>(srx, sry));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) fuck[i].<span class="built_in">clear</span>();</span><br><span class="line">        <span class="built_in">solve</span>(++cntc);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="pa2010-riddle"><ahref="https://lydsy.com/JudgeOnline/problem.php?id=3495">PA2010Riddle</a></h3><p>Emmmmm...显然是个2SAT然后我们发现这个玩意处理同一个郡内的关系的时候边数爆炸了</p><p><del>联想一下这题的标签</del>我们发现这个东西就是对于每一个点都要找一个点连向这个郡内出了当前的点的所有点的反点</p><p>我们又发现 刨去这个点<span class="math inline">\(city_x\)</span>后,郡被分成了两个区间 <span class="math inline">\([1, city_x - 1] \cup[city_x + 1, city_0]\)</span></p><p>我们又发现 这个东西是个前缀和的样子 于是 我们就对每个点新建一个点连向两边的前缀/后缀区间所代表的点即可</p><p>本机会爆栈... = = b站上28s卡过去的...很真实</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**************************************************************</span></span><br><span class="line"><span class="comment">    Problem: 3495</span></span><br><span class="line"><span class="comment">    User: Cansult</span></span><br><span class="line"><span class="comment">    Language: C++</span></span><br><span class="line"><span class="comment">    Result: Accepted</span></span><br><span class="line"><span class="comment">    Time:28460 ms</span></span><br><span class="line"><span class="comment">    Memory:346760 kb</span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (10000000 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> bh(i) (1000000 + (i))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> jbh(i) (2000000 + (i))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edg</span> &#123;</span><br><span class="line">    <span class="type">int</span> from, to, next;</span><br><span class="line">&#125; b[MAXN];</span><br><span class="line"><span class="type">int</span> g[MAXN], n, m, k, cntb, belong[MAXN], low[MAXN], dfn[MAXN], cntdfn, city[MAXN];</span><br><span class="line"><span class="type">bool</span> ins[MAXN];</span><br><span class="line">stack&lt;<span class="type">int</span>&gt; gary;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">adn</span><span class="params">(<span class="type">int</span> from, <span class="type">int</span> to)</span> </span>&#123;</span><br><span class="line">    b[++cntb].next = g[from];</span><br><span class="line">    b[cntb].from = from, b[cntb].to = to;</span><br><span class="line">    g[from] = cntb;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">tarjan</span><span class="params">(<span class="type">int</span> dq)</span> </span>&#123;</span><br><span class="line">    low[dq] = dfn[dq] = ++cntdfn;</span><br><span class="line">    belong[dq] = dq;</span><br><span class="line">    gary.<span class="built_in">push</span>(dq);</span><br><span class="line">    ins[dq] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = g[dq]; i; i = b[i].next)</span><br><span class="line">        <span class="keyword">if</span> (!dfn[b[i].to]) <span class="built_in">tarjan</span>(b[i].to), low[dq] = <span class="built_in">min</span>(low[dq], low[b[i].to]); </span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (ins[b[i].to]) low[dq] = <span class="built_in">min</span>(low[dq], dfn[b[i].to]);</span><br><span class="line">    <span class="keyword">if</span> (low[dq] == dfn[dq]) &#123;</span><br><span class="line">        <span class="keyword">while</span> (!gary.<span class="built_in">empty</span>() &amp;&amp; gary.<span class="built_in">top</span>() != dq) ins[gary.<span class="built_in">top</span>()] = <span class="literal">false</span>, belong[gary.<span class="built_in">top</span>()] = dq, gary.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (!gary.<span class="built_in">empty</span>())</span><br><span class="line">            gary.<span class="built_in">pop</span>();</span><br><span class="line">        ins[dq] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;k);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, srx, sry; i &lt;= m; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;srx, &amp;sry), <span class="built_in">adn</span>(<span class="built_in">bh</span>(srx), sry), <span class="built_in">adn</span>(<span class="built_in">bh</span>(sry), srx);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, cntc = <span class="number">0</span>; i &lt;= k; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;city[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= city[<span class="number">0</span>]; j++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;city[j]);</span><br><span class="line">        <span class="built_in">adn</span>(<span class="built_in">jbh</span>(++cntc), <span class="built_in">bh</span>(city[<span class="number">1</span>]));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">2</span>; j &lt;= city[<span class="number">0</span>]; j++) <span class="built_in">adn</span>(<span class="built_in">jbh</span>(++cntc), <span class="built_in">bh</span>(city[j])), <span class="built_in">adn</span>(<span class="built_in">jbh</span>(cntc), <span class="built_in">jbh</span>(cntc - <span class="number">1</span>)), <span class="built_in">adn</span>(city[j], <span class="built_in">jbh</span>(cntc - <span class="number">1</span>));</span><br><span class="line">        <span class="built_in">adn</span>(<span class="built_in">jbh</span>(++cntc), <span class="built_in">bh</span>(city[city[<span class="number">0</span>]]));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = city[<span class="number">0</span>] - <span class="number">1</span>; j &gt;= <span class="number">1</span>; j--) <span class="built_in">adn</span>(<span class="built_in">jbh</span>(++cntc), <span class="built_in">bh</span>(city[j])), <span class="built_in">adn</span>(<span class="built_in">jbh</span>(cntc), <span class="built_in">jbh</span>(cntc - <span class="number">1</span>)), <span class="built_in">adn</span>(city[j], <span class="built_in">jbh</span>(cntc - <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; MAXN; i++)</span><br><span class="line">        <span class="keyword">if</span> (!dfn[i])</span><br><span class="line">            <span class="built_in">tarjan</span>(i);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">if</span> (belong[i] == belong[<span class="built_in">bh</span>(i)]) &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;NIE&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;TAK&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="tjoi2018xor"><ahref="https://lydsy.com/JudgeOnline/problem.php?id=5338">[TJOI2018]xor</a></h3><p>树链剖分套可持久化trie</p><p>一开始想第一问启发式合并然后第二问在树上建可持久化trie</p><p>然后没过一会就真香了... = =</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**************************************************************</span></span><br><span class="line"><span class="comment">    Problem: 5338</span></span><br><span class="line"><span class="comment">    User: Cansult</span></span><br><span class="line"><span class="comment">    Language: C++</span></span><br><span class="line"><span class="comment">    Result: Accepted</span></span><br><span class="line"><span class="comment">    Time:4584 ms</span></span><br><span class="line"><span class="comment">    Memory:94188 kb</span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int LL</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (100000 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXL (30 + 1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LS(dq) ((dq) &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RS(dq) (LS(dq) | 1)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">    <span class="type">int</span> ch[<span class="number">2</span>], zh;</span><br><span class="line">&#125; b[MAXN &lt;&lt; <span class="number">5</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edg</span> &#123;</span><br><span class="line">    <span class="type">int</span> from, to, next;</span><br><span class="line">&#125; tb[MAXN &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">tnode</span> &#123;</span><br><span class="line">    <span class="type">int</span> begin, end, top, fa, size, hs, deep;</span><br><span class="line">&#125; ta[MAXN];</span><br><span class="line"><span class="type">int</span> tg[MAXN], cntt, cntb, n, root[MAXN], cnta, a[MAXN], zh[MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">adn</span><span class="params">(<span class="type">int</span> from, <span class="type">int</span> to)</span> </span>&#123;</span><br><span class="line">    tb[++cntt].next = tg[from];</span><br><span class="line">    tb[cntt].from = from, tb[cntt].to = to;</span><br><span class="line">    tg[from] = cntt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> dq)</span> </span>&#123;</span><br><span class="line">    ta[dq].size = <span class="number">1</span>;</span><br><span class="line">    ta[dq].deep = ta[ta[dq].fa].deep + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = tg[dq]; i; i = tb[i].next)</span><br><span class="line">        <span class="keyword">if</span> (tb[i].to != ta[dq].fa)</span><br><span class="line">            ta[tb[i].to].fa = dq, <span class="built_in">init</span>(tb[i].to), ta[dq].size += ta[tb[i].to].size, ta[dq].hs = (ta[ta[dq].hs].size &gt; ta[tb[i].to].size) ? ta[dq].hs : tb[i].to;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> dq)</span> </span>&#123;</span><br><span class="line">    a[ta[dq].begin = ++cnta] = dq;</span><br><span class="line">    <span class="keyword">if</span> (ta[dq].hs) ta[ta[dq].hs].top = ta[dq].top, <span class="built_in">dfs</span>(ta[dq].hs);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = tg[dq]; i; i = tb[i].next)</span><br><span class="line">        <span class="keyword">if</span> (tb[i].to != ta[dq].fa &amp;&amp; tb[i].to != ta[dq].hs)</span><br><span class="line">            ta[tb[i].to].top = tb[i].to, <span class="built_in">dfs</span>(tb[i].to);</span><br><span class="line">    ta[dq].end = cnta;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">newnode</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> ++cntb; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ins</span><span class="params">(<span class="type">int</span> pre, <span class="type">int</span> dq, <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">30</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="type">bool</span> isright = (x &amp; (<span class="number">1ll</span> &lt;&lt; i)) != <span class="number">0</span>;</span><br><span class="line">        b[dq].ch[isright] = <span class="built_in">newnode</span>();</span><br><span class="line">        b[b[dq].ch[isright]].zh = b[b[pre].ch[isright]].zh + <span class="number">1</span>;</span><br><span class="line">        b[dq].ch[!isright] = b[pre].ch[!isright];</span><br><span class="line">        dq = b[dq].ch[isright], pre = b[pre].ch[isright];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cx</span><span class="params">(<span class="type">int</span> pre, <span class="type">int</span> dq, <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> re = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">30</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="type">bool</span> isright = (x &amp; (<span class="number">1ll</span> &lt;&lt; i)) == <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (b[b[dq].ch[isright]].zh - b[b[pre].ch[isright]].zh) re |= (<span class="number">1ll</span> &lt;&lt; i), dq = b[dq].ch[isright], pre = b[pre].ch[isright];</span><br><span class="line">        <span class="keyword">else</span> dq = b[dq].ch[!isright], pre = b[pre].ch[!isright];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">cx</span>(root[ta[x].begin - <span class="number">1</span>], root[ta[x].end], y); &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> z)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> re = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (ta[x].top != ta[y].top) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ta[ta[x].top].deep &lt; ta[ta[y].top].deep) <span class="built_in">swap</span>(x, y);</span><br><span class="line">        re = <span class="built_in">max</span>(re, <span class="built_in">cx</span>(root[ta[ta[x].top].begin - <span class="number">1</span>], root[ta[x].begin], z));</span><br><span class="line">        x = ta[ta[x].top].fa;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ta[x].deep &gt; ta[y].deep) <span class="built_in">swap</span>(x, y);</span><br><span class="line">    re = <span class="built_in">max</span>(re, <span class="built_in">cx</span>(root[ta[x].begin - <span class="number">1</span>], root[ta[y].begin], z));</span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">main</span>() &#123;</span><br><span class="line">    <span class="type">int</span> q;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>, &amp;n, &amp;q);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;zh[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, srx, sry; i &lt; n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>, &amp;srx, &amp;sry), <span class="built_in">adn</span>(srx, sry), <span class="built_in">adn</span>(sry, srx);</span><br><span class="line">    ta[<span class="number">1</span>].fa = ta[<span class="number">1</span>].top = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">init</span>(<span class="number">1</span>), <span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">ins</span>(root[i - <span class="number">1</span>], root[i] = <span class="built_in">newnode</span>(), zh[a[i]]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, sre, srx, sry, srz; i &lt;= q; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;sre);</span><br><span class="line">        <span class="keyword">if</span> (sre == <span class="number">1</span>) <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>, &amp;srx, &amp;sry), <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">solve</span>(srx, sry));</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld&quot;</span>, &amp;srx, &amp;sry, &amp;srz), <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">solve</span>(srx, sry, srz));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="hnoi2015菜肴制作"><ahref="https://lydsy.com/JudgeOnline/problem.php?id=4010">[HNOI2015]菜肴制作</a></h3><p>这题挺有意思...一开始以为是直接正着拓扑排序 把队列换成堆就行了</p><p>后来发现题目要求的是"编号小的尽量靠前" 而不是 "字典序最小"</p><p>这两个玩意是有区别的:</p><p>字典序最小是要让第一位尽量小 然后再让第二位尽量小...</p><p>编号小的靠前是宁愿让第一位大一些 也要把编号小的挪到前面去</p><p>搞清楚这两个的区别就很好理(意)解(会)为什么要建反图了(因为编号大的数为了凑字典序都跑到后面取了)(估计这题在当时会坑不少人?)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**************************************************************</span></span><br><span class="line"><span class="comment">    Problem: 4010</span></span><br><span class="line"><span class="comment">    User: Cansult</span></span><br><span class="line"><span class="comment">    Language: C++</span></span><br><span class="line"><span class="comment">    Result: Accepted</span></span><br><span class="line"><span class="comment">    Time:1060 ms</span></span><br><span class="line"><span class="comment">    Memory:4276 kb</span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (100000 + 5)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edg</span> &#123;</span><br><span class="line">    <span class="type">int</span> from, to, next;</span><br><span class="line">&#125; b[MAXN];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">cmp</span> &#123;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">operator</span> <span class="params">()</span> <span class="params">(<span class="type">const</span> <span class="type">int</span> x, <span class="type">const</span> <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> x &lt; y; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> g[MAXN], cntb, n, m, du[MAXN];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; outp;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">adn</span><span class="params">(<span class="type">int</span> from, <span class="type">int</span> to)</span> </span>&#123;</span><br><span class="line">    b[++cntb].next = g[from];</span><br><span class="line">    b[cntb].from = from, b[cntb].to = to;</span><br><span class="line">    g[from] = cntb;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    priority_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;, cmp&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="keyword">if</span> (!du[i]) q.<span class="built_in">push</span>(i);</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="type">int</span> dq = q.<span class="built_in">top</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        outp.<span class="built_in">push_back</span>(dq);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = g[dq]; i; i = b[i].next) &#123;</span><br><span class="line">            --du[b[i].to];</span><br><span class="line">            <span class="keyword">if</span> (!du[b[i].to])</span><br><span class="line">                q.<span class="built_in">push</span>(b[i].to);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (outp.<span class="built_in">size</span>() != n) <span class="built_in">puts</span>(<span class="string">&quot;Impossible!&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, outp[i]);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">        <span class="built_in">memset</span>(du, <span class="number">0</span>, <span class="built_in">sizeof</span>(du));</span><br><span class="line">        <span class="built_in">memset</span>(g, <span class="number">0</span>, <span class="built_in">sizeof</span>(g));</span><br><span class="line">        cntb = <span class="number">0</span>;</span><br><span class="line">        outp.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, srx, sry; i &lt;= m; i++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;srx, &amp;sry), <span class="built_in">adn</span>(sry, srx), ++du[srx];</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="树上三角形"><ahref="https://lydsy.com/JudgeOnline/problem.php?id=3251">树上三角形</a></h3><p>这题也挺有意思的 当时我<del>熬夜肝For Honor所以</del>上课昏昏沉沉的然后就听学长说 "你倒过来想一下 这个路径不能构成三角形是什么情况"</p><p>我一想 不能构成三角形最少不就是个斐波那契数列吗这个说爆<code>int</code>很快啊</p><p>于是我们发现斐波那契数列到第<spanclass="math inline">\(50\)</span>项左右就爆<code>int</code>了...</p><p>所以我们对于点数大于<spanclass="math inline">\(50\)</span>的路径直接输出<code>Y</code>就行</p><p>当然节点数小于<spanclass="math inline">\(50\)</span>的就可以直接暴力算了...</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**************************************************************</span></span><br><span class="line"><span class="comment">    Problem: 3251</span></span><br><span class="line"><span class="comment">    User: Cansult</span></span><br><span class="line"><span class="comment">    Language: C++</span></span><br><span class="line"><span class="comment">    Result: Accepted</span></span><br><span class="line"><span class="comment">    Time:1004 ms</span></span><br><span class="line"><span class="comment">    Memory:50956 kb</span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (100000 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXL (50 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int LL </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edg</span> &#123;</span><br><span class="line">    <span class="type">int</span> from, to, next;</span><br><span class="line">&#125; b[MAXN];</span><br><span class="line"><span class="type">int</span> g[MAXN], cntb, n, deep[MAXN], zh[MAXN], d[MAXN][MAXL];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">adn</span><span class="params">(<span class="type">int</span> from, <span class="type">int</span> to)</span> </span>&#123;</span><br><span class="line">    b[++cntb].next = g[from];</span><br><span class="line">    b[cntb].from = from, b[cntb].to = to;</span><br><span class="line">    g[from] = cntb;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> dq)</span> </span>&#123;</span><br><span class="line">    deep[dq] = deep[d[dq][<span class="number">0</span>]] + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; MAXL; i++) d[dq][i] = d[d[dq][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = g[dq]; i; i = b[i].next) <span class="built_in">dfs</span>(b[i].to);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (deep[x] &lt; deep[y]) <span class="built_in">swap</span>(x, y);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = MAXL - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        <span class="keyword">if</span> (deep[d[x][i]] &gt;= deep[y])</span><br><span class="line">            x = d[x][i];</span><br><span class="line">    <span class="keyword">if</span> (x == y) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = MAXL - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        <span class="keyword">if</span> (d[x][i] != d[y][i])</span><br><span class="line">            x = d[x][i], y = d[y][i];</span><br><span class="line">    <span class="keyword">return</span> d[x][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">main</span>() &#123;</span><br><span class="line">    <span class="type">int</span> q;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>, &amp;n, &amp;q);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;zh[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, srx, sry; i &lt; n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>, &amp;srx, &amp;sry), <span class="built_in">adn</span>(srx, sry), d[sry][<span class="number">0</span>] = srx;</span><br><span class="line">    d[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, sre, srx, sry; i &lt;= q; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld&quot;</span>, &amp;sre, &amp;srx, &amp;sry);</span><br><span class="line">        <span class="keyword">if</span> (sre) zh[srx] = sry;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">int</span> lcaxy = <span class="built_in">lca</span>(srx, sry);</span><br><span class="line">            <span class="keyword">if</span> (deep[sry] + deep[srx] - <span class="number">2</span> * deep[lcaxy] &gt; MAXL) <span class="built_in">puts</span>(<span class="string">&quot;Y&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                vector&lt;<span class="type">int</span>&gt; dq;</span><br><span class="line">                <span class="keyword">while</span> (srx != lcaxy) dq.<span class="built_in">push_back</span>(zh[srx]), srx = d[srx][<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">while</span> (sry != lcaxy) dq.<span class="built_in">push_back</span>(zh[sry]), sry = d[sry][<span class="number">0</span>];</span><br><span class="line">                dq.<span class="built_in">push_back</span>(zh[lcaxy]);</span><br><span class="line">                <span class="built_in">sort</span>(dq.<span class="built_in">begin</span>(), dq.<span class="built_in">end</span>());</span><br><span class="line">                <span class="keyword">if</span> (dq.<span class="built_in">size</span>() &lt; <span class="number">3</span>) <span class="built_in">puts</span>(<span class="string">&quot;N&quot;</span>);</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">bool</span> ok = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt; dq.<span class="built_in">size</span>(); i++) </span><br><span class="line">                        <span class="keyword">if</span> (dq[i] &lt; dq[i - <span class="number">1</span>] + dq[i - <span class="number">2</span>]) &#123;</span><br><span class="line">                            ok = <span class="literal">true</span>;</span><br><span class="line">                            <span class="built_in">puts</span>(<span class="string">&quot;Y&quot;</span>);</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    <span class="keyword">if</span> (!ok) <span class="built_in">puts</span>(<span class="string">&quot;N&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>By 准备退役旅游的 Cansult</p>]]></content>
      
      
      <categories>
          
          <category> 翻车笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 清奇脑回路 </tag>
            
            <tag> 杂题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记 虚树</title>
      <link href="/posts/37546.html"/>
      <url>/posts/37546.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>傲慢让别人无法来爱我, 偏见让我无法去爱别人</p></blockquote><span id="more"></span><h3 id="定义">定义</h3><p>...这玩意真是没啥好说的...就是有一种树上问题每次询问和很多点都有关系, 但是这些点数的总和不会很大,然后我们就要搞一个和这些点的和相关的算法</p><p>虚树说白了还是信息的压缩 把与询问无关的东西统统略掉:</p><ul><li>保留询问点: 因为你要回答询问</li><li>保留询问点之间的LCA: 因为你要保留这棵树的一些结构上的性质</li></ul><p>然后就直接在新树上想怎么搞怎么搞就完事了</p><h3 id="构造">构造</h3><p>构建一次虚树的复杂度是<span class="math inline">\(\text{询问点个数}\times \text{求出询问点之间LCA的复杂度}\)</span></p><p>具体来说 询问点按照DFS序排序,然后从后向前求出LCA(说白了就是从低到高求LCA),把询问点和LCA一起按照DFS序排序, 按照祖孙关系连就完事了</p><p><del>一开始抄的hzwer大爷的代码然后发现痛不欲生</del> 具体实现抄的<ahref="https://www.cnblogs.com/cjyyb/p/9066310.html">yyb大爷的代码</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> son[x].first &lt; son[y].first; &#125;</span><br><span class="line">stack&lt;<span class="type">int</span>&gt; gary, bh;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cntb = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">sort</span>(h + <span class="number">1</span>, h + h[<span class="number">0</span>] + <span class="number">1</span>, cmp);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = h[<span class="number">0</span>]; i &gt; <span class="number">1</span>; i--)</span><br><span class="line">        h[++h[<span class="number">0</span>]] = <span class="built_in">lca</span>(h[i], h[i - <span class="number">1</span>]);</span><br><span class="line">    h[++h[<span class="number">0</span>]] = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">sort</span>(h + <span class="number">1</span>, h + h[<span class="number">0</span>] + <span class="number">1</span>, cmp);</span><br><span class="line">    h[<span class="number">0</span>] = <span class="built_in">unique</span>(h + <span class="number">1</span>, h + h[<span class="number">0</span>] + <span class="number">1</span>) - h - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (!gary.<span class="built_in">empty</span>()) gary.<span class="built_in">pop</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= h[<span class="number">0</span>]; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (!gary.<span class="built_in">empty</span>() &amp;&amp; son[gary.<span class="built_in">top</span>()].second &lt; son[h[i]].first) gary.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (!gary.<span class="built_in">empty</span>())</span><br><span class="line">            <span class="built_in">adn</span>(gb, b, cntb, gary.<span class="built_in">top</span>(), h[i], <span class="number">0</span>);</span><br><span class="line">        gary.<span class="built_in">push</span>(h[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">dp</span>(<span class="number">1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="几道例题">几道例题</h3><h4 id="sdoi2011消耗战"><ahref="https://lydsy.com/JudgeOnline/problem.php?id=2286">[Sdoi2011]消耗战</a></h4><p>喜闻乐见的又双叒叕开小空间了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**************************************************************</span></span><br><span class="line"><span class="comment">    Problem: 2286</span></span><br><span class="line"><span class="comment">    User: Cansult</span></span><br><span class="line"><span class="comment">    Language: C++</span></span><br><span class="line"><span class="comment">    Result: Accepted</span></span><br><span class="line"><span class="comment">    Time:8488 ms</span></span><br><span class="line"><span class="comment">    Memory:104192 kb</span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (500000 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF (0x7ffffffffffffll)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXL (25 + 5)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edg</span> &#123;</span><br><span class="line">    <span class="type">int</span> from, to, next, cost;</span><br><span class="line">&#125; b[MAXN], e[MAXN &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> lgn = <span class="number">24</span>;</span><br><span class="line"><span class="type">int</span> gb[MAXN], cntb, ge[MAXN], cnte, n, q, h[MAXN], cnta, deep[MAXN], d[MAXN][MAXL];</span><br><span class="line">LL f[MAXN], premin[MAXN];</span><br><span class="line">pii son[MAXN];</span><br><span class="line"><span class="type">bool</span> ist[MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">adn</span><span class="params">(<span class="type">int</span>* gx, edg* bx, <span class="type">int</span>&amp; cntx, <span class="type">int</span> from, <span class="type">int</span> to, <span class="type">int</span> cost)</span> </span>&#123;</span><br><span class="line">    bx[++cntx].next = gx[from];</span><br><span class="line">    bx[cntx].from = from, bx[cntx].to = to, bx[cntx].cost = cost;</span><br><span class="line">    gx[from] = cntx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> dq)</span> </span>&#123;</span><br><span class="line">    son[dq].first = ++cnta;</span><br><span class="line">    deep[dq] = deep[d[dq][<span class="number">0</span>]] + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= lgn; i++)</span><br><span class="line">        d[dq][i] = d[d[dq][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = ge[dq]; i; i = e[i].next)</span><br><span class="line">        <span class="keyword">if</span> (e[i].to != d[dq][<span class="number">0</span>])</span><br><span class="line">            premin[e[i].to] = <span class="built_in">min</span>(premin[dq], (LL)e[i].cost), d[e[i].to][<span class="number">0</span>] = dq, <span class="built_in">init</span>(e[i].to);</span><br><span class="line">    son[dq].second = cnta;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (deep[x] &lt; deep[y]) <span class="built_in">swap</span>(x, y);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = lgn; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        <span class="keyword">if</span> (deep[d[x][i]] &gt;= deep[y])</span><br><span class="line">            x = d[x][i];</span><br><span class="line">    <span class="keyword">if</span> (x == y) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = lgn; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        <span class="keyword">if</span> (d[x][i] != d[y][i])</span><br><span class="line">            x = d[x][i], y = d[y][i];</span><br><span class="line">    <span class="keyword">return</span> d[x][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> son[x].first &lt; son[y].first; &#125;</span><br><span class="line"><span class="function">LL <span class="title">dp</span><span class="params">(<span class="type">int</span> dq)</span> </span>&#123;</span><br><span class="line">    f[dq] = premin[dq];</span><br><span class="line">    LL re = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = gb[dq]; i; i = b[i].next)</span><br><span class="line">        re += <span class="built_in">dp</span>(b[i].to);</span><br><span class="line">    <span class="keyword">if</span> (re &amp;&amp; !ist[dq]) f[dq] = <span class="built_in">min</span>(f[dq], re);</span><br><span class="line">    gb[dq] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> f[dq];</span><br><span class="line">&#125;</span><br><span class="line">stack&lt;<span class="type">int</span>&gt; gary, bh;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cntb = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">sort</span>(h + <span class="number">1</span>, h + h[<span class="number">0</span>] + <span class="number">1</span>, cmp);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = h[<span class="number">0</span>]; i &gt; <span class="number">1</span>; i--)</span><br><span class="line">        h[++h[<span class="number">0</span>]] = <span class="built_in">lca</span>(h[i], h[i - <span class="number">1</span>]);</span><br><span class="line">    h[++h[<span class="number">0</span>]] = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">sort</span>(h + <span class="number">1</span>, h + h[<span class="number">0</span>] + <span class="number">1</span>, cmp);</span><br><span class="line">    h[<span class="number">0</span>] = <span class="built_in">unique</span>(h + <span class="number">1</span>, h + h[<span class="number">0</span>] + <span class="number">1</span>) - h - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (!gary.<span class="built_in">empty</span>()) gary.<span class="built_in">pop</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= h[<span class="number">0</span>]; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (!gary.<span class="built_in">empty</span>() &amp;&amp; son[gary.<span class="built_in">top</span>()].second &lt; son[h[i]].first) gary.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (!gary.<span class="built_in">empty</span>())</span><br><span class="line">            <span class="built_in">adn</span>(gb, b, cntb, gary.<span class="built_in">top</span>(), h[i], <span class="number">0</span>);</span><br><span class="line">        gary.<span class="built_in">push</span>(h[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">dp</span>(<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, srx, sry, src; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;srx, &amp;sry, &amp;src);</span><br><span class="line">        <span class="built_in">adn</span>(ge, e, cnte, srx, sry, src);</span><br><span class="line">        <span class="built_in">adn</span>(ge, e, cnte, sry, srx, src);</span><br><span class="line">    &#125;</span><br><span class="line">    premin[<span class="number">1</span>] = INF;</span><br><span class="line">    <span class="built_in">init</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;q);</span><br><span class="line">    <span class="built_in">memset</span>(ist, <span class="literal">false</span>, <span class="built_in">sizeof</span>(ist));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= q; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;h[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= h[<span class="number">0</span>]; j++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;h[j]), ist[h[j]] = <span class="literal">true</span>, bh.<span class="built_in">push</span>(h[j]);</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">        <span class="keyword">while</span> (!bh.<span class="built_in">empty</span>()) ist[bh.<span class="built_in">top</span>()] = <span class="literal">false</span>, bh.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="hnoi2014世界树"><ahref="https://lydsy.com/JudgeOnline/problem.php?id=3572">[Hnoi2014]世界树</a></h4><p>一开始想的是分类讨论: 把虚树上的点分成"询问点"和"询问点的LCA"</p><ul><li>对于询问点和询问点之间的边可以直接计算然后更新答案</li><li>对于询问点和LCA之间的边可以到LCA上遍历一下也可以统计</li><li>但是对于LCA和LCA之间的点我就懵逼了 因为遍历的复杂度就GG了然后gayge表示我是个沙茶并且告诉我可以在构建虚树的时候就预处理出来每个LCA是被哪个点管辖的我感觉肥肠厉害</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 咕咕咕</span></span><br></pre></td></tr></table></figure><h4 id="heoi2014大工程"><ahref="https://lydsy.com/JudgeOnline/problem.php?id=3611">[Heoi2014]大工程</a></h4><p>考虑一次询问怎么搞</p><p>路径和: 枚举每条边然后看ta两边有多少个点乘起来就完事了</p><p>路径最大/最小值: 记录每个点能延伸的最大/小深度和第二大/小深度,在LCA和询问点上分类搞一搞就完事了</p><p>写起来真鸡儿丢人...复制的时候没改全...然后又复制到别的地方...总之就是一团糟...</p><p>然后忘了最大值还可能在询问点上更新的情况...GG</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**************************************************************</span></span><br><span class="line"><span class="comment">    Problem: 3611</span></span><br><span class="line"><span class="comment">    User: Cansult</span></span><br><span class="line"><span class="comment">    Language: C++</span></span><br><span class="line"><span class="comment">    Result: Accepted</span></span><br><span class="line"><span class="comment">    Time:11392 ms</span></span><br><span class="line"><span class="comment">    Memory:236836 kb</span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF (100000000000000000ll)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (1000000 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXL (20 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edg</span> &#123;</span><br><span class="line">    <span class="type">int</span> from, to, next, cost;</span><br><span class="line">&#125; b[MAXN], e[MAXN &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> lgn = <span class="number">23</span>;</span><br><span class="line"><span class="type">int</span> gb[MAXN], ge[MAXN], cntb, cnte, n, q, deep[MAXN], h[MAXN], d[MAXN][MAXL], cnta, size[MAXN], tn;</span><br><span class="line">LL cdeep[MAXN], maxdeep[MAXN], max2deep[MAXN], mindeep[MAXN], min2deep[MAXN];</span><br><span class="line">pii son[MAXN];</span><br><span class="line"><span class="type">bool</span> ish[MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">adn</span><span class="params">(<span class="type">int</span>* gx, edg* bx, <span class="type">int</span>&amp; cntx, <span class="type">int</span> from, <span class="type">int</span> to, <span class="type">int</span> cost)</span> </span>&#123;</span><br><span class="line">    bx[++cntx].next = gx[from];</span><br><span class="line">    bx[cntx].from = from, bx[cntx].to = to, bx[cntx].cost = cost;</span><br><span class="line">    gx[from] = cntx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> dq)</span> </span>&#123;</span><br><span class="line">    son[dq].first = ++cnta;</span><br><span class="line">    deep[dq] = deep[d[dq][<span class="number">0</span>]] + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= lgn; i++)</span><br><span class="line">        d[dq][i] = d[d[dq][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = ge[dq]; i; i = e[i].next)</span><br><span class="line">        <span class="keyword">if</span> (e[i].to != d[dq][<span class="number">0</span>]) &#123;</span><br><span class="line">            cdeep[e[i].to] = cdeep[dq] + e[i].cost;</span><br><span class="line">            d[e[i].to][<span class="number">0</span>] = dq;</span><br><span class="line">            <span class="built_in">init</span>(e[i].to);</span><br><span class="line">        &#125;</span><br><span class="line">    son[dq].second = cnta;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (deep[x] &lt; deep[y]) <span class="built_in">swap</span>(x, y);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = lgn; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        <span class="keyword">if</span> (deep[d[x][i]] &gt;= deep[y])</span><br><span class="line">            x = d[x][i];</span><br><span class="line">    <span class="keyword">if</span> (x == y) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = lgn; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        <span class="keyword">if</span> (d[x][i] != d[y][i])</span><br><span class="line">            x = d[x][i], y = d[y][i];</span><br><span class="line">    <span class="keyword">return</span> d[x][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line">LL sumc, maxc, minc;</span><br><span class="line">stack&lt;<span class="type">int</span>&gt; gary;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> dq)</span> </span>&#123;</span><br><span class="line">    size[dq] = ish[dq];</span><br><span class="line">    maxdeep[dq] = max2deep[dq] = <span class="number">0</span>;</span><br><span class="line">    mindeep[dq] = min2deep[dq] = INF;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = gb[dq]; i; i = b[i].next) &#123;</span><br><span class="line">        <span class="built_in">dfs</span>(b[i].to);</span><br><span class="line">        sumc += (LL)b[i].cost * (tn - size[b[i].to]) * size[b[i].to], size[dq] += size[b[i].to];</span><br><span class="line">        <span class="keyword">if</span> (maxdeep[b[i].to] + b[i].cost &gt; maxdeep[dq])</span><br><span class="line">            max2deep[dq] = maxdeep[dq], maxdeep[dq] = maxdeep[b[i].to] + b[i].cost;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (maxdeep[b[i].to] + b[i].cost &gt; max2deep[dq])</span><br><span class="line">            max2deep[dq] = maxdeep[b[i].to] + b[i].cost;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (mindeep[b[i].to] + b[i].cost &lt; mindeep[dq])</span><br><span class="line">            min2deep[dq] = mindeep[dq], mindeep[dq] = mindeep[b[i].to] + b[i].cost;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (mindeep[b[i].to] + b[i].cost &lt; min2deep[dq])</span><br><span class="line">            min2deep[dq] = mindeep[b[i].to] + b[i].cost;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ish[dq]) &#123;</span><br><span class="line">        minc = <span class="built_in">min</span>(minc, mindeep[dq]);</span><br><span class="line">        min2deep[dq] = mindeep[dq] = <span class="number">0</span>;</span><br><span class="line">        maxc = <span class="built_in">max</span>(maxc, maxdeep[dq]);</span><br><span class="line">        <span class="keyword">if</span> (maxdeep[dq] &amp;&amp; max2deep[dq])</span><br><span class="line">            maxc = <span class="built_in">max</span>(maxc, maxdeep[dq] + max2deep[dq]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mindeep[dq] &lt; INF &amp;&amp; min2deep[dq] &lt; INF)</span><br><span class="line">            minc = <span class="built_in">min</span>(minc, mindeep[dq] + min2deep[dq]);</span><br><span class="line">        <span class="keyword">if</span> (maxdeep[dq] &amp;&amp; max2deep[dq])</span><br><span class="line">            maxc = <span class="built_in">max</span>(maxc, maxdeep[dq] + max2deep[dq]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> son[x].first &lt; son[y].first; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cntb = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">sort</span>(h + <span class="number">1</span>, h + h[<span class="number">0</span>] + <span class="number">1</span>, cmp);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = h[<span class="number">0</span>]; i &gt; <span class="number">1</span>; i--)</span><br><span class="line">        h[++h[<span class="number">0</span>]] = <span class="built_in">lca</span>(h[i], h[i - <span class="number">1</span>]);</span><br><span class="line">    h[++h[<span class="number">0</span>]] = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">sort</span>(h + <span class="number">1</span>, h + h[<span class="number">0</span>] + <span class="number">1</span>, cmp);</span><br><span class="line">    h[<span class="number">0</span>] = <span class="built_in">unique</span>(h + <span class="number">1</span>, h + h[<span class="number">0</span>] + <span class="number">1</span>) - h - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (!gary.<span class="built_in">empty</span>())</span><br><span class="line">        gary.<span class="built_in">pop</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= h[<span class="number">0</span>]; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (!gary.<span class="built_in">empty</span>() &amp;&amp; son[gary.<span class="built_in">top</span>()].second &lt; son[h[i]].first) gary.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (!gary.<span class="built_in">empty</span>()) <span class="built_in">adn</span>(gb, b, cntb, gary.<span class="built_in">top</span>(), h[i], cdeep[h[i]] - cdeep[gary.<span class="built_in">top</span>()]);</span><br><span class="line">        gary.<span class="built_in">push</span>(h[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    sumc = <span class="number">0</span>, maxc = <span class="number">0</span>, minc = INF;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld %lld %lld\n&quot;</span>, sumc, minc, maxc);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= h[<span class="number">0</span>]; i++)</span><br><span class="line">        ish[h[i]] = gb[h[i]] = size[h[i]] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, srx, sry, src = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;srx, &amp;sry), <span class="built_in">adn</span>(ge, e, cnte, srx, sry, src), <span class="built_in">adn</span>(ge, e, cnte, sry, srx, src);</span><br><span class="line">    d[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">init</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;q);</span><br><span class="line">    <span class="built_in">memset</span>(ish, <span class="literal">false</span>, <span class="built_in">sizeof</span>(ish));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= q; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;h[<span class="number">0</span>]);</span><br><span class="line">        tn = h[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= h[<span class="number">0</span>]; j++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;h[j]), ish[h[j]] = <span class="literal">true</span>;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>By 准备退役旅游的 Cansult</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 虚树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>水题笔记 BZOJ2957 楼房重建 [线段树]</title>
      <link href="/posts/55750.html"/>
      <url>/posts/55750.html</url>
      
        <content type="html"><![CDATA[<p>地狱空荡荡 魔鬼在人间</p><span id="more"></span><h3 id="懵逼的-题目">懵逼的 题目</h3><p><ahref="https://lydsy.com/JudgeOnline/problem.php?id=2957">BZOJ</a></p><h3 id="扯淡的-题解">扯淡的 题解</h3><p>记得好多课件的例题都是这个 一直没看</p><p>一开始没见过这种套路...冥(两)思(天)苦(晒)想(网)了一个晚自习后终于想到用左区间来更新右区间...</p><p>想到了就木得难度了...修改后无非两种情况 有影响和没影响,有影响就对那个区间用类似线段数二分的操作 能像右走就向右走然后到一个节点更新就完事了</p><p>时间复杂度最多是<span class="math inline">\(\mathrm O(n\lg^2n)\)</span>的 因为基本上跑不满所以实际上跑的飞快</p><h3 id="沙茶的-代码">沙茶的 代码</h3><p>直接抄<a href="http://hzwer.com/6746.html">黄学长</a>的吧</p><p>黄学长代码简洁又好看啊</p><p>注意<code>ans</code>代表的是<strong>区间内部</strong>的答案,也就是说排除了区间外的影响, 仅靠区间内的数互相遮挡 能得到的答案</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 1000000000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)f=<span class="number">-1</span>;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line"><span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;x=x*<span class="number">10</span>+ch-<span class="string">&#x27;0&#x27;</span>;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">data</span>&#123;</span><br><span class="line"><span class="type">int</span> l,r,ans;</span><br><span class="line"><span class="type">double</span> val,lx,mx;</span><br><span class="line">&#125;t[<span class="number">400005</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">t[k].l=l;t[k].r=r;<span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l==r)<span class="keyword">return</span>;</span><br><span class="line"><span class="built_in">build</span>(k&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line"><span class="built_in">build</span>(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cal</span><span class="params">(<span class="type">int</span> k,<span class="type">double</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> l=t[k].l,r=t[k].r;</span><br><span class="line"><span class="keyword">if</span>(l==r)<span class="keyword">return</span> t[k].val&gt;val;</span><br><span class="line"><span class="keyword">if</span>(t[k&lt;&lt;<span class="number">1</span>].val&lt;=val)<span class="keyword">return</span> <span class="built_in">cal</span>(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,val);</span><br><span class="line"><span class="keyword">return</span> t[k].ans-t[k&lt;&lt;<span class="number">1</span>].ans+<span class="built_in">cal</span>(k&lt;&lt;<span class="number">1</span>,val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> pos,<span class="type">double</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> l=t[k].l,r=t[k].r,mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l==r)</span><br><span class="line">&#123;</span><br><span class="line">t[k].ans=<span class="number">1</span>;</span><br><span class="line">t[k].val=val;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(pos&lt;=mid)<span class="built_in">modify</span>(k&lt;&lt;<span class="number">1</span>,pos,val);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">modify</span>(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,pos,val);</span><br><span class="line">t[k].val=<span class="built_in">max</span>(t[k&lt;&lt;<span class="number">1</span>].val,t[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].val);</span><br><span class="line">t[k].ans=t[k&lt;&lt;<span class="number">1</span>].ans+<span class="built_in">cal</span>(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,t[k&lt;&lt;<span class="number">1</span>].val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n=<span class="built_in">read</span>();m=<span class="built_in">read</span>();</span><br><span class="line"><span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line"><span class="keyword">while</span>(m--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x=<span class="built_in">read</span>(),y=<span class="built_in">read</span>();</span><br><span class="line"><span class="built_in">modify</span>(<span class="number">1</span>,x,(<span class="type">double</span>)y/x);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,t[<span class="number">1</span>].ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>By 准备退役旅游的 Cansult</p>]]></content>
      
      
      <categories>
          
          <category> 水题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>比赛总结 Codeforces Round 532 (Div. 2) [二分, 线性基, 交互, 清奇脑回路, Tarjan]</title>
      <link href="/posts/1096.html"/>
      <url>/posts/1096.html</url>
      
        <content type="html"><![CDATA[<p>每次我不打的比赛都贼好上分...</p><p>带<span class="math inline">\(\lg\)</span>的算法是真的舒服</p><span id="more"></span><h3 id="d.-dasha-and-chess"><ahref="https://codeforces.com/contest/1100/problem/D">D. Dasha andChess</a></h3><p>题意: 交互题...在一个<span class="math inline">\(999 \times999\)</span>的棋盘上, 你有一个白子, <spanclass="math inline">\(CF\)</span>有<spanclass="math inline">\(666\)</span>个黑子, 每回合双方都只能移动一个子,黑子可以移动到棋盘上任意一个没有子的位置,白子只能向周围八个方向移动一格, 你先手, 当<spanclass="math inline">\(CF\)</span>移动完成之后, 若有黑子与白子同行或同列,则白胜, 问白子怎么走在<spanclass="math inline">\(2000\)</span>内获胜</p><p>大...大傻和象棋???</p><p>嗯...我一开始想的是预处理出每个点需要走多少步才能允许白点在这个位置,然后在对每个点看看白点需要走多少步能到达这个位置,然后就一路跑就完事了</p><p>后来发现<ahref="https://codeforces.com/contest/1100/submission/48353320">SamuraiBebop大爷的代码</a>似乎更好写一些?</p><p>先走到<span class="math inline">\((500,500)\)</span>然后看哪个角(准确的说是围棋里愚三角的形状, 包含三个<spanclass="math inline">\(\frac{1}{2}\)</span>原大小的正方形)包含的点数大于<spanclass="math inline">\(500\)</span>, 然后就一路向那个角走,因为走一步影响了行和列至少两个点, 而黑点一次只能移动一个,所以最后一定会获胜</p><p>懒得写了...</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 1005</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 1000000000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MOD 1000000007</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> F first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> S second</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; P;</span><br><span class="line"><span class="type">int</span> x,y,k,xx,yy;</span><br><span class="line"><span class="type">bool</span> rook[MAXN][MAXN];</span><br><span class="line">P rk[MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mov</span><span class="params">(<span class="type">int</span> dx,<span class="type">int</span> dy)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(dx!=<span class="number">0</span>&amp;&amp;dy!=<span class="number">0</span>&amp;&amp;rook[x+dx][y+dy])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">assert</span>(!rook[x][y+dy]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,x,y+dy);</span><br><span class="line">        y=y+dy;</span><br><span class="line">        <span class="built_in">fflush</span>(stdout);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;k,&amp;xx,&amp;yy);</span><br><span class="line">        <span class="built_in">assert</span>(k==<span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,x+dx,y+dy);</span><br><span class="line">    <span class="built_in">fflush</span>(stdout);</span><br><span class="line">    x+=dx;y+=dy;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;k,&amp;xx,&amp;yy);</span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">-1</span>) <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    rook[rk[k].F][rk[k].S]=<span class="literal">false</span>;</span><br><span class="line">    rook[xx][yy]=<span class="literal">true</span>;</span><br><span class="line">    rk[k]=<span class="built_in">P</span>(xx,yy);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">666</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;xx,&amp;yy);</span><br><span class="line">        rook[xx][yy]=<span class="literal">true</span>;</span><br><span class="line">        rk[i]=<span class="built_in">P</span>(xx,yy);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(x&lt;<span class="number">500</span>) <span class="built_in">mov</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">while</span>(x&gt;<span class="number">500</span>) <span class="built_in">mov</span>(<span class="number">-1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">while</span>(y&lt;<span class="number">500</span>) <span class="built_in">mov</span>(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span>(y&gt;<span class="number">500</span>) <span class="built_in">mov</span>(<span class="number">0</span>,<span class="number">-1</span>);</span><br><span class="line">    <span class="type">int</span> cnt0=<span class="number">0</span>,cnt1=<span class="number">0</span>,cnt2=<span class="number">0</span>,cnt3=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">666</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(rk[i].F&gt;=<span class="number">500</span>||rk[i].S&lt;=<span class="number">500</span>) cnt0++;</span><br><span class="line">        <span class="keyword">if</span>(rk[i].F&gt;=<span class="number">500</span>||rk[i].S&gt;=<span class="number">500</span>) cnt1++;</span><br><span class="line">        <span class="keyword">if</span>(rk[i].F&lt;=<span class="number">500</span>||rk[i].S&gt;=<span class="number">500</span>) cnt2++;</span><br><span class="line">        <span class="keyword">if</span>(rk[i].F&lt;=<span class="number">500</span>||rk[i].S&lt;=<span class="number">500</span>) cnt3++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(cnt0&gt;=<span class="number">500</span>) <span class="keyword">while</span>(<span class="literal">true</span>) <span class="built_in">mov</span>(<span class="number">1</span>,<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">if</span>(cnt1&gt;=<span class="number">500</span>) <span class="keyword">while</span>(<span class="literal">true</span>) <span class="built_in">mov</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(cnt2&gt;=<span class="number">500</span>) <span class="keyword">while</span>(<span class="literal">true</span>) <span class="built_in">mov</span>(<span class="number">-1</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(cnt3&gt;=<span class="number">500</span>) <span class="keyword">while</span>(<span class="literal">true</span>) <span class="built_in">mov</span>(<span class="number">-1</span>,<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="e.-andrew-and-taxi"><ahref="https://codeforces.com/contest/1100/problem/E">E. Andrew andTaxi</a></h3><p>题意: 给一个有向图, 边有边权, 要求选择一些边翻转, 使图变成<spanclass="math inline">\(DAG\)</span>, 且边权最大值最小; 要求<spanclass="math inline">\(\mathrm O(n\lg n)\)</span>的做法</p><p>一开始gayge给我说错题意了...说让边权和最小...我直接就懵逼了...</p><p>后来知道是要求最大边权最小... = =<del>这不是很垃圾吗</del>直接二分答案然后把大于答案的边拿出来跑<spanclass="math inline">\(Tarjan\)</span>, 如果有环就<code>false</code>,否则<code>true</code></p><p><del>输出方案就是乱搞...</del>好吧Refun大爷教我输出方案的正确姿势是对于可以更改的边,由拓扑序(入度仅包括不可更改的边)小的点连向拓扑序大的,这样可以保证不会出现环</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (100000 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF (1000000000 + 5)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edg</span> &#123;</span><br><span class="line"><span class="type">int</span> from, to, cost, next, bh;</span><br><span class="line">&#125; b[MAXN];</span><br><span class="line"><span class="type">int</span> n, m, cntb, g[MAXN], dfn[MAXN], low[MAXN], cntdfn, du[MAXN], rnk[MAXN];</span><br><span class="line"><span class="type">bool</span> ins[MAXN];</span><br><span class="line">stack&lt;<span class="type">int</span>&gt; gary;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; outp;</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">tarjan</span><span class="params">(<span class="type">int</span> dq, <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">gary.<span class="built_in">push</span>(dq);</span><br><span class="line">ins[dq] = <span class="literal">true</span>;</span><br><span class="line">dfn[dq] = low[dq] = ++cntdfn;</span><br><span class="line"><span class="type">bool</span> re = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = g[dq]; i; i = b[i].next) &#123;</span><br><span class="line"><span class="keyword">if</span> (b[i].cost &lt;= x) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (!dfn[b[i].to])</span><br><span class="line">re |= <span class="built_in">tarjan</span>(b[i].to, x), low[dq] = <span class="built_in">min</span>(low[dq], low[b[i].to]);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (ins[b[i].to])</span><br><span class="line">low[dq] = <span class="built_in">min</span>(low[dq], dfn[b[i].to]);</span><br><span class="line"><span class="keyword">if</span> (re)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (dfn[dq] == low[dq]) &#123;</span><br><span class="line"><span class="keyword">if</span> (gary.<span class="built_in">top</span>() != dq)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">while</span> (gary.<span class="built_in">top</span>() != dq) ins[gary.<span class="built_in">top</span>()] = <span class="literal">false</span>, gary.<span class="built_in">pop</span>();</span><br><span class="line">gary.<span class="built_in">pop</span>();</span><br><span class="line">ins[dq] = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ef</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> le = <span class="number">0</span>, ri = INF, ans = INF;</span><br><span class="line"><span class="keyword">while</span> (le &lt; ri) &#123;</span><br><span class="line"><span class="type">int</span> mi = (le + ri) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="built_in">memset</span>(dfn, <span class="number">0</span>, <span class="built_in">sizeof</span>(dfn));</span><br><span class="line"><span class="built_in">memset</span>(low, <span class="number">0</span>, <span class="built_in">sizeof</span>(low));</span><br><span class="line">cntdfn = <span class="number">0</span>;</span><br><span class="line"><span class="type">bool</span> ok = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n &amp;&amp; !ok; i++)</span><br><span class="line"><span class="keyword">if</span> (!dfn[i])</span><br><span class="line">ok = <span class="built_in">tarjan</span>(i, mi);</span><br><span class="line"><span class="keyword">if</span> (ok) le = mi + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> ans = ri = mi;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, ans);</span><br><span class="line"><span class="keyword">if</span> (!ans) &#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line"><span class="keyword">if</span> (b[i].cost &gt; ans)</span><br><span class="line">++du[b[i].to];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="keyword">if</span> (!du[i])</span><br><span class="line">q.<span class="built_in">push</span>(i), rnk[i] = ++rnk[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line"><span class="type">int</span> dq = q.<span class="built_in">front</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = g[dq]; i; i = b[i].next)</span><br><span class="line"><span class="keyword">if</span> (b[i].cost &gt; ans) &#123;</span><br><span class="line">--du[b[i].to];</span><br><span class="line"><span class="keyword">if</span> (!du[b[i].to])</span><br><span class="line">rnk[b[i].to] = ++rnk[<span class="number">0</span>], q.<span class="built_in">push</span>(b[i].to);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line"><span class="keyword">if</span> (b[i].cost &lt;= ans &amp;&amp; rnk[b[i].from] &gt; rnk[b[i].to])</span><br><span class="line">outp.<span class="built_in">push_back</span>(b[i].bh);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, outp.<span class="built_in">size</span>());</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; outp.<span class="built_in">size</span>(); i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, outp[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">adn</span><span class="params">(<span class="type">int</span> from, <span class="type">int</span> to, <span class="type">int</span> cost, <span class="type">int</span> bh)</span> </span>&#123;</span><br><span class="line">b[++cntb].next = g[from];</span><br><span class="line">b[cntb].from = from, b[cntb].to = to, b[cntb].cost = cost, b[cntb].bh = bh;</span><br><span class="line">g[from] = cntb;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, srx, sry, src; i &lt;= m; i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;srx, &amp;sry, &amp;src), <span class="built_in">adn</span>(srx, sry, src, i);</span><br><span class="line"><span class="built_in">ef</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="f.-ivan-and-burgers"><ahref="https://codeforces.com/contest/1100/problem/F">F. Ivan andBurgers</a></h3><p>题意: 给一个大小为<span class="math inline">\(n\)</span>的序列,有<span class="math inline">\(q\)</span>个区间,求出每个区间中选一些数的异或最大值; 要求<spanclass="math inline">\(\mathrm O(n\lg n)\)</span>的做法</p><p>一开始以为是线性基板子题...这不就是开个线段树维护区间线性基吗<del>查询一次最多合并三个节点<span class="math inline">\(\mathrmO(n\lg^2n)\)</span>不能再科学了</del>然而被部长打脸了查询一次要合并<spanclass="math inline">\(\lg\)</span>个区间所以复杂度是<spanclass="math inline">\(\mathrm O(n \lg^3 n)\)</span>的就假了</p><p>然后发现似乎...跑不过去...</p><p>然后参悟了<ahref="https://codeforces.com/contest/1100/submission/48369357">dragonslayerintraining大爷的代码</a></p><p>发现了船新的<span class="math inline">\(\mathrm O(n\lgn)\)</span>的做法还贼好写...还是固定一个端点然后找满足另一个节点的套路...看代码还是很好懂的...</p><h4 id="before">Before</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (500000 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXL (20 + 2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LS(dq) ((dq) &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RS(dq) (((dq) &lt;&lt; 1) | 1)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">xxj</span> &#123;</span><br><span class="line"><span class="type">int</span> zh[MAXL];</span><br><span class="line"><span class="built_in">xxj</span>() &#123; <span class="built_in">memset</span>(zh, <span class="number">0</span>, <span class="built_in">sizeof</span>(zh)); &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ins</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = MAXL - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line"><span class="keyword">if</span> (x &amp; (<span class="number">1</span> &lt;&lt; i)) &#123;</span><br><span class="line"><span class="keyword">if</span> (!zh[i]) &#123;</span><br><span class="line">zh[i] = x;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">x ^= zh[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">max</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> re = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = MAXL - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line"><span class="keyword">if</span> ((re ^ zh[i]) &gt; re)</span><br><span class="line">re ^= zh[i];</span><br><span class="line"><span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line"><span class="type">int</span> le, ri;</span><br><span class="line">xxj zh;</span><br><span class="line">&#125; b[MAXN &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> n, a[MAXN];</span><br><span class="line"><span class="function">xxj <span class="title">uni</span><span class="params">(xxj re, <span class="type">const</span> xxj y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = MAXL - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">re.<span class="built_in">ins</span>(y.zh[i]);</span><br><span class="line"><span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">js</span><span class="params">(<span class="type">int</span> dq, <span class="type">int</span> le, <span class="type">int</span> ri)</span> </span>&#123;</span><br><span class="line">b[dq].le = le, b[dq].ri = ri;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = le; i &lt;= ri; i++) b[dq].zh.<span class="built_in">ins</span>(a[i]);</span><br><span class="line"><span class="keyword">if</span> (le == ri) <span class="keyword">return</span> ;</span><br><span class="line"><span class="type">int</span> mi = (le + ri) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="built_in">js</span>(<span class="built_in">LS</span>(dq), le, mi), <span class="built_in">js</span>(<span class="built_in">RS</span>(dq), mi + <span class="number">1</span>, ri);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">xxj <span class="title">cx</span><span class="params">(<span class="type">int</span> dq, <span class="type">int</span> le, <span class="type">int</span> ri)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (b[dq].le == le &amp;&amp; b[dq].ri == ri) <span class="keyword">return</span> b[dq].zh;</span><br><span class="line"><span class="type">int</span> mi = (b[dq].le + b[dq].ri) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (le &gt; mi) <span class="keyword">return</span> <span class="built_in">cx</span>(<span class="built_in">RS</span>(dq), le, ri);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (ri &lt;= mi) <span class="keyword">return</span> <span class="built_in">cx</span>(<span class="built_in">LS</span>(dq), le, ri);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">uni</span>(<span class="built_in">cx</span>(<span class="built_in">LS</span>(dq), le, mi), <span class="built_in">cx</span>(<span class="built_in">RS</span>(dq), mi + <span class="number">1</span>, ri));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> re = <span class="number">0</span>;</span><br><span class="line"><span class="type">char</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (x &lt; <span class="string">&#x27;0&#x27;</span> || x &gt; <span class="string">&#x27;9&#x27;</span>) x = <span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span> (x &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; x &lt;= <span class="string">&#x27;9&#x27;</span>) re = re * <span class="number">10</span> + x - <span class="string">&#x27;0&#x27;</span>, x = <span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">n = <span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) a[i] = <span class="built_in">read</span>();</span><br><span class="line"><span class="built_in">js</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line"><span class="type">int</span> q;</span><br><span class="line">q = <span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, srx, sry; i &lt;= q; i++) srx = <span class="built_in">read</span>(), sry = <span class="built_in">read</span>(), <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">cx</span>(<span class="number">1</span>, srx, sry).<span class="built_in">max</span>());</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="after">After</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (500000 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXL (20 + 1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">xxj</span> &#123;</span><br><span class="line">pii zh[MAXL];</span><br><span class="line"><span class="built_in">xxj</span>() &#123; <span class="built_in">memset</span>(zh, <span class="number">0</span>, <span class="built_in">sizeof</span>(zh)); &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ins</span><span class="params">(pii x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = MAXL - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line"><span class="keyword">if</span> (x.second &amp; (<span class="number">1</span> &lt;&lt; i)) &#123;</span><br><span class="line"><span class="keyword">if</span> (!zh[i].second) &#123;</span><br><span class="line">zh[i] = x;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line">x.second ^= zh[i].second;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">max</span><span class="params">(<span class="type">int</span> le)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> re = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = MAXL - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line"><span class="keyword">if</span> (zh[i].first &gt;= le &amp;&amp; (re ^ zh[i].second) &gt; re)</span><br><span class="line">re ^= zh[i].second;</span><br><span class="line"><span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line">&#125;node[MAXN]; </span><br><span class="line"><span class="type">int</span> n, q;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, srx; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;srx);</span><br><span class="line">vector&lt;pii&gt; qwq;</span><br><span class="line">qwq.<span class="built_in">push_back</span>(<span class="built_in">make_pair</span>(i, srx));</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; MAXL; j++)</span><br><span class="line"><span class="keyword">if</span> (node[i - <span class="number">1</span>].zh[j].second)</span><br><span class="line">qwq.<span class="built_in">push_back</span>(node[i - <span class="number">1</span>].zh[j]);</span><br><span class="line"><span class="built_in">sort</span>(qwq.<span class="built_in">begin</span>(), qwq.<span class="built_in">end</span>());</span><br><span class="line"><span class="type">int</span> ni = qwq.<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = ni - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--)</span><br><span class="line">node[i].<span class="built_in">ins</span>(qwq[j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> q;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;q);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, srx, sry; i &lt;= q; i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;srx, &amp;sry), <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, node[sry].<span class="built_in">max</span>(srx));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>By 准备退役旅游的 Cansult</p>]]></content>
      
      
      <categories>
          
          <category> 比赛总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 清奇脑回路 </tag>
            
            <tag> 二分 </tag>
            
            <tag> 交互 </tag>
            
            <tag> 线性基 </tag>
            
            <tag> Tarjan </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>水题笔记 1396 识别子串 &amp;&amp; 2865 字符串识别 [SAM]</title>
      <link href="/posts/26622.html"/>
      <url>/posts/26622.html</url>
      
        <content type="html"><![CDATA[<p>人之初 性本恶</p><span id="more"></span><h3 id="懵逼的-题目">懵逼的 题目</h3><p><ahref="https://lydsy.com/JudgeOnline/problem.php?id=1396">BZOJ1396</a></p><p><a href="https://lydsy.com/JudgeOnline/problem.php?id=2865">BZOJ2865</a></p><h3 id="扯淡的-题解">扯淡的 题解</h3><p>嗯...我会求每个点的<span class="math inline">\(|endpos|\)</span>!对于每个点<span class="math inline">\(i\)</span>,我们发现我们只需要把</p><ul><li><span class="math inline">\([1, maxlen_i - minlen_i -1]\)</span>中的点<span class="math inline">\(j\)</span>和<spanclass="math inline">\(maxlen_i - j + 1\)</span>取<spanclass="math inline">\(\min\)</span>(感谢gayge拉住了我告诉我这个东西不用写区间修改等差数列...)</li><li><span class="math inline">\([maxlen_i - minlen_i,wz_i]\)</span>中的点和<span class="math inline">\(maxlen_i - minlen_i +1\)</span>取<span class="math inline">\(\min\)</span>就完事了</li></ul><h3 id="沙茶的-代码">沙茶的 代码</h3><p>2865那题卡SAM?我估计只用一个线段树并且把线段树改成不记录左右端点的版本应该就可以了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**************************************************************</span></span><br><span class="line"><span class="comment">    Problem: 1396</span></span><br><span class="line"><span class="comment">    User: Cansult</span></span><br><span class="line"><span class="comment">    Language: C++</span></span><br><span class="line"><span class="comment">    Result: Accepted</span></span><br><span class="line"><span class="comment">    Time:1384 ms</span></span><br><span class="line"><span class="comment">    Memory:37660 kb</span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (100000 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF (0X7FFFFFFF)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXZ (26)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LS(dq) ((dq) &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RS(dq) (((dq) &lt;&lt; 1) | 1)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">xds</span> &#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">        <span class="type">int</span> le, ri, zh;</span><br><span class="line">    &#125; b[MAXN &lt;&lt; <span class="number">2</span>];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">js</span><span class="params">(<span class="type">int</span> dq, <span class="type">int</span> le, <span class="type">int</span> ri)</span> </span>&#123;</span><br><span class="line">        b[dq].zh = INF, b[dq].le = le, b[dq].ri = ri;</span><br><span class="line">        <span class="keyword">if</span> (le == ri) <span class="keyword">return</span> ;</span><br><span class="line">        <span class="type">int</span> mi = (le + ri) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">js</span>(<span class="built_in">LS</span>(dq), le, mi), <span class="built_in">js</span>(<span class="built_in">RS</span>(dq), mi + <span class="number">1</span>, ri);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">cx</span><span class="params">(<span class="type">int</span> dq, <span class="type">int</span> wz)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> re = b[dq].zh;</span><br><span class="line">        <span class="keyword">if</span> (b[dq].le == b[dq].ri) <span class="keyword">return</span> re;</span><br><span class="line">        <span class="type">int</span> mi = (b[dq].le + b[dq].ri) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (wz &lt;= mi) <span class="keyword">return</span> <span class="built_in">min</span>(<span class="built_in">cx</span>(<span class="built_in">LS</span>(dq), wz), re);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">min</span>(<span class="built_in">cx</span>(<span class="built_in">RS</span>(dq), wz), re);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">xg</span><span class="params">(<span class="type">int</span> dq, <span class="type">int</span> le, <span class="type">int</span> ri, <span class="type">int</span> zh)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (le &gt; ri) <span class="keyword">return</span> ;</span><br><span class="line">        <span class="keyword">if</span> (b[dq].le == le &amp;&amp; b[dq].ri == ri) &#123;</span><br><span class="line">            b[dq].zh = <span class="built_in">min</span>(b[dq].zh, zh);</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> mi = (b[dq].le + b[dq].ri) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (ri &lt;= mi) <span class="built_in">xg</span>(<span class="built_in">LS</span>(dq), le, ri, zh);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (le &gt; mi) <span class="built_in">xg</span>(<span class="built_in">RS</span>(dq), le, ri, zh);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">xg</span>(<span class="built_in">LS</span>(dq), le, mi, zh), <span class="built_in">xg</span>(<span class="built_in">RS</span>(dq), mi + <span class="number">1</span>, ri, zh);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SAM</span> &#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">        <span class="type">int</span> maxlen, suff_link, trans[MAXZ], size, wz;</span><br><span class="line">        <span class="built_in">node</span> (<span class="type">int</span> maxlen = <span class="number">0</span>): <span class="built_in">maxlen</span>(maxlen), <span class="built_in">suff_link</span>(<span class="number">0</span>), <span class="built_in">size</span>(<span class="number">0</span>) &#123; <span class="built_in">memset</span>(trans, <span class="number">0</span>, <span class="built_in">sizeof</span>(trans)); &#125;</span><br><span class="line">    &#125; b[MAXN &lt;&lt; <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">edg</span> &#123;</span><br><span class="line">        <span class="type">int</span> to, next;</span><br><span class="line">    &#125; tb[MAXN &lt;&lt; <span class="number">1</span>];</span><br><span class="line">    <span class="type">int</span> s, last, cntb, g[MAXN &lt;&lt; <span class="number">1</span>], cntt, n;</span><br><span class="line">    xds qwq, qaq;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123; s = last = cntb = <span class="number">1</span>, n = <span class="number">0</span>; &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">adn</span><span class="params">(<span class="type">int</span> from, <span class="type">int</span> to)</span> </span>&#123;</span><br><span class="line">        tb[++cntt].next = g[from];</span><br><span class="line">        tb[cntt].to = to;</span><br><span class="line">        g[from] = cntt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">ins</span><span class="params">(<span class="type">char</span> xc)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> y = xc - <span class="string">&#x27;a&#x27;</span>, dq = ++cntb, dql = last;</span><br><span class="line">        b[dq] = <span class="built_in">node</span>(b[dql].maxlen + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (; dql &amp;&amp; !b[dql].trans[y]; dql = b[dql].suff_link) b[dql].trans[y] = dq;</span><br><span class="line">        <span class="keyword">if</span> (!dql) b[dq].suff_link = s;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (b[dql].maxlen + <span class="number">1</span> == b[b[dql].trans[y]].maxlen) b[dq].suff_link = b[dql].trans[y];</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">int</span> c = ++cntb, dqd = b[dql].trans[y];</span><br><span class="line">            b[c] = <span class="built_in">node</span>(b[dql].maxlen + <span class="number">1</span>);</span><br><span class="line">            b[c].suff_link = b[dqd].suff_link;</span><br><span class="line">            b[dq].suff_link = b[dqd].suff_link = c;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; MAXZ; i++) b[c].trans[i] = b[dqd].trans[i];</span><br><span class="line">            <span class="keyword">for</span> (; dql &amp;&amp; b[dql].trans[y] == dqd; dql = b[dql].suff_link) b[dql].trans[y] = c;</span><br><span class="line">        &#125;</span><br><span class="line">        b[dq].wz = ++n;</span><br><span class="line">        b[last = dq].size = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> dq)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = g[dq]; i; i = tb[i].next) b[dq].size += <span class="built_in">dfs</span>(tb[i].to);</span><br><span class="line">        <span class="keyword">return</span> b[dq].size;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= cntb; i++) <span class="built_in">adn</span>(b[i].suff_link, i);</span><br><span class="line">        <span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line">        qwq.<span class="built_in">js</span>(<span class="number">1</span>, <span class="number">1</span>, n), qaq.<span class="built_in">js</span>(<span class="number">1</span>, <span class="number">1</span>, n); </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= cntb; i++)</span><br><span class="line">            <span class="keyword">if</span> (b[i].size == <span class="number">1</span>) &#123;</span><br><span class="line">                qaq.<span class="built_in">xg</span>(<span class="number">1</span>, <span class="number">1</span>, b[i].wz - b[b[i].suff_link].maxlen, b[i].maxlen + <span class="number">1</span>);</span><br><span class="line">                qwq.<span class="built_in">xg</span>(<span class="number">1</span>, b[i].wz - b[b[i].suff_link].maxlen + <span class="number">1</span>, b[i].wz, b[b[i].suff_link].maxlen + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">min</span>(qwq.<span class="built_in">cx</span>(<span class="number">1</span>, i), qaq.<span class="built_in">cx</span>(<span class="number">1</span>, i) - i));</span><br><span class="line">    &#125;</span><br><span class="line">&#125; refun;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">char</span> s[MAXN];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s);</span><br><span class="line">    n = <span class="built_in">strlen</span>(s);</span><br><span class="line">    refun.<span class="built_in">init</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        refun.<span class="built_in">ins</span>(s[i]);</span><br><span class="line">    refun.<span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>By 准备退役旅游的 Cansult</p>]]></content>
      
      
      <categories>
          
          <category> 水题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SAM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记 SAM</title>
      <link href="/posts/16199.html"/>
      <url>/posts/16199.html</url>
      
        <content type="html"><![CDATA[<p>垂死病中惊坐起, 笑闻学弟切SAM</p><p>是时候补一篇学习笔记了</p><p>为啥每次我打后缀自动机都出来孩子战斗机啊</p><span id="more"></span><h3 id="定义">定义</h3><blockquote><p>// 基本上是自己瞎捷豹编的</p></blockquote><p><code>s</code>: SAM的起点, 一切转移从这里开始...</p><p><code>endpos[(string) x]</code>:字符串<code>x</code>在原串中出现位置(取<code>x</code>结尾的下标)的集合</p><p>终点:所有<code>endpos</code>包含<code>n</code>的节点都是终点(感谢yt姐姐告诉我终点有很多个qwq)</p><p>节点: 自动机中的点, 一个节点包含着一类<code>endpos</code>相同(必须 完全 一 致 )的子串</p><p><code>maxlen[x]</code>和<code>minlen[x]</code>:代表节点<code>x</code>中包含的长度最长的子串和长度最短的子串(有的时候也省略为起长度)</p><p>节点后缀: 对于节点<code>x</code>,节点后缀就是<code>maxlen[x]</code>的所有后缀,显然这个节点包含的所有的子串属于这个点的节点后缀,而长度大于<code>minlen[x]</code>的节点后缀就是这个节点所包含的节点</p><p>边: - <code>trans[x][y]</code>:在节点<code>x</code>处后一个字符为<code>y</code>时转移到的节点;如果不能识别, <code>trans[x][y] = NULL</code> -<code>suff_link[x]</code>: 指向 [包含[第一个长度小于<code>minlen[x]</code>的节点后缀] 的节点],因为<code>minlen</code>沿着<code>suff_link</code>是单调递减的,所以最后一定会变为空串, 即指向初始节点<code>s</code> -<code>suff_path[x]</code>: 从节点<code>x</code>开始,由<code>suff_link</code>一直向上, 组成的路径,终点为<code>s</code>(显然<code>suff_path[x]</code>上的节点的<code>endpos</code>都会包含<code>endpos[x]</code>)</p><h3 id="转移">转移</h3><blockquote><p>// 一个大分类讨论...</p></blockquote><p><code>maxlen</code>为当前串的节点为<code>x</code>,新加入的字符为<code>y</code>...我们现在需要给所有合法的后缀都在后面加上一个字符<code>y</code>,因为原串扩充了一位所以肯定要增加一个节点, 先<code>++cntn</code>为敬</p><h4 id="i">I</h4><p>对于任意节点<span class="math inline">\(j \in\text{suff_path[x]}\)</span>, 都有<code>trans[j][y] = NULL</code></p><p>也就是所有的终点(<code>suff_path[x]</code>上所有点的<code>endpos</code>都包含<code>n</code>,也就是说他们都是终点)即当前串的所有后缀在当前串的子串都不能向<code>y</code>转移,既然坑上没有萝卜我们就可以直接让<code>suff_path</code>上的节点<code>trans[j][y] = cntn</code>;最后让<code>suff_link[cntn] = s</code>,因为之前的串上没有<code>trans[j][y]</code>, 终点又变成1个了</p><h4 id="ii">II</h4><p>在沿着<code>suff_path[x]</code>向上跳的时候,对于<code>trans[j][y] = NULL</code>的点,同<strong>I</strong>我们可以直接把他们的<code>trans</code>赋成<code>cntn</code>;</p><p>而遇到<code>trans[j][y] != NULL</code>且<code>maxlen[trans[j][y]] = maxlen[j] + 1</code>(为什么放在下面说)的情况时,我们发现我们没有必要继续向上跳了(上面的点也一定有<code>trans[j][y] != NULL</code>)我们可以直接把这些<code>trans[j][y]</code>作为终点,让<code>suff_link[x] = trans[j][y]</code>然后就可以直接返回了</p><h4 id="iii">III</h4><p>在沿着<code>suff_path[x]</code>向上跳的时候,<code>trans[j][y] = NULL</code>时处理还是同上</p><p>否则<code>trans[j][y] != NULL</code>且<code>maxlen[trans[j][y]] &gt; maxlen[j] + 1</code>:这个<code>trans[j][y]</code>并不是直接由<code>j</code>转移来的,所以如果我们把这个点当做一个终点的话,就会造成非后缀被识别为后缀(因为到达了终点), 所以我们要复制一个新点;</p><p>我们新建一个点<code>c</code>,<code>suff_link[c] = suff_link[trans[j][y]], trans[c] = trans[trans[j][y]], maxlen[c] = maxlen[j] + 1</code>,即我们新建一个节点作为终点, 且是只由<code>j</code>转移来的,然后后面的就和<strong>II</strong>是一样的了:<code>suff_link[cntn] = c</code></p><p>然后再做一些处理:修改<code>suff_link[trans[j][y]] = c</code>(节点<code>c</code>与<code>trans[j][y]</code>的最长公共后缀是最长的);沿着<code>suff_path[j]</code>向上走,对于路径上所有通过<code>y</code>转移到<code>trans[j][y]</code>的节点<code>g</code>:<code>trans[g][y] = c</code>(这些节点的后缀都是<code>j</code>的后缀,加上<code>y</code>后也就是新串的后缀);</p><hr /><p>是不是也不是很难?</p><h3 id="几道例题">几道例题</h3><h4 id="后缀自动机二重复旋律5"><ahref="https://hihocoder.com/problemset/problem/1445">后缀自动机二·重复旋律5</a></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXZ = <span class="number">26</span>, MAXN = <span class="number">1000000</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SAM</span> &#123;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line"><span class="type">int</span> trans[MAXZ], suff_link, maxlen;</span><br><span class="line"><span class="built_in">node</span> (<span class="type">int</span> ml = <span class="number">0</span>): <span class="built_in">suff_link</span>(<span class="number">0</span>), <span class="built_in">maxlen</span>(ml) &#123; <span class="built_in">memset</span>(trans, <span class="number">0</span>, <span class="built_in">sizeof</span>(trans)); &#125;</span><br><span class="line">&#125; b[MAXN * <span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> s, last, cntb;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123; s = last = cntb = <span class="number">1</span>; &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ins</span><span class="params">(<span class="type">char</span> xc)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> y = xc - <span class="string">&#x27;a&#x27;</span>, dq = ++cntb, dql = last;</span><br><span class="line">b[dq] = <span class="built_in">node</span>(b[dql].maxlen + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (; dql &amp;&amp; !b[dql].trans[y]; dql = b[dql].suff_link)b[dql].trans[y] = dq;</span><br><span class="line"><span class="keyword">if</span> (!dql)b[dq].suff_link = s;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (b[b[dql].trans[y]].maxlen == b[dql].maxlen + <span class="number">1</span>)b[dq].suff_link = b[dql].trans[y];</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="type">int</span> c = ++cntb, bd = b[dql].trans[y];</span><br><span class="line">b[c] = <span class="built_in">node</span>(b[dql].maxlen + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; MAXZ; i++)b[c].trans[i] = b[bd].trans[i];</span><br><span class="line">b[c].suff_link = b[bd].suff_link;</span><br><span class="line">b[bd].suff_link = b[dq].suff_link = c;</span><br><span class="line"><span class="keyword">for</span> (; dql &amp;&amp; b[dql].trans[y] == bd; dql = b[dql].suff_link)b[dql].trans[y] = c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> (last = dq);</span><br><span class="line">&#125;</span><br><span class="line">&#125;refun;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">refun.<span class="built_in">init</span>();</span><br><span class="line"><span class="type">char</span> srs[MAXN];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, srs);</span><br><span class="line"><span class="type">int</span> n = <span class="built_in">strlen</span>(srs);</span><br><span class="line">LL ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="type">int</span> last = refun.<span class="built_in">ins</span>(srs[i]);</span><br><span class="line">ans += (refun.b[last].maxlen - refun.b[refun.b[last].suff_link].maxlen);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>, ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="后缀自动机三重复旋律6"><ahref="https://hihocoder.com/problemset/problem/1449">后缀自动机三·重复旋律6</a></h4><p>这题还是挺有意思的</p><p><code>endpos[x]</code>就是所有<code>suff_link[j] == x</code>(这些<code>j</code>被称为<spanclass="math inline">\(parent\)</span>树上<code>x</code>的儿子)的<code>endpos</code>的并(看不懂的去瞅一眼定义...);如果这个<code>x</code>包含了总串的某个前缀,这个<code>endpos[x]</code>还要再加上自身的位置(这个位置肯定不会包含在<code>x</code>的儿子中,因为儿子都比<code>x</code>要长, 不会是原串这个位置的前缀)</p><p>然后数组开小了加上手残调了一个多小时...</p><p>我不知道我都干了什么...</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXZ = <span class="number">26</span>, MAXN = <span class="number">1000000</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SAM</span> &#123;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line"><span class="type">int</span>  maxlen, suff_link, trans[MAXZ];</span><br><span class="line"><span class="built_in">node</span>(<span class="type">int</span> maxlen = <span class="number">0</span>): <span class="built_in">maxlen</span>(maxlen), <span class="built_in">suff_link</span>(<span class="number">0</span>) &#123; <span class="built_in">memset</span>(trans, <span class="number">0</span>, <span class="built_in">sizeof</span>(trans)); &#125;</span><br><span class="line">&#125; b[MAXN &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> s, last, cntb;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123; s = last = cntb = <span class="number">1</span>; &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ins</span><span class="params">(<span class="type">char</span> xc)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> dq = ++cntb, y = xc - <span class="string">&#x27;a&#x27;</span>, dql = last;</span><br><span class="line">b[dq] = <span class="built_in">node</span>(b[last].maxlen + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (; dql &amp;&amp; !b[dql].trans[y]; dql = b[dql].suff_link)b[dql].trans[y] = dq;</span><br><span class="line"><span class="keyword">if</span> (!dql)b[dq].suff_link = s;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (b[dql].maxlen + <span class="number">1</span> == b[b[dql].trans[y]].maxlen)b[dq].suff_link = b[dql].trans[y];</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="type">int</span> c = ++cntb, dqd = b[dql].trans[y];</span><br><span class="line">b[c] = <span class="built_in">node</span>(b[dql].maxlen + <span class="number">1</span>); <span class="comment">// 这个地方一不小心打成 b[c] = node(b[last].maxlen + 1); 了...我也不知道我怎么搞的...</span></span><br><span class="line">b[c].suff_link = b[dqd].suff_link;</span><br><span class="line">b[dqd].suff_link = b[dq].suff_link = c;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; MAXZ; i++)b[c].trans[i] = b[dqd].trans[i];</span><br><span class="line"><span class="keyword">for</span> (; dql &amp;&amp; b[dql].trans[y] == dqd; dql = b[dql].suff_link)b[dql].trans[y] = c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> (last = dq);</span><br><span class="line">&#125;</span><br><span class="line">&#125;refun;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edg</span> &#123;</span><br><span class="line"><span class="type">int</span> to, next;</span><br><span class="line">&#125; b[MAXN &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> g[MAXN &lt;&lt; <span class="number">1</span>], cntb, size[MAXN &lt;&lt; <span class="number">1</span>], ans[MAXN]; </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">adn</span><span class="params">(<span class="type">int</span> from, <span class="type">int</span> to)</span> </span>&#123;</span><br><span class="line">b[++cntb].next = g[from];</span><br><span class="line">b[cntb].to = to;</span><br><span class="line">g[from] = cntb;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> dq)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = g[dq]; i; i = b[i].next)size[dq] += <span class="built_in">dfs</span>(b[i].to);</span><br><span class="line">ans[refun.b[dq].maxlen] = <span class="built_in">max</span>(ans[refun.b[dq].maxlen], size[dq]);</span><br><span class="line"><span class="keyword">return</span> size[dq];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">refun.<span class="built_in">init</span>();</span><br><span class="line"><span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="type">char</span> src = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">if</span> (src &lt; <span class="string">&#x27;a&#x27;</span> || src &gt; <span class="string">&#x27;z&#x27;</span>) <span class="keyword">break</span>;</span><br><span class="line">size[refun.<span class="built_in">ins</span>(src)] = <span class="number">1</span>, ++n;</span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="literal">true</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= refun.cntb; i++)<span class="built_in">adn</span>(refun.b[i].suff_link, i);</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">1</span>; i--)ans[i] = <span class="built_in">max</span>(ans[i], ans[i + <span class="number">1</span>]);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="后缀自动机四重复旋律7"><ahref="https://hihocoder.com/problemset/problem/1457">后缀自动机四·重复旋律7</a></h4><p>这种有多个串的题...如果一个答案只能在一个位置算贡献,我们就不能对多个串分开来算了, 我们可以把这些串都拼在一起,然后在中间加上不可见字符作为分割</p><p>这样这个题就很简单了...</p><p>忘初始化了...身败名裂</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (2000000 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXZ (11)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Refun (1000000000 + 7)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SAM</span> &#123;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line"><span class="type">int</span> maxlen, suff_link, trans[MAXZ], vsize; </span><br><span class="line">LL sum;</span><br><span class="line"><span class="built_in">node</span>(<span class="type">int</span> maxlen = <span class="number">0</span>): <span class="built_in">maxlen</span>(maxlen), <span class="built_in">suff_link</span>(<span class="number">0</span>), <span class="built_in">sum</span>(<span class="number">0</span>), <span class="built_in">vsize</span>(<span class="number">0</span>) &#123; <span class="built_in">memset</span>(trans, <span class="number">0</span>, <span class="built_in">sizeof</span>(trans)); &#125;</span><br><span class="line">&#125; b[MAXN &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> s, last, cntb, du[MAXN];</span><br><span class="line"><span class="type">bool</span> inq[MAXN &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123; s = last = cntb = <span class="number">1</span>; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ins</span><span class="params">(<span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> dq = ++cntb, dql = last;</span><br><span class="line">b[dq] = <span class="built_in">node</span>(b[dql].maxlen + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (; dql &amp;&amp; !b[dql].trans[y]; dql = b[dql].suff_link) b[dql].trans[y] = dq;</span><br><span class="line"><span class="keyword">if</span> (!dql) b[dq].suff_link = s;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (b[dql].maxlen + <span class="number">1</span> == b[b[dql].trans[y]].maxlen) b[dq].suff_link =b[dql].trans[y];</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="type">int</span> c = ++cntb, dqd = b[dql].trans[y];</span><br><span class="line">b[c] = <span class="built_in">node</span>(b[dql].maxlen + <span class="number">1</span>);</span><br><span class="line">b[c].suff_link = b[dqd].suff_link;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; MAXZ; i++) b[c].trans[i] = b[dqd].trans[i];</span><br><span class="line">b[dqd].suff_link = b[dq].suff_link = c;</span><br><span class="line"><span class="keyword">for</span> (; dql &amp;&amp; b[dql].trans[y] == dqd; dql = b[dql].suff_link) b[dql].trans[y] = c;</span><br><span class="line">&#125;</span><br><span class="line">last = dq;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">LL ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= cntb; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; MAXZ; j++)</span><br><span class="line"><span class="keyword">if</span> (b[i].trans[j])</span><br><span class="line">++du[b[i].trans[j]];</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">q.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line">b[<span class="number">1</span>].vsize = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line"><span class="type">int</span> dq = q.<span class="built_in">front</span>();</span><br><span class="line">ans = (ans + b[dq].sum) % Refun;</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; MAXZ; i++)</span><br><span class="line"><span class="keyword">if</span> (b[dq].trans[i]) &#123;</span><br><span class="line">--du[b[dq].trans[i]];</span><br><span class="line"><span class="keyword">if</span> (i != <span class="number">10</span>) &#123;</span><br><span class="line">b[b[dq].trans[i]].vsize += b[dq].vsize;</span><br><span class="line">b[b[dq].trans[i]].sum = (b[b[dq].trans[i]].sum + b[dq].sum * <span class="number">10</span> + i * b[dq].vsize) % Refun;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!du[b[dq].trans[i]])</span><br><span class="line">q.<span class="built_in">push</span>(b[dq].trans[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line">&#125; refun;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">char</span> s[MAXN];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">refun.<span class="built_in">init</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s);</span><br><span class="line"><span class="type">int</span> tn = <span class="built_in">strlen</span>(s);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; tn; j++)</span><br><span class="line">refun.<span class="built_in">ins</span>(s[j] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">refun.<span class="built_in">ins</span>(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line">refun.<span class="built_in">solve</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="后缀自动机五重复旋律8"><ahref="https://hihocoder.com/problemset/problem/1465">后缀自动机五·重复旋律8</a></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">咕咕咕</span><br></pre></td></tr></table></figure><p>By 准备退役旅游的 Cansult</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
            <tag> SAM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>翻车笔记 [Hnoi2017]影魔 [清奇脑回路, 扫描线, 离线]</title>
      <link href="/posts/21016.html"/>
      <url>/posts/21016.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>"我已经想到了一个绝妙的证明, 可惜这里空间太小, 写不下" by 费马</p></blockquote><blockquote><p>"我昨天就已经想到了一个绝妙的解法, 可惜我老年痴呆, 忘了" by 宽嫂</p></blockquote><span id="more"></span><h3 id="懵逼的-题目">懵逼的 题目</h3><p><ahref="https://lydsy.com/JudgeOnline/problem.php?id=4826">BZOJ</a></p><h3 id="扯淡的-题解">扯淡的 题解</h3><p>这种题基本上都要先求出来<code>premax</code>,<code>nexmax</code>之类的...</p><p>一开始思维江化, 老是想着怎么以每个点为端点,然后取算贡献...对整个区间做还好说...区间询问就抓瞎了...</p><p>然后抄neither_nor大爷的题解, 感觉非常的神仙</p><p>以每个数为要求的区间中的最大值(不含端点), 这样一来就好办了,对于每个数来说:</p><ul><li>第一种情况就是点对<code>[premax[i], nexmax[i]]</code></li><li>第二种情况就是点对<code>[premax[i], j]</code>, <spanclass="math inline">\(j \in [i + 1, nexmax_i -1]\)</span>(显然这个区间里没有比<code>a[i]</code>还大的数了),和<code>[j, nexmax[i]]</code>, <span class="math inline">\(j\in[premax_i + 1, i - 1]\)</span></li></ul><p>然后我们就是搞出了一些区间, 要求左端点大于某个数,右端点小于某个数的区间权值和, 就是二维数点呗</p><p>我用的扫描线, 第二种情况比较复杂, 因为在二维平面上线段的方向不一样,我们就把他拆开来做, 横着扫一遍竖着扫一遍</p><p>最后别忘了对每个区间加上ta的区间长度减1个<spanclass="math inline">\(p_1\)</span>(只有两个数的区间也满足情况1)</p><p>然后就没有然后了....</p><h3 id="沙茶的-代码">沙茶的 代码</h3><p>想清楚怎么实现之后代码似乎不难写...</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**************************************************************</span></span><br><span class="line"><span class="comment">    Problem: 4826</span></span><br><span class="line"><span class="comment">    User: Cansult</span></span><br><span class="line"><span class="comment">    Language: C++</span></span><br><span class="line"><span class="comment">    Result: Accepted</span></span><br><span class="line"><span class="comment">    Time:5996 ms</span></span><br><span class="line"><span class="comment">    Memory:41140 kb</span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (200000 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF (0x7fffffff)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LS(dq) ((dq) &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RS(dq) (((dq) &lt;&lt; 1) | 1)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edg</span> &#123;</span><br><span class="line">    <span class="type">int</span> le, ri;</span><br><span class="line">    LL zh, lazy;</span><br><span class="line">&#125; b[MAXN &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">question</span> &#123;</span><br><span class="line">    <span class="type">int</span> le, ri, time, type, zh;</span><br><span class="line">    <span class="built_in">question</span>() &#123;&#125;</span><br><span class="line">    <span class="built_in">question</span>(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> ti, <span class="type">int</span> ty, <span class="type">int</span> z) : <span class="built_in">le</span>(l), <span class="built_in">ri</span>(r), <span class="built_in">time</span>(ti), <span class="built_in">type</span>(ty), <span class="built_in">zh</span>(z) &#123;&#125;</span><br><span class="line">&#125; que[MAXN &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> n, q, cntq, a[MAXN], p1, p2, premax[MAXN], nexmax[MAXN];</span><br><span class="line">LL ans[MAXN];</span><br><span class="line">pii sq[MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">js</span><span class="params">(<span class="type">int</span> dq, <span class="type">int</span> le, <span class="type">int</span> ri)</span> </span>&#123;</span><br><span class="line">    b[dq].le = le, b[dq].ri = ri, b[dq].zh = b[dq].lazy = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (le == ri)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> mi = (le + ri) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">js</span>(<span class="built_in">LS</span>(dq), le, mi), <span class="built_in">js</span>(<span class="built_in">RS</span>(dq), mi + <span class="number">1</span>, ri);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_down</span><span class="params">(<span class="type">int</span> dq)</span> </span>&#123;</span><br><span class="line">    LL x = b[dq].lazy;</span><br><span class="line">    b[<span class="built_in">LS</span>(dq)].lazy += x, b[<span class="built_in">RS</span>(dq)].lazy += x;</span><br><span class="line">    b[<span class="built_in">LS</span>(dq)].zh += (b[<span class="built_in">LS</span>(dq)].ri - b[<span class="built_in">LS</span>(dq)].le + <span class="number">1</span>) * x;</span><br><span class="line">    b[<span class="built_in">RS</span>(dq)].zh += (b[<span class="built_in">RS</span>(dq)].ri - b[<span class="built_in">RS</span>(dq)].le + <span class="number">1</span>) * x;</span><br><span class="line">    b[dq].lazy = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">cx</span><span class="params">(<span class="type">int</span> dq, <span class="type">int</span> le, <span class="type">int</span> ri)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (le &gt; b[dq].ri || le &gt; ri || ri &lt; b[dq].le)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (b[dq].le == le &amp;&amp; b[dq].ri == ri)</span><br><span class="line">        <span class="keyword">return</span> b[dq].zh;</span><br><span class="line">    <span class="keyword">if</span> (b[dq].lazy)</span><br><span class="line">        <span class="built_in">push_down</span>(dq);</span><br><span class="line">    <span class="type">int</span> mi = (b[dq].le + b[dq].ri) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (le &gt; mi)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">cx</span>(<span class="built_in">RS</span>(dq), le, ri);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (ri &lt;= mi)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">cx</span>(<span class="built_in">LS</span>(dq), le, ri);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">cx</span>(<span class="built_in">LS</span>(dq), le, mi) + <span class="built_in">cx</span>(<span class="built_in">RS</span>(dq), mi + <span class="number">1</span>, ri);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">xg</span><span class="params">(<span class="type">int</span> dq, <span class="type">int</span> le, <span class="type">int</span> ri, LL zh)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (le &gt; b[dq].ri || le &gt; ri || ri &lt; b[dq].le)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (b[dq].le == le &amp;&amp; b[dq].ri == ri) &#123;</span><br><span class="line">        b[dq].lazy += zh;</span><br><span class="line">        b[dq].zh += (ri - le + <span class="number">1</span>) * zh;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (b[dq].lazy)</span><br><span class="line">        <span class="built_in">push_down</span>(dq);</span><br><span class="line">    <span class="type">int</span> mi = (b[dq].le + b[dq].ri) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (le &gt; mi)</span><br><span class="line">        <span class="built_in">xg</span>(<span class="built_in">RS</span>(dq), le, ri, zh);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (ri &lt;= mi)</span><br><span class="line">        <span class="built_in">xg</span>(<span class="built_in">LS</span>(dq), le, ri, zh);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">xg</span>(<span class="built_in">LS</span>(dq), le, mi, zh), <span class="built_in">xg</span>(<span class="built_in">RS</span>(dq), mi + <span class="number">1</span>, ri, zh);</span><br><span class="line">    b[dq].zh = b[<span class="built_in">LS</span>(dq)].zh + b[<span class="built_in">RS</span>(dq)].zh;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">const</span> question&amp; x, <span class="type">const</span> question&amp; y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x.time == y.time)</span><br><span class="line">        <span class="keyword">return</span> x.type &gt; y.type;</span><br><span class="line">    <span class="keyword">return</span> x.time &lt; y.time;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp2</span><span class="params">(<span class="type">const</span> question&amp; x, <span class="type">const</span> question&amp; y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x.time == y.time)</span><br><span class="line">        <span class="keyword">return</span> x.type &gt; y.type;</span><br><span class="line">    <span class="keyword">return</span> x.time &gt; y.time;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        que[++cntq] = <span class="built_in">question</span>(premax[i], premax[i], nexmax[i], <span class="number">1</span>, p1);</span><br><span class="line">        que[++cntq] = <span class="built_in">question</span>(premax[i] + <span class="number">1</span>, i - <span class="number">1</span>, nexmax[i], <span class="number">1</span>, p2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= q; i++) que[++cntq] = <span class="built_in">question</span>(sq[i].first, n, sq[i].second, <span class="number">0</span>, i);</span><br><span class="line">    <span class="built_in">sort</span>(que + <span class="number">1</span>, que + cntq + <span class="number">1</span>, cmp);</span><br><span class="line">    <span class="built_in">js</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= cntq; i++)</span><br><span class="line">        <span class="keyword">if</span> (que[i].type)</span><br><span class="line">            <span class="built_in">xg</span>(<span class="number">1</span>, que[i].le, que[i].ri, que[i].zh);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            ans[que[i].zh] += <span class="built_in">cx</span>(<span class="number">1</span>, que[i].le, que[i].ri);</span><br><span class="line"> </span><br><span class="line">    cntq = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) que[++cntq] = <span class="built_in">question</span>(i + <span class="number">1</span>, nexmax[i] - <span class="number">1</span>, premax[i], <span class="number">1</span>, p2);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= q; i++) que[++cntq] = <span class="built_in">question</span>(<span class="number">1</span>, sq[i].second, sq[i].first, <span class="number">0</span>, i);</span><br><span class="line">    <span class="built_in">sort</span>(que + <span class="number">1</span>, que + cntq + <span class="number">1</span>, cmp2);</span><br><span class="line">    <span class="built_in">js</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= cntq; i++)</span><br><span class="line">        <span class="keyword">if</span> (que[i].type)</span><br><span class="line">            <span class="built_in">xg</span>(<span class="number">1</span>, que[i].le, que[i].ri, que[i].zh);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            ans[que[i].zh] += <span class="built_in">cx</span>(<span class="number">1</span>, que[i].le, que[i].ri);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= q; i++) ans[i] += (sq[i].second - sq[i].first) * p1;</span><br><span class="line">&#125;</span><br><span class="line">stack&lt;pii&gt; bGary;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">solve</span><span class="params">(pii x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (bGary.<span class="built_in">top</span>().first &lt; x.first) bGary.<span class="built_in">pop</span>();</span><br><span class="line">    <span class="type">int</span> re = bGary.<span class="built_in">top</span>().second;</span><br><span class="line">    bGary.<span class="built_in">push</span>(x);</span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    bGary.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(INF, <span class="number">0</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) premax[i] = <span class="built_in">solve</span>(<span class="built_in">make_pair</span>(a[i], i));</span><br><span class="line">    <span class="keyword">while</span> (!bGary.<span class="built_in">empty</span>()) bGary.<span class="built_in">pop</span>();</span><br><span class="line">    bGary.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(INF, n + <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n; i &gt;= <span class="number">1</span>; i--) nexmax[i] = <span class="built_in">solve</span>(<span class="built_in">make_pair</span>(a[i], i));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= q; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;sq[i].first, &amp;sq[i].second);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>, &amp;n, &amp;q, &amp;p1, &amp;p2);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= q; i++) <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>By 准备退役旅游的 Cansult</p>]]></content>
      
      
      <categories>
          
          <category> 翻车笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 扫描线 </tag>
            
            <tag> 清奇脑回路 </tag>
            
            <tag> 离线 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>翻车笔记 PA2014 Final Bazarek [清奇脑回路, 贪心]</title>
      <link href="/posts/37985.html"/>
      <url>/posts/37985.html</url>
      
        <content type="html"><![CDATA[<p>新年快乐啊</p><p>又是碌碌无为的一年啊</p><span id="more"></span><h3 id="懵逼的-题目">懵逼的 题目</h3><p><ahref="https://lydsy.com/JudgeOnline/problem.php?id=3721">BZOJ</a></p><h3 id="扯淡的-题解">扯淡的 题解</h3><p>一开始老是往转移上面想, 比如说我一次加一个偶数或者加两个奇数云云...后来发现似乎如果加奇数偶数的结果是一样的就GG了...</p><p>后来抄CA爷爷的题解 发现非常的厉害: 把所有的数从大到小排序,记录每个位置的[这个位置之前的最小的偶数与这个位置之后的最大的奇数的差],和[这个位置之前的最小的奇数与这个位置之后最大的偶数的差],然后做前缀和</p><p>对于每一个位置, 如果这个位置的前缀和是奇数, 那很好, 直接跳过;否则我们就要考虑花尽量少的代价来把这个前缀和改成奇数,就用到我们预处理的东西, 挑一个小的然后减去就可以了</p><h3 id="沙茶的-代码">沙茶的 代码</h3><p>这样写起来清新多了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**************************************************************</span></span><br><span class="line"><span class="comment">    Problem: 3721</span></span><br><span class="line"><span class="comment">    User: Cansult</span></span><br><span class="line"><span class="comment">    Language: C++</span></span><br><span class="line"><span class="comment">    Result: Accepted</span></span><br><span class="line"><span class="comment">    Time:11940 ms</span></span><br><span class="line"><span class="comment">    Memory:48168 kb</span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (1000000 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF (100000000000000ll + 5)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">LL a[MAXN], premin[<span class="number">2</span>][MAXN], nexmax[<span class="number">2</span>][MAXN], ans[MAXN];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> x &gt; y; &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;a[i]);</span><br><span class="line">    <span class="built_in">sort</span>(a + <span class="number">1</span>, a + n + <span class="number">1</span>, cmp);</span><br><span class="line">    <span class="built_in">memset</span>(premin, <span class="number">0x7f</span>, <span class="built_in">sizeof</span>(premin));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        premin[a[i] &amp; <span class="number">1</span>][i] = <span class="built_in">min</span>(premin[a[i] &amp; <span class="number">1</span>][i - <span class="number">1</span>], a[i]);</span><br><span class="line">        premin[(a[i] &amp; <span class="number">1</span>) ^ <span class="number">1</span>][i] = premin[(a[i] &amp; <span class="number">1</span>) ^ <span class="number">1</span>][i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">        nexmax[a[i] &amp; <span class="number">1</span>][i] = <span class="built_in">max</span>(nexmax[a[i] &amp; <span class="number">1</span>][i + <span class="number">1</span>], a[i]);</span><br><span class="line">        nexmax[(a[i] &amp; <span class="number">1</span>) ^ <span class="number">1</span>][i] = nexmax[(a[i] &amp; <span class="number">1</span>) ^ <span class="number">1</span>][i + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) a[i] += a[i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">if</span> (a[i] &amp; <span class="number">1</span>)</span><br><span class="line">            ans[i] = a[i];</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            LL ans0, ans1;</span><br><span class="line">            ans0 = ans1 = INF;</span><br><span class="line">            <span class="keyword">if</span> (nexmax[<span class="number">0</span>][i + <span class="number">1</span>] &amp;&amp; premin[<span class="number">1</span>][i] &lt; INF)</span><br><span class="line">                ans0 = premin[<span class="number">1</span>][i] - nexmax[<span class="number">0</span>][i + <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (nexmax[<span class="number">1</span>][i + <span class="number">1</span>] &amp;&amp; premin[<span class="number">0</span>][i] &lt; INF)</span><br><span class="line">                ans1 = premin[<span class="number">0</span>][i] - nexmax[<span class="number">1</span>][i + <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (ans1 &gt;= INF &amp;&amp; ans1 &gt;= INF)</span><br><span class="line">                ans[i] = <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                ans[i] = a[i] - <span class="built_in">min</span>(ans0, ans1);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="type">int</span> q;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;q);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, srx; i &lt;= q; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;srx), <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans[srx]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>By 准备退役旅游的 Cansult</p>]]></content>
      
      
      <categories>
          
          <category> 翻车笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 清奇脑回路 </tag>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>翻车笔记 [Violet 2]愚蠢的副官 &amp;&amp; [Croatian2008]Umnozak [数位DP, 清奇脑回路]</title>
      <link href="/posts/53978.html"/>
      <url>/posts/53978.html</url>
      
        <content type="html"><![CDATA[<p>这什么神仙题啊???</p><p>他们怎么什么都会啊???</p><span id="more"></span><h3 id="懵逼的-题目">懵逼的 题目</h3><p><ahref="https://lydsy.com/JudgeOnline/problem.php?id=2713">BZOJ</a></p><h3 id="扯淡的-题解">扯淡的 题解</h3><p>??? 这咋做啊???</p><p>自闭了抄题解去了</p><p>看到<ahref="http://www.cnblogs.com/Troywar/p/7722807.html">这位大爷的题解</a></p><p>哦...好神奇 原来乘积超过<spanclass="math inline">\(10^9\)</span>是没用的啊</p><p>原来<span class="math inline">\(1\)</span>到<spanclass="math inline">\(9\)</span>能乘出来的小于<spanclass="math inline">\(10^9\)</span>的数才这么点啊</p><p>然后...</p><blockquote><p>然后对于询问的x，考虑在x/Hash（k）中有多少个满足乘积为Hash(k)的即可。</p></blockquote><p>????</p><figure><img src="../pictures/20181220A.jpg" alt="???" /><figcaption aria-hidden="true">???</figcaption></figure><p>怎么就[即可]了啊????</p><p>问了问yt大爷和部长大爷 知道了因为小于<spanclass="math inline">\(10\)</span>的质数就<span class="math inline">\(2,3, 5, 7\)</span>, 所以我们可以把<spanclass="math inline">\(Hash(k)\)</span>分解为<spanclass="math inline">\(2, 3, 5, 7\)</span>的次方乘积,这样就可以把这个大数放到状态里了</p><p>复杂度<span class="math inline">\(O(5000 \cdot 32^4)\)</span></p><p>据说能过</p><figure><img src="../pictures/20181220A.jpg" alt="???" /><figcaption aria-hidden="true">???</figcaption></figure><h3 id="沙茶的-代码">沙茶的 代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 咕咕咕</span></span><br></pre></td></tr></table></figure><p>By 准备退役旅游的 Cansult</p>]]></content>
      
      
      <categories>
          
          <category> 翻车笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 清奇脑回路 </tag>
            
            <tag> 数位DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>翻车笔记 [ZJOI2010]count 数字计数 [DP, 数位DP]</title>
      <link href="/posts/49914.html"/>
      <url>/posts/49914.html</url>
      
        <content type="html"><![CDATA[<p>数位DP真是有够自闭的</p><span id="more"></span><h3 id="懵逼的-题目">懵逼的 题目</h3><p><ahref="https://lydsy.com/JudgeOnline/problem.php?id=1833">BZOJ</a></p><h3 id="扯淡的-题解">扯淡的 题解</h3><p>每次感觉只是个细节问题 然后就改不了了...</p><p>一开始我用<code>f[i][0 : 1][0 : 1][0 : 9]</code>表示:当前在第<code>i</code>位, 是否还是前导<code>0</code>, 是否卡上界,<code>0 ~ 9</code>每个数码的个数</p><p>然后发现在更新的时候我要加的是[符合前<code>i</code>个条件的数的个数]...但是我并没有记录...</p><p>后来参悟了一下<ahref="https://blog.csdn.net/Clove_unique/article/details/53081255">zyf2000学姐的写法</a><del>似乎也只有本校的学长学姐用数组的写法了</del></p><p>枚举当前要处理的数位<span class="math inline">\(x\)</span><code>f[i][times][0 : 1][0 : 1]</code>代表当前在第<code>i</code>位,有<code>times</code>个<span class="math inline">\(x\)</span>,是否卡上界, 是否是前导<code>0</code>的<strong>数</strong>的个数</p><p>这样在更新的时候我们就可以搞数的个数了...</p><p>而且还有一个地方就是尽量的减少DP数组的状态, 毕竟DP是对状态的压缩当然是要越简单越好了...枚举<spanclass="math inline">\(x\)</span>减少了肥肠大的代码复杂度...</p><h3 id="沙茶的-代码">沙茶的 代码</h3><h4 id="before">Before</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXL (15 + 5)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(LL x, LL* ans)</span> </span>&#123;</span><br><span class="line">LL f[MAXL][<span class="number">2</span>][<span class="number">2</span>][<span class="number">11</span>]; <span class="comment">// f[i][0 : 1][0 : 1][0 : 9]: 当前在第i位, 是否还是前导0, 是否卡上界, 0 ~ 9每个数码的个数</span></span><br><span class="line"><span class="type">int</span> a[MAXL];</span><br><span class="line"><span class="built_in">memset</span>(f, <span class="number">0</span>, <span class="built_in">sizeof</span>(f));</span><br><span class="line">a[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (x)a[++a[<span class="number">0</span>]] = x % <span class="number">10ll</span>, x /= <span class="number">10ll</span>;</span><br><span class="line">f[a[<span class="number">0</span>] + <span class="number">1</span>][<span class="number">1</span>][<span class="number">1</span>][<span class="number">10</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = a[<span class="number">0</span>]; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> is0 = <span class="number">0</span>; is0 &lt;= <span class="number">1</span>; is0++)</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> u = <span class="number">0</span>; u &lt;= <span class="number">1</span>; u++)</span><br><span class="line"><span class="keyword">if</span> (f[i + <span class="number">1</span>][is0][u][<span class="number">10</span>])</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> nn = <span class="number">0</span>; nn &lt;= <span class="number">9</span>; nn++) &#123;</span><br><span class="line"><span class="type">int</span> uu = u &amp; (nn == a[i]), nis = is0 &amp; (!nn);</span><br><span class="line"><span class="keyword">if</span> (u &amp;&amp; nn &gt; a[i])<span class="keyword">continue</span>;</span><br><span class="line">f[i][nis][uu][<span class="number">10</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (nis)<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> gg = <span class="number">0</span>; gg &lt;= <span class="number">9</span>; gg++)</span><br><span class="line">f[i][nis][uu][gg] += f[i + <span class="number">1</span>][is0][u][gg];</span><br><span class="line">++f[i][nis][uu][nn]; <span class="comment">// 假的 应该是加前几位符合条件的数的个数, 所以要加一维表示最后一位?</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> is0 = <span class="number">0</span>; is0 &lt;= <span class="number">1</span>; is0++)</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> u = <span class="number">0</span>; u &lt;= <span class="number">1</span>; u++)</span><br><span class="line"><span class="keyword">if</span> (f[<span class="number">1</span>][is0][u][<span class="number">10</span>])</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> n = <span class="number">0</span>; n &lt;= <span class="number">9</span>; n++)</span><br><span class="line">ans[n] += f[<span class="number">1</span>][is0][u][n];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">LL a, b, ax[MAXL], bx[MAXL];</span><br><span class="line"><span class="built_in">memset</span>(ax, <span class="number">0</span>, <span class="built_in">sizeof</span>(ax));</span><br><span class="line"><span class="built_in">memset</span>(bx, <span class="number">0</span>, <span class="built_in">sizeof</span>(bx));</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>, &amp;a, &amp;b);</span><br><span class="line"><span class="built_in">solve</span>(b, bx);</span><br><span class="line"><span class="built_in">solve</span>(a - <span class="number">1</span>, ax);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld &quot;</span>, bx[i] - ax[i]);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="after">After</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXL (15 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXZ (10)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function">LL <span class="title">solve</span><span class="params">(LL x, <span class="type">int</span> dqw)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> a[MAXL];</span><br><span class="line">a[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (x)a[++a[<span class="number">0</span>]] = x % <span class="number">10</span>, x /= <span class="number">10</span>;</span><br><span class="line">LL f[MAXL][MAXL][<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line"><span class="built_in">memset</span>(f, <span class="number">0</span>, <span class="built_in">sizeof</span>(f));</span><br><span class="line">f[a[<span class="number">0</span>] + <span class="number">1</span>][<span class="number">0</span>][<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = a[<span class="number">0</span>]; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> times = <span class="number">0</span>; times &lt; MAXL; times++)</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> u = <span class="number">0</span>; u &lt;= <span class="number">1</span>; u++)</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> is0 = <span class="number">0</span>; is0 &lt;= <span class="number">1</span>; is0++)</span><br><span class="line"><span class="keyword">if</span> (f[i + <span class="number">1</span>][times][u][is0]) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> nn = <span class="number">0</span>; nn &lt;= <span class="number">9</span>; nn++) &#123;</span><br><span class="line"><span class="keyword">if</span> (u &amp;&amp; nn &gt; a[i])<span class="keyword">continue</span>;</span><br><span class="line"><span class="type">int</span> uu = (u &amp;&amp; nn == a[i]), nis = (is0 &amp;&amp; !nn);</span><br><span class="line"><span class="keyword">if</span> (is0)</span><br><span class="line">++f[i][nn == dqw][uu][nis];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">f[i][times + (nn == dqw)][uu][nis] += f[i + <span class="number">1</span>][times][u][is0];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">LL re = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> times = <span class="number">0</span>; times &lt; MAXL; times++)</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> u = <span class="number">0</span>; u &lt;= <span class="number">1</span>; u++)</span><br><span class="line">re += f[<span class="number">1</span>][times][u][<span class="number">0</span>] * times;</span><br><span class="line"><span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">LL a, b;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>, &amp;a, &amp;b);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld &quot;</span>, <span class="built_in">solve</span>(b, i) - <span class="built_in">solve</span>(a - <span class="number">1</span>, i));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>, <span class="built_in">solve</span>(b, <span class="number">9</span>) - <span class="built_in">solve</span>(a - <span class="number">1</span>, <span class="number">9</span>));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>By 准备退役旅游的 Cansult</p>]]></content>
      
      
      <categories>
          
          <category> 翻车笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数位DP </tag>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>水题笔记 [AMPPZ2014]Petrol [最小生成树, 清奇脑回路]</title>
      <link href="/posts/54254.html"/>
      <url>/posts/54254.html</url>
      
        <content type="html"><![CDATA[<p>没边权的可以跑<span class="math inline">\(bfs\)</span>,那有边权的就跑<span class="math inline">\(dijk\)</span>吧</p><span id="more"></span><h3 id="懵逼的-题目">懵逼的 题目</h3><p><ahref="https://lydsy.com/JudgeOnline/problem.php?id=4144">BZOJ</a></p><p>被Refun老狗鳖抢了第321个AC的_(:зゝ∠)_</p><h3 id="扯淡的题解">扯淡的题解</h3><p>大胆联想<span class="math inline">\(Dispwnl\)</span>给我推的<ahref="https://lydsy.com/JudgeOnline/problem.php?id=4242">一道题</a>...</p><p>那个题权都为<span class="math inline">\(1\)</span>可以跑<spanclass="math inline">\(bfs\)</span>, 这个题既然边劝不一样我们就直接<spanclass="math inline">\(dijk\)</span>咯...</p><p>在这种[在一个图中找一些关键点的最小生成树]的问题...我们都可以把关键点直接放到队列里,从这些关键点分别开始最短路 / <span class="math inline">\(bfs\)</span>,这样可以减少很多的边数...因为途中经过某个关键点进行中转的路径肯定不是最优的路径,不可能放在最小生成树里...</p><h3 id="沙茶的-代码">沙茶的 代码</h3><p>ta给的图不一定联通真是太真实了...</p><p>倍增的<code>lgn</code>没有赋值更是太真实了...</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**************************************************************</span></span><br><span class="line"><span class="comment">    Problem: 4144</span></span><br><span class="line"><span class="comment">    User: Cansult</span></span><br><span class="line"><span class="comment">    Language: C++</span></span><br><span class="line"><span class="comment">    Result: Accepted</span></span><br><span class="line"><span class="comment">    Time:7056 ms</span></span><br><span class="line"><span class="comment">    Memory:111496 kb</span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (200000 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXM (500000 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXL (40 + 5)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edg</span> &#123;</span><br><span class="line">    <span class="type">int</span> from, to, next, cost;</span><br><span class="line">&#125; tb[MAXN &lt;&lt; <span class="number">1</span>], eb[MAXM &lt;&lt; <span class="number">1</span>], kb[MAXM];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">    <span class="type">int</span> from, bh, cost;</span><br><span class="line">    <span class="built_in">node</span>() &#123;&#125;</span><br><span class="line">    <span class="built_in">node</span>(<span class="type">int</span> fr, <span class="type">int</span> b, <span class="type">int</span> co): <span class="built_in">from</span>(fr), <span class="built_in">bh</span>(b), <span class="built_in">cost</span>(co) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">cmp1</span> &#123;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">operator</span> <span class="params">()</span> <span class="params">(<span class="type">const</span> node&amp; x, <span class="type">const</span> node&amp; y)</span> </span>&#123; <span class="keyword">return</span> x.cost &gt; y.cost; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> tg[MAXN], cntt, eg[MAXN], cnte, cntk, n, m, s, c[MAXN], q, lgn, d[MAXN][MAXL], deep[MAXN], maxc[MAXN][MAXL], fa[MAXN], dis[MAXN], belong[MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">adn</span><span class="params">(edg* bx, <span class="type">int</span>* gx, <span class="type">int</span>&amp; cntx, <span class="type">int</span> from, <span class="type">int</span> to, <span class="type">int</span> cost)</span> </span>&#123;</span><br><span class="line">    bx[++cntx].next = gx[from];</span><br><span class="line">    bx[cntx].from = from, bx[cntx].to = to, bx[cntx].cost = cost;</span><br><span class="line">    gx[from] = cntx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; <span class="keyword">return</span> (fa[x] == x) ? x : (fa[x] = <span class="built_in">find</span>(fa[x])); &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">uni</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; fa[<span class="built_in">find</span>(x)] = <span class="built_in">find</span>(y); &#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">const</span> edg x, <span class="type">const</span> edg y)</span> </span>&#123; <span class="keyword">return</span> x.cost &lt; y.cost; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> vis[MAXN];</span><br><span class="line">    <span class="built_in">memset</span>(vis, <span class="literal">false</span>, <span class="built_in">sizeof</span>(vis));</span><br><span class="line">    <span class="built_in">memset</span>(dis, <span class="number">0x7f</span>, <span class="built_in">sizeof</span>(dis));</span><br><span class="line">    priority_queue&lt;node, vector&lt;node&gt;, cmp1&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= s; i++) q.<span class="built_in">push</span>(<span class="built_in">node</span>(c[i], c[i], dis[c[i]] = <span class="number">0</span>));</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        node dq = q.<span class="built_in">top</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (vis[dq.bh]) <span class="keyword">continue</span>;</span><br><span class="line">        vis[dq.bh] = <span class="literal">true</span>;</span><br><span class="line">        belong[dq.bh] = dq.from;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = eg[dq.bh]; i; i = eb[i].next)</span><br><span class="line">            <span class="keyword">if</span> (dis[eb[i].to] &gt; dis[dq.bh] + eb[i].cost)</span><br><span class="line">                q.<span class="built_in">push</span>(<span class="built_in">node</span>(dq.from, eb[i].to, dis[eb[i].to] = dis[dq.bh] + eb[i].cost));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">kruskal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">sort</span>(kb + <span class="number">1</span>, kb + m + <span class="number">1</span>, cmp);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) fa[i] = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">find</span>(kb[i].from) != <span class="built_in">find</span>(kb[i].to)) &#123;</span><br><span class="line">            <span class="built_in">uni</span>(kb[i].from, kb[i].to);</span><br><span class="line">            <span class="built_in">adn</span>(tb, tg, cntt, kb[i].from, kb[i].to, kb[i].cost);</span><br><span class="line">            <span class="built_in">adn</span>(tb, tg, cntt, kb[i].to, kb[i].from, kb[i].cost);</span><br><span class="line"><span class="comment">//          printf(&quot;%d %d %d\n&quot;, kb[i].from, kb[i].to, kb[i].cost);</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> dq)</span> </span>&#123;</span><br><span class="line">    deep[dq] = deep[d[dq][<span class="number">0</span>]] + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= lgn; i++)   d[dq][i] = d[d[dq][i - <span class="number">1</span>]][i - <span class="number">1</span>], maxc[dq][i] = <span class="built_in">max</span>(maxc[d[dq][i - <span class="number">1</span>]][i - <span class="number">1</span>], maxc[dq][i - <span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = tg[dq]; i; i = tb[i].next)</span><br><span class="line">        <span class="keyword">if</span> (tb[i].to != d[dq][<span class="number">0</span>])</span><br><span class="line">            d[tb[i].to][<span class="number">0</span>] = dq, maxc[tb[i].to][<span class="number">0</span>] = tb[i].cost, <span class="built_in">dfs</span>(tb[i].to);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> re = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (deep[x] &lt; deep[y])   <span class="built_in">swap</span>(x, y);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = lgn; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        <span class="keyword">if</span> (deep[d[x][i]] &gt;= deep[y])</span><br><span class="line">            re = <span class="built_in">max</span>(maxc[x][i], re), x = d[x][i];</span><br><span class="line">    <span class="keyword">if</span> (x == y)</span><br><span class="line">        <span class="keyword">return</span> re;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = lgn; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        <span class="keyword">if</span> (d[x][i] != d[y][i])</span><br><span class="line">            re = <span class="built_in">max</span>(re, <span class="built_in">max</span>(maxc[x][i], maxc[y][i])), x = d[x][i], y = d[y][i];</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(re, <span class="built_in">max</span>(maxc[x][<span class="number">0</span>], maxc[y][<span class="number">0</span>]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lg</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> re = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> ((<span class="number">1</span> &lt;&lt; re) &lt; x)  ++re;</span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;s, &amp;m);</span><br><span class="line">    lgn = <span class="built_in">lg</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= s; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;c[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, srx, sry, src; i &lt;= m; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;srx, &amp;sry, &amp;src), <span class="built_in">adn</span>(eb, eg, cnte, srx, sry, src), <span class="built_in">adn</span>(eb, eg, cnte, sry, srx, src);</span><br><span class="line">    <span class="built_in">init</span>(); </span><br><span class="line"><span class="comment">/*  for (int i = 1; i &lt;= n; i++)</span></span><br><span class="line"><span class="comment">        printf(&quot;%d &quot;, belong[i]);</span></span><br><span class="line"><span class="comment">    puts(&quot;&quot;); */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= cnte; i += <span class="number">2</span>) &#123;</span><br><span class="line">        ++cntk;</span><br><span class="line">        kb[cntk].from = belong[eb[i].from];</span><br><span class="line">        kb[cntk].to = belong[eb[i].to];</span><br><span class="line">        kb[cntk].cost = dis[eb[i].from] + dis[eb[i].to] + eb[i].cost;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">kruskal</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= s; i++)</span><br><span class="line">        <span class="keyword">if</span> (!d[c[i]][<span class="number">0</span>])</span><br><span class="line">            maxc[c[i]][<span class="number">0</span>] = <span class="number">0</span>, d[c[i]][<span class="number">0</span>] = <span class="number">1</span>, <span class="built_in">dfs</span>(c[i]);</span><br><span class="line">    <span class="type">int</span> q;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;q);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, srx, sry, srb; i &lt;= q; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;srx, &amp;sry, &amp;srb);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">find</span>(belong[srx]) != <span class="built_in">find</span>(belong[sry]) || <span class="built_in">lca</span>(belong[srx], belong[sry]) &gt; srb)</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;NIE&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;TAK&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">6 4 5</span></span><br><span class="line"><span class="comment">1 5 2 6</span></span><br><span class="line"><span class="comment">1 3 1</span></span><br><span class="line"><span class="comment">2 3 2</span></span><br><span class="line"><span class="comment">3 4 3</span></span><br><span class="line"><span class="comment">4 5 5</span></span><br><span class="line"><span class="comment">6 4 5</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">1 2 4</span></span><br><span class="line"><span class="comment">2 6 9</span></span><br><span class="line"><span class="comment">1 5 9</span></span><br><span class="line"><span class="comment">6 5 8</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>By 准备退役旅游的 Cansult</p>]]></content>
      
      
      <categories>
          
          <category> 水题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 清奇脑回路 </tag>
            
            <tag> 最小生成树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>比赛总结 Codeforces Round 525 (Div. 2) [清奇脑回路, 交互, 乱搞, 贪心]</title>
      <link href="/posts/6903.html"/>
      <url>/posts/6903.html</url>
      
        <content type="html"><![CDATA[<p>我吃枣要死在这个破学校</p><span id="more"></span><h3 id="d.-ehab-and-another-another-xor-problem"><ahref="https://codeforces.com/contest/1088/problem/D">D. Ehab and anotheranother xor problem</a></h3><p>题意: 有两个正整数<span class="math inline">\(a, b &lt;2^{30}\)</span>不告诉你, 你可以询问<spanclass="math inline">\(62\)</span>次, 你每次给出两个正整数<spanclass="math inline">\(c, d &lt; 2^{30}\)</span>, 出题人会告诉你<spanclass="math inline">\(a\oplus c\)</span>和<span class="math inline">\(b\oplus d\)</span>的大小关系, 最后输出<span class="math inline">\(a,b\)</span>的值</p><p>现在的D怎么越来越恶心了... 我讨厌交互题...</p><p>警告: 我的做法超复杂的...</p><p>比赛的时候想的方法是找到一个<spanclass="math inline">\(d\)</span>使得<span class="math inline">\(a = b\oplus d\)</span>, 然后用<spanclass="math inline">\(2^i\)</span>来异或<spanclass="math inline">\(a\)</span>和左边比较大小, 小了就说明<spanclass="math inline">\(a\)</span>的这个位置是一个<spanclass="math inline">\(1\)</span>, 求出<spanclass="math inline">\(a\)</span>来然后<span class="math inline">\(b = a\oplus d\)</span>就完事了...然后在找<spanclass="math inline">\(d\)</span>的时候懵逼了...</p><p>后来想了一天改成了这样...</p><p>设<span class="math inline">\(a_i\)</span>为<spanclass="math inline">\(a\)</span>的二进制位中以<spanclass="math inline">\(i\)</span>为开头(<spanclass="math inline">\(i\)</span>递减)的后缀所代表的数, <spanclass="math inline">\(a’_i\)</span>为<spanclass="math inline">\(a_i\)</span>中后<span class="math inline">\(i -1\)</span>个位按位取反所代表的数. 如果<span class="math inline">\(a_i&gt; b_i\)</span>, <span class="math inline">\(a&#39;_i &lt;b&#39;_i\)</span>, 说明第<span class="math inline">\(i\)</span>位的<spanclass="math inline">\(a\)</span>和<spanclass="math inline">\(b\)</span>相同,我们可以用<code>1 &lt;&lt; i</code>来<code>xor</code><spanclass="math inline">\(b_i\)</span>, 和<spanclass="math inline">\(a_i\)</span>判断大小, 来得知这个位上的<spanclass="math inline">\(a\)</span>和<spanclass="math inline">\(b\)</span>是<spanclass="math inline">\(0\)</span>还是<spanclass="math inline">\(1\)</span>, 并且由<spanclass="math inline">\(a&#39;_i &lt; b&#39;_i\)</span>推出<spanclass="math inline">\(a_{i - 1} &gt; b_{i - 1}\)</span>. 当<spanclass="math inline">\(a_i &lt; b_i, a&#39;_i &gt;b&#39;_i\)</span>时同理. 否则若<span class="math inline">\(a_i &gt; b_i,a&#39;_i &gt; b&#39;_i\)</span>说明第<spanclass="math inline">\(i\)</span>为的<spanclass="math inline">\(a\)</span>和<spanclass="math inline">\(b\)</span>不同, 且第<spanclass="math inline">\(i\)</span>位上的<spanclass="math inline">\(a\)</span>为<spanclass="math inline">\(1\)</span>, <spanclass="math inline">\(b\)</span>为<spanclass="math inline">\(0\)</span>, 然后用掉一次询问来判断<spanclass="math inline">\(a_{i - 1}\)</span>和<spanclass="math inline">\(b_{i - 1}\)</span>的大小关系. <spanclass="math inline">\(a_i &lt; b_i, a&#39;_i &lt;b&#39;_i\)</span>时同理</p><p>够复杂吧?</p><p>交互题调试超蛋疼的... 还好一遍过了...</p><p>改天参悟一下题解的写法...</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> a, b, c, d, cmp0, cmp1, cmp2;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123; <span class="comment">// a == b xor d</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">29</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;? %d %d\n&quot;</span>, (<span class="number">1</span> &lt;&lt; i) - <span class="number">1</span>, d <span class="built_in">xor</span> ((<span class="number">1</span> &lt;&lt; i) - <span class="number">1</span>));</span><br><span class="line"><span class="built_in">fflush</span>(stdout);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;cmp1);</span><br><span class="line"><span class="keyword">if</span> (cmp0 &gt;= <span class="number">0</span> &amp;&amp; cmp1 &lt;= <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;? %d %d\n&quot;</span>, <span class="number">0</span>, d <span class="built_in">xor</span> (<span class="number">1</span> &lt;&lt; i));</span><br><span class="line"><span class="built_in">fflush</span>(stdout);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;cmp2);</span><br><span class="line"><span class="keyword">if</span> (cmp2 &gt; <span class="number">0</span>)b += (<span class="number">1</span> &lt;&lt; i), a += (<span class="number">1</span> &lt;&lt; i);</span><br><span class="line">cmp0 = -cmp1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (cmp0 &gt;= <span class="number">0</span> &amp;&amp; cmp1 &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">a += (<span class="number">1</span> &lt;&lt; i), d += (<span class="number">1</span> &lt;&lt; i);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;? %d %d\n&quot;</span>, <span class="number">0</span>, d);</span><br><span class="line"><span class="built_in">fflush</span>(stdout);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;cmp0);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (cmp0 &lt; <span class="number">0</span> &amp;&amp; cmp1 &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;? %d %d\n&quot;</span>, <span class="number">1</span> &lt;&lt; i, d);</span><br><span class="line"><span class="built_in">fflush</span>(stdout);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;cmp2);</span><br><span class="line"><span class="keyword">if</span> (cmp2 &lt; <span class="number">0</span>)a += (<span class="number">1</span> &lt;&lt; i), b += (<span class="number">1</span> &lt;&lt; i);</span><br><span class="line">cmp0 = -cmp1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (cmp0 &lt; <span class="number">0</span> &amp;&amp; cmp1 &lt; <span class="number">0</span>) &#123;</span><br><span class="line">b += (<span class="number">1</span> &lt;&lt; i), d += (<span class="number">1</span> &lt;&lt; i);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;? %d %d\n&quot;</span>, <span class="number">0</span>, d);</span><br><span class="line"><span class="built_in">fflush</span>(stdout);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;cmp0);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;! %d %d\n&quot;</span>, a, b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;? 0 0&quot;</span>);</span><br><span class="line"><span class="built_in">fflush</span>(stdout);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;cmp0);</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="e.-ehab-and-a-component-choosing-problem"><ahref="https://codeforces.com/contest/1088/problem/E">E. Ehab and acomponent choosing problem</a></h3><p>题意: 给一颗<span class="math inline">\(n\)</span>个点的树,每个点有整数点权<span class="math inline">\(a_i\)</span>(可能为负),找<span class="math inline">\(k\)</span>(自己定 但必须大于<spanclass="math inline">\(1\)</span>)个不重叠的联通块,使找出的数的权值和与<span class="math inline">\(k\)</span>的比值最大,在此情况下最大化<span class="math inline">\(k\)</span></p><p>如果有<span class="math inline">\(&gt; 1\)</span>的权值, <spanclass="math inline">\(k = 1\)</span>, 因为如果<spanclass="math inline">\(k &gt; 1\)</span>,我们大可以把最大的那个拿出来作为单独的一个...用<code>ans[i]</code>代表这个节点的子树中能搞到的最大答案即可...特判一下多个联通块权值和相等的情况,因为如果要分成多个联通块一定是中间的节点上权值和为负且非常小足以抵消另一边的贡献</p><p>这回E比D简单... = =</p><p>参悟了一发<ahref="https://codeforces.com/contest/1088/submission/46639565">一位不知名大爷</a>的代码感觉非常优雅<del>虽然我还是这么丑</del></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (300000 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edg</span> &#123;</span><br><span class="line"><span class="type">int</span> from, to, next;</span><br><span class="line">&#125; b[MAXN &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> g[MAXN], cntb, n, a[MAXN], maxk;</span><br><span class="line">LL sum[MAXN], maxz;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> x &gt; y; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">adn</span><span class="params">(<span class="type">int</span> from, <span class="type">int</span> to)</span> </span>&#123;</span><br><span class="line">b[++cntb].next = g[from];</span><br><span class="line">b[cntb].from = from, b[cntb].to = to;</span><br><span class="line">g[from] = cntb;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> dq, <span class="type">int</span> fa, <span class="type">bool</span> gg)</span> </span>&#123;</span><br><span class="line">sum[dq] = a[dq];</span><br><span class="line">LL maxs = <span class="number">0</span>; </span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = g[dq]; i; i = b[i].next)</span><br><span class="line"><span class="keyword">if</span> (b[i].to != fa)</span><br><span class="line"><span class="built_in">dfs</span>(b[i].to, dq, gg), maxs += <span class="built_in">max</span>(<span class="number">0ll</span>, sum[b[i].to]);</span><br><span class="line">sum[dq] += maxs;</span><br><span class="line"><span class="keyword">if</span> (gg) &#123;</span><br><span class="line"><span class="keyword">if</span> (maxz == sum[dq])</span><br><span class="line">++maxk, sum[dq] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"> maxz = <span class="built_in">max</span>(maxz, sum[dq]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="type">bool</span> neg = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]), neg = (neg || (a[i] &gt; <span class="number">0</span>));</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, srx, sry; i &lt; n; i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;srx, &amp;sry), <span class="built_in">adn</span>(srx, sry), <span class="built_in">adn</span>(sry, srx);</span><br><span class="line"><span class="keyword">if</span> (!neg) &#123;</span><br><span class="line"><span class="built_in">sort</span>(a + <span class="number">1</span>, a + n + <span class="number">1</span>, cmp);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="keyword">if</span> (a[i] != a[<span class="number">1</span>]) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld %d&quot;</span>, (LL)a[<span class="number">1</span>] * (i - <span class="number">1</span>), i - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld %d&quot;</span>, (LL)a[<span class="number">1</span>] * n, n);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="literal">false</span>), <span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld %d&quot;</span>, maxz * maxk, maxk);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="f.-ehab-and-a-weird-weight-formula"><ahref="https://codeforces.com/contest/1088/problem/F">F. Ehab and a weirdweight formula</a></h3><p>题意: 不懂...他到底是给了我一棵树还是让我构造一棵树啊...?</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p>By 准备退役旅游的 Cansult</p>]]></content>
      
      
      <categories>
          
          <category> 比赛总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 清奇脑回路 </tag>
            
            <tag> 贪心 </tag>
            
            <tag> 乱搞 </tag>
            
            <tag> 交互 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>水题笔记 [ONTAK2010]Peaks和他的加强版 [线段树, 线段树合并, 并查集]</title>
      <link href="/posts/52855.html"/>
      <url>/posts/52855.html</url>
      
        <content type="html"><![CDATA[<p>盖一个五层的教学楼真是智障</p><p>教室放在五楼还没电梯就更智障了</p><span id="more"></span><h3 id="懵逼的题目">懵逼的题目</h3><p><ahref="https://lydsy.com/JudgeOnline/problem.php?id=3545">Peaks</a></p><p>第900个A的有点真实</p><p><ahref="https://lydsy.com/JudgeOnline/problem.php?id=3551">Peaks加强版</a></p><p>加强版过的比普通版还多就更真实了</p><h3 id="扯淡的题解">扯淡的题解</h3><h4 id="peaks">Peaks</h4><p>好像上个寒假Rivendell学长讲过这题来着<del>(好像还是我回答的来着,然而过了一年就变得啥都不会了可真是太真实了)</del></p><p>从小到大枚举边 然后权值线段树合并就完事了</p><h4 id="peaks加强版">Peaks加强版</h4><p>被教育了一种新的玩具叫kruskal重构树</p><p>kruskal重构树越靠上边权越大</p><p>所以要找边权不超过某个值的区间我们只需要找他的子树所在的区间就行了</p><p>在重构树的DFS序上建主席树就完事了</p><h3 id="沙茶的-代码">沙茶的 代码</h3><h4 id="peaks-1">Peaks</h4><p>数组开小了 身败名裂</p><p>合并的时候没有判断是不是已经在一个集合里了 身败名裂</p><p>被卡常了 身败名裂</p><p>快读写错了 身败名裂</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**************************************************************</span></span><br><span class="line"><span class="comment">    Problem: 3545</span></span><br><span class="line"><span class="comment">    User: Cansult</span></span><br><span class="line"><span class="comment">    Language: C++</span></span><br><span class="line"><span class="comment">    Result: Accepted</span></span><br><span class="line"><span class="comment">    Time:8312 ms</span></span><br><span class="line"><span class="comment">    Memory:72120 kb</span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (500000 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LS(dq) ((dq) &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RS(dq) (((dq) &lt;&lt; 1) | 1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">bcj</span> &#123;</span><br><span class="line">    <span class="type">int</span> fa, size;</span><br><span class="line">&#125; fa[MAXN];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">    <span class="type">int</span> le, ri, zh, ls, rs;</span><br><span class="line">&#125; b[MAXN &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edg</span> &#123;</span><br><span class="line">    <span class="type">int</span> from, to, cost;</span><br><span class="line">&#125; tb[MAXN];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ques</span> &#123;</span><br><span class="line">    <span class="type">int</span> from, cap, k, bh;</span><br><span class="line">&#125; que[MAXN];</span><br><span class="line"><span class="type">int</span> root[MAXN], n, m, q, cntb, h[MAXN], sorh[MAXN], ans[MAXN];</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; trash;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; <span class="keyword">return</span> (fa[x].fa == x) ? x : (fa[x].fa = <span class="built_in">find</span>(fa[x].fa)); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">newnode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> re;</span><br><span class="line">    <span class="keyword">if</span> (trash.<span class="built_in">size</span>())   re = trash.<span class="built_in">front</span>(), trash.<span class="built_in">pop</span>();</span><br><span class="line">    <span class="keyword">else</span>    re = ++cntb;</span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">xg</span><span class="params">(<span class="type">int</span>&amp; dq, <span class="type">int</span> le, <span class="type">int</span> ri, <span class="type">int</span> wz, <span class="type">int</span> zh)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!dq)    dq = <span class="built_in">newnode</span>(), b[dq].le = le, b[dq].ri = ri, b[dq].zh = <span class="number">0</span>;</span><br><span class="line">    b[dq].zh += zh;</span><br><span class="line">    <span class="keyword">if</span> (le == ri)   <span class="keyword">return</span> ;</span><br><span class="line">    <span class="type">int</span> mi = (le + ri) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (wz &gt; mi) <span class="built_in">xg</span>(b[dq].rs, mi + <span class="number">1</span>, ri, wz, zh);</span><br><span class="line">    <span class="keyword">else</span>    <span class="built_in">xg</span>(b[dq].ls, le, mi, wz, zh);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">GG</span><span class="params">(<span class="type">int</span>&amp; fa, <span class="type">int</span> dq)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!fa)    fa = <span class="built_in">newnode</span>(), b[fa] = b[dq], b[dq].ls = b[dq].rs = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span>    b[fa].zh += b[dq].zh;</span><br><span class="line">    <span class="keyword">if</span> (b[dq].le == b[dq].ri) &#123;</span><br><span class="line">        trash.<span class="built_in">push</span>(dq);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (b[dq].ls)   <span class="built_in">GG</span>(b[fa].ls, b[dq].ls);</span><br><span class="line">    <span class="keyword">if</span> (b[dq].rs)   <span class="built_in">GG</span>(b[fa].rs, b[dq].rs);</span><br><span class="line">    trash.<span class="built_in">push</span>(dq);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">uni</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> fx = <span class="built_in">find</span>(x), fy = <span class="built_in">find</span>(y);</span><br><span class="line">    <span class="keyword">if</span> (fa[fx].size &lt; fa[fy].size)   <span class="built_in">swap</span>(fx, fy);</span><br><span class="line">    fa[fy].fa = fx, fa[fx].size += fa[fy].size;</span><br><span class="line">    <span class="built_in">GG</span>(root[fx], root[fy]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmpq</span><span class="params">(ques x, ques y)</span> </span>&#123; <span class="keyword">return</span> x.cap &lt; y.cap; &#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmpe</span><span class="params">(edg x, edg y)</span> </span>&#123; <span class="keyword">return</span> x.cost &lt; y.cost; &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cx</span><span class="params">(<span class="type">int</span> dq, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (b[dq].zh &lt; k)    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span> (b[dq].le == b[dq].ri)   <span class="keyword">return</span> b[dq].le;</span><br><span class="line">    <span class="keyword">if</span> (b[dq].rs &amp;&amp; b[b[dq].rs].zh &gt;= k) <span class="keyword">return</span> <span class="built_in">cx</span>(b[dq].rs, k);</span><br><span class="line">    <span class="keyword">else</span>    <span class="keyword">return</span> <span class="built_in">cx</span>(b[dq].ls, k - b[b[dq].rs].zh);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">sort</span>(que + <span class="number">1</span>, que + q + <span class="number">1</span>, cmpq);</span><br><span class="line">    <span class="built_in">sort</span>(tb + <span class="number">1</span>, tb + m + <span class="number">1</span>, cmpe);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">xg</span>(root[i], <span class="number">1</span>, n, h[i], <span class="number">1</span>), fa[i].fa = i, fa[i].size = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> dqe = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= q; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (dqe &lt;= m &amp;&amp; tb[dqe].cost &lt;= que[i].cap) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">find</span>(tb[dqe].from) != <span class="built_in">find</span>(tb[dqe].to))</span><br><span class="line">                <span class="built_in">uni</span>(tb[dqe].from, tb[dqe].to);</span><br><span class="line">            ++dqe;</span><br><span class="line">        &#125;</span><br><span class="line">        ans[que[i].bh] = <span class="built_in">cx</span>(root[<span class="built_in">find</span>(que[i].from)], que[i].k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= q; i++)</span><br><span class="line">        <span class="keyword">if</span> (~ans[i])    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, sorh[ans[i]]);</span><br><span class="line">        <span class="keyword">else</span>    <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> re = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (x &lt; <span class="string">&#x27;0&#x27;</span> || x &gt; <span class="string">&#x27;9&#x27;</span>)    x = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (x &lt;= <span class="string">&#x27;9&#x27;</span> &amp;&amp; x &gt;= <span class="string">&#x27;0&#x27;</span>)  re = (re &lt;&lt; <span class="number">1</span>) + (re &lt;&lt; <span class="number">3</span>) + x - <span class="string">&#x27;0&#x27;</span>, x = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    n = <span class="built_in">read</span>(), m = <span class="built_in">read</span>(), q = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) h[i] = <span class="built_in">read</span>(), sorh[++sorh[<span class="number">0</span>]] = h[i];</span><br><span class="line">    <span class="built_in">sort</span>(sorh + <span class="number">1</span>, sorh + sorh[<span class="number">0</span>] + <span class="number">1</span>);</span><br><span class="line">    sorh[<span class="number">0</span>] = <span class="built_in">unique</span>(sorh + <span class="number">1</span>, sorh + sorh[<span class="number">0</span>] + <span class="number">1</span>) - sorh - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) h[i] = <span class="built_in">lower_bound</span>(sorh + <span class="number">1</span>, sorh + sorh[<span class="number">0</span>] + <span class="number">1</span>, h[i]) - sorh;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) tb[i].from = <span class="built_in">read</span>(), tb[i].to = <span class="built_in">read</span>(), tb[i].cost = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= q; i++) que[i].from = <span class="built_in">read</span>(), que[i].cap = <span class="built_in">read</span>(), que[i].k = <span class="built_in">read</span>(), que[i].bh = i;</span><br><span class="line">    <span class="built_in">solve</span>();    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="peaks加强版-1">Peaks加强版</h4><p>主席树递归的时候<code>pre</code>写的<code>rs</code>,<code>dq</code>写成了<code>ls</code>... 丢人</p><p>居然把重构树中新加入的点也给放进主席树里了... 丢人</p><p>卡空间让人想吐...</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**************************************************************</span></span><br><span class="line"><span class="comment">    Problem: 3551</span></span><br><span class="line"><span class="comment">    User: Cansult</span></span><br><span class="line"><span class="comment">    Language: C++</span></span><br><span class="line"><span class="comment">    Result: Accepted</span></span><br><span class="line"><span class="comment">    Time:15264 ms</span></span><br><span class="line"><span class="comment">    Memory:112160 kb</span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (300000 + 1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXM (500000 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXT (100000 + 1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXL (20 + 1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">    <span class="type">int</span> le, ri, ls, rs, zh;</span><br><span class="line">&#125; b[MAXN * <span class="number">9</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edg</span> &#123;</span><br><span class="line">    <span class="type">int</span> from, to, cost, next;</span><br><span class="line">&#125; te[MAXM], tb[MAXN &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> n, m, a[MAXN], cnta, fat[MAXN], fak[MAXN], d[MAXN][MAXL], tn, cntb, g[MAXN], di[MAXN], lgn, root[MAXN], cntn, h[MAXT], sorh[MAXT];</span><br><span class="line">pii son[MAXN];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(edg x, edg y)</span> </span>&#123; <span class="keyword">return</span> x.cost &lt; y.cost; &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span>* fa, <span class="type">int</span> x)</span> </span>&#123; <span class="keyword">return</span> (fa[x] == x) ? x : (fa[x] = <span class="built_in">find</span>(fa, fa[x])); &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">uni</span><span class="params">(<span class="type">int</span>* fa, <span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; fa[<span class="built_in">find</span>(fa, x)] = <span class="built_in">find</span>(fa, y); &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lg</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> re = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> ((<span class="number">1</span> &lt;&lt; re) &lt; x)  ++re;</span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">adn</span><span class="params">(<span class="type">int</span> from, <span class="type">int</span> to)</span> </span>&#123;</span><br><span class="line">    tb[++cntb].next = g[from];</span><br><span class="line">    tb[cntb].from = from, tb[cntb].to = to;</span><br><span class="line">    g[from] = cntb;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">kruskal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">sort</span>(te + <span class="number">1</span>, te + m + <span class="number">1</span>, cmp);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; MAXN; i++)   fat[i] = fak[i] = i;</span><br><span class="line">    <span class="type">int</span> cnte = <span class="number">0</span>;</span><br><span class="line">    tn = n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">find</span>(fat, te[i].from) != <span class="built_in">find</span>(fat, te[i].to))   &#123;</span><br><span class="line">            <span class="keyword">if</span> (!di[te[i].from])    di[te[i].from] = te[i].cost;</span><br><span class="line">            <span class="keyword">if</span> (!di[te[i].to])  di[te[i].to] = te[i].cost;</span><br><span class="line">            di[++tn] = te[i].cost;</span><br><span class="line">            <span class="built_in">adn</span>(tn, <span class="built_in">find</span>(fak, te[i].from)), <span class="built_in">adn</span>(<span class="built_in">find</span>(fak, te[i].from), tn);</span><br><span class="line">            <span class="built_in">adn</span>(tn, <span class="built_in">find</span>(fak, te[i].to)), <span class="built_in">adn</span>(<span class="built_in">find</span>(fak, te[i].to), tn);</span><br><span class="line">            <span class="built_in">uni</span>(fat, te[i].from, te[i].to);</span><br><span class="line">            <span class="built_in">uni</span>(fak, te[i].from, tn), <span class="built_in">uni</span>(fak, te[i].to, tn);</span><br><span class="line">            ++cnte;</span><br><span class="line">            <span class="keyword">if</span> (cnte == n - <span class="number">1</span>)  <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> dq)</span> </span>&#123;</span><br><span class="line">    a[son[dq].first = ++cnta] = dq;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= lgn; i++)   d[dq][i] = d[d[dq][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = g[dq]; i; i = tb[i].next)</span><br><span class="line">        <span class="keyword">if</span> (tb[i].to != d[dq][<span class="number">0</span>])</span><br><span class="line">            d[tb[i].to][<span class="number">0</span>] = dq, <span class="built_in">dfs</span>(tb[i].to);</span><br><span class="line">    son[dq].second = cnta;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cxroot</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> cap)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = lgn; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        <span class="keyword">if</span> (di[d[x][i]] &lt;= cap)</span><br><span class="line">            x = d[x][i];</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ins</span><span class="params">(<span class="type">int</span> pre, <span class="type">int</span>&amp; dq, <span class="type">int</span> le, <span class="type">int</span> ri, <span class="type">int</span> wz, <span class="type">int</span> zh)</span> </span>&#123;</span><br><span class="line">    dq = ++cntn;</span><br><span class="line">    b[dq].le = le, b[dq].ri = ri, b[dq].zh = b[pre].zh + zh;</span><br><span class="line">    <span class="keyword">if</span> (le == ri)   <span class="keyword">return</span> ;</span><br><span class="line">    <span class="type">int</span> mi = (le + ri) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (wz &lt;= mi)    b[dq].rs = b[pre].rs, <span class="built_in">ins</span>(b[pre].ls, b[dq].ls, le, mi, wz, zh);</span><br><span class="line">    <span class="keyword">else</span>    b[dq].ls = b[pre].ls, <span class="built_in">ins</span>(b[pre].rs, b[dq].rs, mi + <span class="number">1</span>, ri, wz, zh);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cx</span><span class="params">(<span class="type">int</span> pre, <span class="type">int</span> dq, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (b[dq].zh - b[pre].zh &lt; k)    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span> (b[dq].le == b[dq].ri)   <span class="keyword">return</span> b[dq].le;</span><br><span class="line">    <span class="keyword">if</span> (b[b[dq].rs].zh - b[b[pre].rs].zh &gt;= k)   <span class="keyword">return</span> <span class="built_in">cx</span>(b[pre].rs, b[dq].rs, k);</span><br><span class="line">    <span class="keyword">else</span>    <span class="keyword">return</span> <span class="built_in">cx</span>(b[pre].ls, b[dq].ls, k - b[b[dq].rs].zh + b[b[pre].rs].zh);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> re = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (x &lt; <span class="string">&#x27;0&#x27;</span> || x &gt; <span class="string">&#x27;9&#x27;</span>)    x = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (x &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; x &lt;= <span class="string">&#x27;9&#x27;</span>)  re = (re &lt;&lt; <span class="number">1</span>) + (re &lt;&lt; <span class="number">3</span>) + x - <span class="string">&#x27;0&#x27;</span>, x = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> q;</span><br><span class="line">    n = <span class="built_in">read</span>(), m = <span class="built_in">read</span>(), q = <span class="built_in">read</span>();</span><br><span class="line">    lgn = <span class="built_in">lg</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) h[i] = <span class="built_in">read</span>(), sorh[++sorh[<span class="number">0</span>]] = h[i];</span><br><span class="line">    <span class="built_in">sort</span>(sorh + <span class="number">1</span>, sorh + sorh[<span class="number">0</span>] + <span class="number">1</span>);</span><br><span class="line">    sorh[<span class="number">0</span>] = <span class="built_in">unique</span>(sorh + <span class="number">1</span>, sorh + sorh[<span class="number">0</span>] + <span class="number">1</span>) - sorh - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) h[i] = <span class="built_in">lower_bound</span>(sorh + <span class="number">1</span>, sorh + sorh[<span class="number">0</span>] + <span class="number">1</span>, h[i]) - sorh;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) te[i].from = <span class="built_in">read</span>(), te[i].to = <span class="built_in">read</span>(), te[i].cost = <span class="built_in">read</span>();</span><br><span class="line">    <span class="built_in">kruskal</span>();</span><br><span class="line">    d[tn][<span class="number">0</span>] = tn;</span><br><span class="line">    <span class="built_in">dfs</span>(tn);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= cnta; i++)  <span class="built_in">ins</span>(root[i - <span class="number">1</span>], root[i], <span class="number">1</span>, sorh[<span class="number">0</span>], (a[i] &lt;= n) ? h[a[i]] : <span class="number">1</span>, a[i] &lt;= n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, lastans = <span class="number">0</span>, srf, src, srk; i &lt;= q; i++) &#123;</span><br><span class="line">        srf = <span class="built_in">read</span>(), src = <span class="built_in">read</span>(), srk = <span class="built_in">read</span>();</span><br><span class="line">        <span class="keyword">if</span> (lastans == <span class="number">-1</span>)  lastans = <span class="number">0</span>;</span><br><span class="line">        srf ^= lastans, src ^= lastans, srk ^= lastans;</span><br><span class="line">        <span class="type">int</span> mindn = <span class="built_in">cxroot</span>(srf, src);</span><br><span class="line">        lastans = <span class="built_in">cx</span>(root[son[mindn].first - <span class="number">1</span>], root[son[mindn].second], srk);</span><br><span class="line">        <span class="keyword">if</span> (~lastans)   lastans = sorh[lastans];</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, lastans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>By 准备退役旅游的 Cansult</p>]]></content>
      
      
      <categories>
          
          <category> 水题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
            <tag> 主席树 </tag>
            
            <tag> 并查集 </tag>
            
            <tag> 线段树合并 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>水题笔记 POJ2187 Beauty Contest [计算几何]</title>
      <link href="/posts/18830.html"/>
      <url>/posts/18830.html</url>
      
        <content type="html"><![CDATA[<p>作死开新坑...</p><span id="more"></span><h3 id="懵逼的-题目">懵逼的 题目</h3><p><ahref="https://www.luogu.org/problemnew/show/P1452">POJ又双叒叕倒闭了</a></p><h3 id="沙茶的-代码">沙茶的 代码</h3><p>因为这题没让输出凸包所以就没有特判多点一线的情况...以后慢慢写吧...</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DD double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pdd pair<span class="string">&lt;DD, DD&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (50000 + 5)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n, chn;</span><br><span class="line">pii a[MAXN], ch[MAXN];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cross</span><span class="params">(pii x, pii y)</span> </span>&#123; <span class="keyword">return</span> x.first * y.second - x.second * y.first; &#125;</span><br><span class="line"><span class="function">pii <span class="title">minu</span><span class="params">(pii x, pii y)</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">make_pair</span>(x.first - y.first, x.second - y.second); &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cxdis2</span><span class="params">(pii x)</span> </span>&#123; <span class="keyword">return</span> x.first * x.first + x.second * x.second; &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">mabs</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; <span class="keyword">return</span> (x &gt; <span class="number">0</span>) ? x : -x; &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cxara</span><span class="params">(pii x, pii y, pii z)</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">mabs</span>(<span class="built_in">cross</span>(<span class="built_in">minu</span>(x, y), <span class="built_in">minu</span>(y, z))); &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">cxch</span><span class="params">(<span class="type">int</span> xn, pii* xa, <span class="type">int</span>&amp; xchn, pii* xch)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">sort</span>(xa + <span class="number">1</span>, xa + xn + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (xchn &gt;= <span class="number">2</span> &amp;&amp; <span class="built_in">cross</span>(<span class="built_in">minu</span>(xch[xchn], xch[xchn - <span class="number">1</span>]), <span class="built_in">minu</span>(xa[i], xch[xchn - <span class="number">1</span>])) &lt;= <span class="number">0</span>)--xchn;</span><br><span class="line">        xch[++xchn] = xa[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> k = xchn;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">while</span> (xchn &gt; k &amp;&amp; <span class="built_in">cross</span>(<span class="built_in">minu</span>(xch[xchn], xch[xchn - <span class="number">1</span>]), <span class="built_in">minu</span>(xa[i], xch[xchn - <span class="number">1</span>])) &lt;= <span class="number">0</span>)--xchn;</span><br><span class="line">        xch[++xchn] = xa[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    for (int i = 1; i &lt;= xchn; i++)</span></span><br><span class="line"><span class="comment">        printf(&quot;%d %d\n&quot;, xa[i].first, xa[i].second);</span></span><br><span class="line"><span class="comment">    puts(&quot;&quot;);</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cxld</span><span class="params">(<span class="type">int</span> xchn, pii* xch)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (xchn &lt; <span class="number">2</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (xchn == <span class="number">2</span>)<span class="keyword">return</span> <span class="built_in">cxdis2</span>(<span class="built_in">minu</span>(xch[<span class="number">1</span>], xch[<span class="number">2</span>]));</span><br><span class="line">    <span class="type">int</span> dqmaxi = <span class="number">1</span>, ans = <span class="number">0</span>, cnt = <span class="number">0</span>;</span><br><span class="line">    xch[xchn + <span class="number">1</span>] = xch[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= xchn; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (cnt &lt; <span class="number">3</span> &amp;&amp; <span class="built_in">cxara</span>(xch[dqmaxi], xch[i], xch[i + <span class="number">1</span>]) &lt;= <span class="built_in">cxara</span>(xch[dqmaxi + <span class="number">1</span>], xch[i], xch[i + <span class="number">1</span>]))dqmaxi = dqmaxi % xchn + <span class="number">1</span>, cnt += (dqmaxi == <span class="number">1</span>);</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, <span class="built_in">cxdis2</span>(<span class="built_in">minu</span>(xch[dqmaxi], xch[i])));</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, <span class="built_in">cxdis2</span>(<span class="built_in">minu</span>(xch[dqmaxi], xch[i + <span class="number">1</span>])));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a[i].first, &amp;a[i].second);</span><br><span class="line">    <span class="built_in">cxch</span>(n, a, chn, ch);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, <span class="built_in">cxld</span>(chn, ch));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>By 准备退役旅游的Cansult</p>]]></content>
      
      
      <categories>
          
          <category> 水题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算几何 </tag>
            
            <tag> 凸包 </tag>
            
            <tag> 旋转卡壳 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>水题笔记 晚自习的水题计划</title>
      <link href="/posts/46138.html"/>
      <url>/posts/46138.html</url>
      
        <content type="html"><![CDATA[<p>晚自习脑子一团浆糊已经想不动题了啊...还是水题有成就感的啊...</p><p>计数器: ## <font color=#b11d23>45</font></p><span id="more"></span><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=1391346&amp;auto=1&amp;height=66"></iframe><p>3211: 线段树板子</p><p>1412: 最小割板子 我居然还会写<code>dinic</code>真是感动忘清空<code>dis</code>了也很真实</p><p>1696: 车站选址的二维版本, 不能在有牛的地方建牛舍有点蛋疼</p><p>CF893F: 求子矩阵最小值,二维线段树裸体居然没看出来...我居然还会写树套树真是感动...没想到因为在外层线段树上修改了一条链,所以有可能内层线段树的某个节点被覆盖...WA了一晚上真是感动</p><p>具体来说就是我以为因为每个节点只会插入一次,所以叶子节点直接覆盖就完事了...但是没想到在外层线段树的非叶子节点中的内层线段树上叶子节点可能之前是有值的(有同祖且同深度的节点)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!dq)dq = ++cntb, ib[dq].le = le, ib[dq].ri = ri;</span><br><span class="line"><span class="keyword">if</span> (le == ri)&#123; ib[dq].zh = zh;<span class="keyword">return</span> ; &#125; <span class="comment">// 就是这个地方直接覆盖了, 应该取min</span></span><br></pre></td></tr></table></figure><p>2242:SDOI果然什么题都能出...发现逆元又㕛叒叕不会写了非常真实...学习了一发BSGS感觉非常神仙</p><p>1385: 显然我们发现在<span class="math inline">\(x_{k_1} / x_{k_2} /x_{k_3} /\cdots /x_{k_n}\)</span>加括号后就相当于给原式乘上<spanclass="math inline">\((x_{k_2} \cdot x_{k_3}\cdot \cdots \cdotx_{k_n})^2\)</span>, 所以直接给<span class="math inline">\(x_2\cdotsx_n\)</span>加括号然后判断就完事了</p><p>1786$=$1831: 我们插入的数是递增的:如果后面的数比前面的数大造成的逆序对不会比前面的数造成的更多;所以我们可以直接枚举每个点放哪个,然后用树状数组判断一下放什么数最优就行了</p><p>1826$=$1528: 因为每个玩具对答案的贡献是一样的,先扔掉<code>nex</code>靠后的不会更坏,所以贪心就行了(<code>unique</code>的时候忘排序了丢人)</p><p>1531: 有人想做背包吗?</p><p>1008:没想到倒着来推真是自闭...求出所有不能越狱的情况然后再用总情况减就完事了...</p><p>1875:ATP学姐讲矩阵的例题...我居然还记得真是感动...虽然忘了咋做了吧...忘了取模疯狂WA很真实,递归矩阵快速幂会爆栈更真实...感受一下写完了之后又WA又RE的恐惧...</p><p>1297: 把每个点拆成10份, <spanclass="math inline">\(I_x\)</span>表示距离<spanclass="math inline">\(I\)</span>还有<spanclass="math inline">\(x\)</span>距离的地方. 然后矩乘就完事了.没初始化矩阵为全0非常丢人.递归的矩阵快速幂不能本地测真是蛋疼...也许我应该换一种写法了...</p><p>1054: 有人想写BFS吗?</p><p>5301: 莫队板子, 维护一个前缀和的桶</p><p>1029: 贪心 难度在于读题</p><p>1208: 非得把题目搞的这么恶心有意思吗...</p><p>2733: 线段树合并裸题...查询的时候忘了<code>find</code>真是丢人</p><p>4034: 树剖板子...乘的时候爆<code>int</code>了丢人感觉最近写了一堆板子?</p><p>4326:二分最大的时间然后对每一条超过时间的路径上的每一条边的次数都<spanclass="math inline">\(+1\)</span>, 然后在所有次数为<spanclass="math inline">\(\text{超过时间的路径总数}\)</span>的边中找边权最大的一条修改为<spanclass="math inline">\(0\)</span>,然后再用最长路径的时间减去这条边的边权看看是否不超过二分的值就完事了.不用开<code>LL</code>真是良心. 我居然都不会写树上差分了丢人</p><p>CF733F: 显然把所有的钱花在一条边上比较划算,先求一遍MST然后再枚举每一条边看看如果钱全花在他身上会比开始的MST边权和少多少,我讨厌所有要求输出方案的题, 尤其是我都写完了才看见要输出方案...</p><p>4003: 这题看着就麻烦...如果把骑士<spanclass="math inline">\(i\)</span>放到<spanclass="math inline">\(c_i\)</span>上, 从下到上回溯的时候, 对于每个节点,我们就可以在子树中找小于<span class="math inline">\(h_i\)</span>的数,这些数的个数就是在这个城市牺牲的人数, 把他们赋成<code>INF</code>,在去掉的同时记录这个节点和<spanclass="math inline">\(c_i\)</span>的深度差, 然后子树加或子树乘,每个骑士只会被去掉一次...然而 <spanclass="math inline">\(c_i\)</span>可能会重复...所以要在<spanclass="math inline">\(c_i\)</span>下面新建节点而不是直接放在<spanclass="math inline">\(c_i\)</span>上...忘了在区间乘的时候修改区间加标记了...丢人. 被卡空间了...蛋疼.<code>dfs</code>爆栈了...蛋疼</p><p>1935$=$4822: cdq分治板子...</p><p>4289: 神仙建图 建完直接最短路 蛋疼...调了一上午加一晚上感觉并没有改什么东西...心血来潮交了一遍居然A了...绝了...我不知道今天发生了什么...</p><p>2929: 有人想写最大流板子吗?</p><p>4152: 众所周知我们没必要跨过某个点来连边 最短路打错了丢人</p><p>1112: 现在看套路已经很老了...枚举连续<spanclass="math inline">\(k\)</span>柱的开头<spanclass="math inline">\(i\)</span>, 用对顶堆(要可以删除如<code>multiset&lt;int&gt;</code>)计算<span class="math inline">\([i, i+ k - 1]\)</span>中的中位数, 用权值树状数组(下标<spanclass="math inline">\(a_i\)</span>的节点值就为<spanclass="math inline">\(a_i\)</span>)计算比中位数小和比他大的数的和...忘取<spanclass="math inline">\(\min\)</span>了丢人......丢人...</p><p>2809: 主席树...为什么这题A的人这么多...大家都喜欢写板子吗 = =</p><ul class="task-list"><li><label><input type="checkbox" />1975: k短路板子?给出题人点赞!</label></li></ul><p>1798: 有人想写线段树板子吗?</p><p>1924: 把一行和一列当做一个点然后就是tarjan <spanclass="math inline">\(\times\)</span>dp的板子了...写起来略蛋疼...我居然还记得tarjan怎么写真是感动<del>然而还是写挂了</del></p><p>3744:分块板子...我一开始求成顺序对了...然后我...把整个序列反了过来23333,忘了处理查找区间不包含任何一块的情况GG了...</p><p>1066: 网络流板子...一定要出这么个输入来恶心人吗...</p><p>1497: 网络流板子...据zyx学长说这玩意有更nb的做法 然而我忘了GG</p><p>3229: 有人听说过一个算法叫GarsiaWachs吗</p><p>4552: 套路题没想到真是太遗憾了</p><p>4033: 又是套路 左儿子右兄弟似乎写挂了...</p><p>1257: 是个神仙题...<span class="math inline">\(x \% i = x -\lfloor\frac{x}i\rfloor \cdot i\)</span>, 所以可以枚举<spanclass="math inline">\(\lfloor \frac{x}i\rfloor\)</span>, 然后做<spanclass="math inline">\(\lfloor \frac{x}i\rfloor\)</span>相等的一段<spanclass="math inline">\(i\)</span>的长度的等差数列求和, 公差为<spanclass="math inline">\(\lfloor \frac{x}i\rfloor\)</span></p><p>4516:SAM板子...加了文件还过了真是有意思(听说出题人一开始是想出SA神仙题然后大家都写的SAM?算了SA写这个也不难...)</p><p>1207: 全网都是<spanclass="math inline">\(m^2\)</span>跑过了我还想啥啊...嗯第2048个AC的很舒服</p><p>4590: 嗯...啥时候SD也给整个这种题啊</p><p>1483: 启发式合并一下就好了 不知道为啥我要写<code>set</code>...</p><p>2648: 第一次见到卡cdq不卡kdt的...emm...</p>]]></content>
      
      
      <categories>
          
          <category> 水题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 水题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>水题笔记 [Oibh]新型计算机 [DP, 线段树, DP优化]</title>
      <link href="/posts/8097.html"/>
      <url>/posts/8097.html</url>
      
        <content type="html"><![CDATA[<p>原来<span class="math inline">\(0\)</span>是自然数啊...= =+</p><span id="more"></span><h3 id="懵逼的-题目">懵逼的 题目</h3><p><ahref="https://www.lydsy.com/JudgeOnline/problem.php?id=2259">BZOJ</a></p><h3 id="扯淡的-题解">扯淡的 题解</h3><p>设<span class="math inline">\(f_i\)</span>为以<spanclass="math inline">\(i\)</span>为开头到终点最小的代价</p><p>为了计算代价, 需要在线段树中把值赋为<span class="math inline">\(f_i +i\)</span>或者<span class="math inline">\(f_i + n - i + 1\)</span></p><p>然后分别在<code>i + a[i] + 1</code>的左边和右边找最小值再加加减减一下就行了...</p><p>然后<span class="math inline">\(\mathrm O(n\lgn)\)</span>被卡了...远古神仙WJMZBMR说有<spanclass="math inline">\(\mathrmO(n)\)</span>做法...然而不会...也没找到...</p><h3 id="沙茶的-代码">沙茶的 代码</h3><p>一开始以为<spanclass="math inline">\(0​\)</span>不是自然数RE了好久...</p><figure><img src="../pictures/20181129A.png" alt="心里AC.png" /><figcaption aria-hidden="true">心里AC.png</figcaption></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (1000000 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF (2000000000)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x) &amp; (-(x)))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LS(dq) ((dq) &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RS(dq) (((dq) &lt;&lt; 1) | 1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rint register int</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cint const int </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line"><span class="type">int</span> le, ri, zh;</span><br><span class="line">&#125;b1[MAXN &lt;&lt; <span class="number">2</span>], b2[MAXN &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> n, a[MAXN], f[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">max</span><span class="params">(cint x, cint y)</span> </span>&#123; <span class="keyword">return</span> (x &gt; y) ? x : y; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">min</span><span class="params">(cint x, cint y)</span> </span>&#123; <span class="keyword">return</span> (x &lt; y) ? x : y; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">js</span><span class="params">(node* b, cint dq, cint le, cint ri)</span> </span>&#123;</span><br><span class="line">b[dq].le = le, b[dq].ri = ri;</span><br><span class="line">b[dq].zh = INF;</span><br><span class="line"><span class="keyword">if</span> (le == ri)<span class="keyword">return</span> ;</span><br><span class="line">cint mi = (le + ri) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="built_in">js</span>(b, <span class="built_in">LS</span>(dq), le, mi);</span><br><span class="line"><span class="built_in">js</span>(b, <span class="built_in">RS</span>(dq), mi + <span class="number">1</span>, ri);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">xg</span><span class="params">(node* b, cint dq, cint wz, cint zh)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (b[dq].le == b[dq].ri) &#123;</span><br><span class="line">b[dq].zh = <span class="built_in">min</span>(zh, b[dq].zh);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line">cint mi = (b[dq].le + b[dq].ri) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (wz &lt;= mi)<span class="built_in">xg</span>(b, <span class="built_in">LS</span>(dq), wz, zh);</span><br><span class="line"><span class="keyword">else</span><span class="built_in">xg</span>(b, <span class="built_in">RS</span>(dq), wz, zh);</span><br><span class="line">b[dq].zh = <span class="built_in">min</span>(b[<span class="built_in">LS</span>(dq)].zh, b[<span class="built_in">RS</span>(dq)].zh);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cx</span><span class="params">(node* b, cint dq, cint le, cint ri)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (b[dq].le == le &amp;&amp; b[dq].ri == ri)</span><br><span class="line"><span class="keyword">return</span> b[dq].zh;</span><br><span class="line">cint mi = (b[dq].le + b[dq].ri) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (ri &lt;= mi)<span class="keyword">return</span> <span class="built_in">cx</span>(b, <span class="built_in">LS</span>(dq), le, ri);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (le &gt; mi)<span class="keyword">return</span> <span class="built_in">cx</span>(b, <span class="built_in">RS</span>(dq), le, ri);</span><br><span class="line"><span class="keyword">else</span><span class="keyword">return</span> <span class="built_in">min</span>(<span class="built_in">cx</span>(b, <span class="built_in">LS</span>(dq), le, mi), <span class="built_in">cx</span>(b, <span class="built_in">RS</span>(dq), mi + <span class="number">1</span>, ri));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">++n;</span><br><span class="line"><span class="built_in">js</span>(b1, <span class="number">1</span>, <span class="number">1</span>, n), <span class="built_in">js</span>(b2, <span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line"><span class="built_in">xg</span>(b1, <span class="number">1</span>, n, n), <span class="built_in">xg</span>(b2, <span class="number">1</span>, n, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (rint i = n - <span class="number">1</span>; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line"><span class="comment">//printf(&quot;%d %d\n&quot;, i, a[i]);</span></span><br><span class="line"><span class="keyword">if</span> (i + a[i] + <span class="number">1</span> &lt;= n)f[i] = <span class="built_in">min</span>(<span class="built_in">cx</span>(b1, <span class="number">1</span>, i + a[i] + <span class="number">1</span>, n) - i - a[i] - <span class="number">1</span>, <span class="built_in">cx</span>(b2, <span class="number">1</span>, i + <span class="number">1</span>, i + a[i] + <span class="number">1</span>) + i + a[i] - n);<span class="comment">//, printf(&quot;ok %d\n&quot;, i);</span></span><br><span class="line"><span class="keyword">else</span>f[i] = <span class="built_in">cx</span>(b2, <span class="number">1</span>, i + <span class="number">1</span>, n) + i + a[i] - n;<span class="comment">//, printf(&quot;ok %d\n&quot;, i);</span></span><br><span class="line"><span class="built_in">xg</span>(b1, <span class="number">1</span>, i, f[i] + i);</span><br><span class="line"><span class="comment">//printf(&quot;ok %d\n&quot;, i);</span></span><br><span class="line"><span class="built_in">xg</span>(b2, <span class="number">1</span>, i, f[i] + n - i + <span class="number">1</span>);</span><br><span class="line"><span class="comment">//printf(&quot;ok %d\n&quot;, i);</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> re = <span class="number">0</span>;</span><br><span class="line"><span class="type">char</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (x &gt; <span class="string">&#x27;9&#x27;</span> || x &lt; <span class="string">&#x27;0&#x27;</span>)x = <span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span> (x &lt;= <span class="string">&#x27;9&#x27;</span> &amp;&amp; x &gt;= <span class="string">&#x27;0&#x27;</span>)re = (re &lt;&lt; <span class="number">1</span>) + (re &lt;&lt; <span class="number">3</span>) + x - <span class="string">&#x27;0&#x27;</span>, x = <span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;data.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">n = <span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">for</span> (rint i = <span class="number">1</span>; i &lt;= n; i++)a[i] = <span class="built_in">read</span>();</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, f[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>By 准备退役旅游的Cansult</p>]]></content>
      
      
      <categories>
          
          <category> 水题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
            <tag> DP </tag>
            
            <tag> DP优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>水题笔记 [CF375B] Maximum Submatrix 2 [卡常, 乱搞]</title>
      <link href="/posts/48813.html"/>
      <url>/posts/48813.html</url>
      
        <content type="html"><![CDATA[<p>大哥我错了我再也不想着<span class="math inline">\(n^2\lgn\)</span>过<span class="math inline">\(5000\)</span>了</p><p>别说<span class="math inline">\(n^2\lg n\)</span>了, <spanclass="math inline">\(n^2\)</span>都过不去</p><span id="more"></span><h3 id="懵逼的-题目">懵逼的 题目</h3><p><a href="https://codeforces.com/contest/375/problem/B">CF</a></p><p>题意: 给一个可以交换行的01矩阵, 要求求出最大的全1子矩阵;要求复杂度<span class="math inline">\(\mathrmO(\text{常数较小的}n^2)\)</span></p><h3 id="扯淡的-题解">扯淡的 题解</h3><p>一开始写的是固定子矩阵的左边,然后二分找每一行能全1到达的最右边的位置, 给位置从大到小排序,然后从上到下和普通的全1矩阵做法一样 更新答案就行了</p><p>然后T了</p><p>然后发现每个点能到达的最右边的位置可以预处理,于是把二分换成了预处理</p><p>然后还是T的</p><p>然后就把<code>sort</code>改成了基数排序</p><p>然后还是T了</p><p>最后加了快读, 趁测评机一个不注意<code>1949ms(2000ms)</code></p><h3 id="沙茶的-代码">沙茶的 代码</h3><figure><img src="../pictures/20181128A.png" alt="了解一下" /><figcaption aria-hidden="true">了解一下</figcaption></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (5000 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rint register int</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cint const int</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n, m, a[MAXN][MAXN], ans, sora[MAXN], sorf[MAXN][MAXN], ton[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">max</span><span class="params">(cint x, cint y)</span> </span>&#123; <span class="keyword">return</span> (x &gt; y) ? x : y; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">msort</span><span class="params">(cint x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (rint i = <span class="number">1</span>; i &lt;= n; ++i)++ton[sorf[i][x]];</span><br><span class="line"><span class="type">int</span> tot = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (rint i = m; i &gt;= <span class="number">0</span>; --i) </span><br><span class="line"><span class="keyword">if</span> (ton[i])&#123;</span><br><span class="line">tot += ton[i];</span><br><span class="line">ans = <span class="built_in">max</span>(ans, i * tot);</span><br><span class="line">ton[i] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (tot == n)</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (rint i = <span class="number">1</span>; i &lt;= m; ++i) </span><br><span class="line"><span class="built_in">msort</span>(i);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">rint re = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">register</span> <span class="type">char</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (x &lt; <span class="string">&#x27;0&#x27;</span> || x &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">x = <span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span> (x &lt;= <span class="string">&#x27;9&#x27;</span> &amp;&amp; x &gt;= <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">re = (re &lt;&lt; <span class="number">1</span>) + (re &lt;&lt; <span class="number">3</span>) + x - <span class="string">&#x27;0&#x27;</span>, x = <span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">read01</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">register</span> <span class="type">char</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (x != <span class="string">&#x27;0&#x27;</span> &amp;&amp; x != <span class="string">&#x27;1&#x27;</span>)x = <span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">return</span> x - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">n = <span class="built_in">read</span>(), m = <span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">for</span> (rint i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line"><span class="keyword">for</span> (rint j = <span class="number">1</span>; j &lt;= m; ++j)</span><br><span class="line">a[i][j] = <span class="built_in">read01</span>();</span><br><span class="line"><span class="keyword">for</span> (rint i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line"><span class="keyword">for</span> (rint j = m, last = <span class="number">0</span>; j &gt;= <span class="number">1</span>; --j)</span><br><span class="line"><span class="keyword">if</span> (!a[i][j])</span><br><span class="line">last = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (!last)last = j;</span><br><span class="line">sorf[i][j] = last - j + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>By 准备退役旅游的Cansult</p>]]></content>
      
      
      <categories>
          
          <category> 翻车笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 乱搞 </tag>
            
            <tag> 卡常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>翻车笔记 [BZOJ3329] Xorequ [位运算, 数位DP, 矩阵]</title>
      <link href="/posts/58311.html"/>
      <url>/posts/58311.html</url>
      
        <content type="html"><![CDATA[<p>我居然还记得矩乘怎么写 真是感人</p><span id="more"></span><h3 id="懵逼的-题目">懵逼的 题目</h3><p><ahref="https://www.lydsy.com/JudgeOnline/problem.php?id=3329">BZOJ</a></p><h3 id="扯淡的-题解">扯淡的 题解</h3><p><code>&#123;x xor 3x = 2x&#125; =&gt; &#123;x xor 2x = 3x&#125; =&gt; &#123;x xor 2x = x + 2x&#125; =&gt; &#123;x没有相邻的1&#125;</code></p><p>没有相邻的<span class="math inline">\(1\)</span>,第一问用数位DP就完事了</p><p>第二问我没有想到会有两个<spanclass="math inline">\(1\)</span>中间隔着不只一个<spanclass="math inline">\(0\)</span>的情况然后写了个<spanclass="math inline">\(2^\frac{n}{2} \cdot 2^{n - \frac{n}{2}} -1\)</span>就GG了</p><p>我们发现第二问这个玩意是可以递推的, 设答案为<spanclass="math inline">\(S_n\)</span>, 如果在<spanclass="math inline">\(S_{n - 1}\)</span>后面加<spanclass="math inline">\(0\)</span>(指二进制下), 或者在<spanclass="math inline">\(S_{n - 2}\)</span>后面加<spanclass="math inline">\(01\)</span>就包含了所有的情况, 所以<spanclass="math inline">\(S_n = S_{n - 1} + S_{n - 2} \to \{S_n\} =\{fib_n\}\)</span>, 矩乘一下就完事了</p><h3 id="沙茶的-代码">沙茶的 代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**************************************************************</span></span><br><span class="line"><span class="comment">    Problem: 3329</span></span><br><span class="line"><span class="comment">    User: Cansult</span></span><br><span class="line"><span class="comment">    Language: C++</span></span><br><span class="line"><span class="comment">    Result: Accepted</span></span><br><span class="line"><span class="comment">    Time:48 ms</span></span><br><span class="line"><span class="comment">    Memory:1296 kb</span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MOD (1000000000 + 7)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXL (60 + 5)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">matrix</span> &#123;</span><br><span class="line">    LL n, m, zh[<span class="number">3</span>][<span class="number">3</span>];</span><br><span class="line">&#125;sou, m1;</span><br><span class="line">LL n, a[MAXL], f[MAXL][<span class="number">2</span>][<span class="number">2</span>]; <span class="comment">// 当前在第i位, 是否卡上界, 末尾是否为1的符合条件的x的个数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(f, <span class="number">0</span>, <span class="built_in">sizeof</span>(f));</span><br><span class="line">    f[<span class="number">0</span>][<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; a[<span class="number">0</span>]; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> up = <span class="number">0</span>; up &lt;= <span class="number">1</span>; up++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> ln = <span class="number">0</span>; ln &lt;= <span class="number">1</span>; ln++)</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> nn = <span class="number">0</span>; nn &lt;= <span class="number">1</span>; nn++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (up &amp;&amp; nn &gt; a[i + <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">if</span> (ln &amp;&amp; nn)   <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="type">int</span> nup = (up &amp; (a[i + <span class="number">1</span>] == nn));</span><br><span class="line">                    f[i + <span class="number">1</span>][nup][nn] += f[i][up][ln];</span><br><span class="line">                &#125;</span><br><span class="line">    LL ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> up = <span class="number">0</span>; up &lt;= <span class="number">1</span>; up++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> ln = <span class="number">0</span>; ln &lt;= <span class="number">1</span>; ln++)</span><br><span class="line">            ans += f[a[<span class="number">0</span>]][up][ln];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">matrix <span class="title">mult</span><span class="params">(matrix a, matrix b)</span> </span>&#123;</span><br><span class="line">    matrix re;</span><br><span class="line">    re.n = a.n, re.m = b.m;</span><br><span class="line">    <span class="built_in">memset</span>(re.zh, <span class="number">0</span>, <span class="built_in">sizeof</span>(re.zh));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= a.n; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= b.m; j++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt;= b.n; k++)</span><br><span class="line">                re.zh[i][j] = (re.zh[i][j] + (a.zh[i][k] * b.zh[k][j]) % MOD) % MOD;</span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">matrix <span class="title">ksm</span><span class="params">(LL b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">1</span>) <span class="keyword">return</span> m1;</span><br><span class="line">    matrix re = <span class="built_in">ksm</span>(b &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    re = <span class="built_in">mult</span>(re, re);</span><br><span class="line">    <span class="keyword">if</span> (b &amp; <span class="number">1</span>)  re = <span class="built_in">mult</span>(re, m1);</span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    sou.n = <span class="number">1</span>, sou.m = <span class="number">2</span>, sou.zh[<span class="number">1</span>][<span class="number">1</span>] = sou.zh[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">    m1.n = m1.m = <span class="number">2</span>, m1.zh[<span class="number">1</span>][<span class="number">2</span>] = m1.zh[<span class="number">2</span>][<span class="number">1</span>] = m1.zh[<span class="number">2</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;n);</span><br><span class="line">        a[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (n &gt;= (<span class="number">1ll</span> &lt;&lt; a[<span class="number">0</span>])) ++a[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= a[<span class="number">0</span>]; i++)  a[i] = ((n &amp; (<span class="number">1ll</span> &lt;&lt; (a[<span class="number">0</span>] - i))) &gt; <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">mult</span>(sou, <span class="built_in">ksm</span>(n)).zh[<span class="number">1</span>][<span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>By 准备退役旅游的Cansult</p>]]></content>
      
      
      <categories>
          
          <category> 翻车笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 位运算 </tag>
            
            <tag> 数位DP </tag>
            
            <tag> DP </tag>
            
            <tag> 矩阵 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>比赛总结 Dwango Programming Contest V [清奇脑回路, 乱搞]</title>
      <link href="/posts/12769.html"/>
      <url>/posts/12769.html</url>
      
        <content type="html"><![CDATA[<p>菜的真实</p><span id="more"></span><h3 id="c---k-dmc"><ahref="https://dwacon5th-prelims.contest.atcoder.jp/tasks/dwacon5th_prelims_c">C- k-DMC</a></h3><p>给<span class="math inline">\(Q\)</span>个<spanclass="math inline">\(k\)</span>, 对于每个<spanclass="math inline">\(k_i\)</span>, 回答在程序初始给定的长度为<spanclass="math inline">\(N\)</span>的字符串<spanclass="math inline">\(S\)</span>中: 有多少个三元组<spanclass="math inline">\((a, b, c)\)</span> 满足<spanclass="math inline">\(S[a] = D, S[b] = M, S[c] = C\)</span>并且<spanclass="math inline">\(c - a &lt; k_i\)</span>; <spanclass="math inline">\(N \le 10^6, Q \le 75\)</span>, 要求<spanclass="math inline">\(NQ\)</span>做法</p><blockquote><p>我(不确定这题<span class="math inline">\(NQ\)</span>能不能过): Asia啊这题复杂度多少啊 Asia: 这题(单次询问)复杂度线性的(注意句式为省略句) 我:???? Asia: 这是基础操作啊 我: ?????????(吓傻跪烂.jpg)</p></blockquote><p><del>迫真线性</del></p><p>过于真实</p><p>对于每一个询问<span class="math inline">\(k_i\)</span>, 遍历<spanclass="math inline">\(S\)</span>, 遇到一个<spanclass="math inline">\(M\)</span>就入队加入贡献, 遇到<spanclass="math inline">\(C\)</span>就把不合法的<spanclass="math inline">\(M\)</span>出队, 去掉不合法贡献,计算当前队列的合法贡献</p><p>贡献:先做一个前缀和数组<code>fr[i]</code>代表前<code>i</code>个字符中<spanclass="math inline">\(D\)</span>的个数, 当前队列能对<spanclass="math inline">\(M\)</span>产生的贡献为[队列中所有<spanclass="math inline">\(M\)</span>位置的<code>fr</code> - <spanclass="math inline">\(C\)</span>的下标减去<spanclass="math inline">\(k_i\)</span>所在的位置的<code>fr</code> <spanclass="math inline">\(\times\)</span> 队列元素个数],所以入队的时候加上当前位置的<code>fr</code>即可</p><p>注意不要在减<code>k</code>的时候下标越界</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (1000000 + 5)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">LL fr[MAXN];</span><br><span class="line"><span class="type">char</span> s[MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">LL dqd = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (s[i] == <span class="string">&#x27;M&#x27;</span>)q.<span class="built_in">push</span>(i), dqd += fr[i];</span><br><span class="line"><span class="keyword">if</span> (s[i] == <span class="string">&#x27;C&#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">while</span> (!q.<span class="built_in">empty</span>() &amp;&amp; i - q.<span class="built_in">front</span>() &gt;= k)</span><br><span class="line">dqd -= fr[q.<span class="built_in">front</span>()], q.<span class="built_in">pop</span>();</span><br><span class="line">ans += dqd - fr[<span class="built_in">max</span>(<span class="number">0</span>, i - k)] * q.<span class="built_in">size</span>(); <span class="comment">// 这个地方要小心越界</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">fr[i] = fr[i - <span class="number">1</span>] + (s[i] == <span class="string">&#x27;D&#x27;</span>);</span><br><span class="line"><span class="type">int</span> q;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;q);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, srq; i &lt;= q; i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;srq), <span class="built_in">solve</span>(srq);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="d---square-rotation"><ahref="https://dwacon5th-prelims.contest.atcoder.jp/tasks/dwacon5th_prelims_d">D- Square Rotation</a></h3><p>我怎么...只会搜索啊...</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="e---cyclic-gcds"><ahref="https://dwacon5th-prelims.contest.atcoder.jp/tasks/dwacon5th_prelims_e">E- Cyclic GCDs</a></h3><p>我怎么...读不懂题啊...</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p>By 准备退役旅游的Cansult</p>]]></content>
      
      
      <categories>
          
          <category> 比赛总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 清奇脑回路 </tag>
            
            <tag> 乱搞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>比赛总结 Codeforces Round 524 (Div. 2) [清奇脑回路, 主席树, 乱搞, Hash]</title>
      <link href="/posts/39689.html"/>
      <url>/posts/39689.html</url>
      
        <content type="html"><![CDATA[<p>参悟完大爷们的代码感觉灵魂得到了升华</p><p>比赛的时候总是走神有点蛋疼</p><span id="more"></span><p>ABC肥肠水...D没读懂题...后来gayge告诉我题的时候就剩20min了...不过后来的事实证明就是读懂题了1H也还是不够我倒腾的...</p><h3 id="d.-olya-and-magical-square"><ahref="https://codeforces.com/contest/1080/problem/D">D. Olya and magicalsquare</a></h3><p>题意是给一个边长为<span class="math inline">\(2^n\)</span>的正方形每一次分割把正方形等分为4份, 问分<spanclass="math inline">\(k\)</span>次后是否能有一条从左下到右上的路径(边相连),路径上的正方形大小相等, 要求输出路径上正方形大小对2的对数; <spanclass="math inline">\(n, k \in \mathrm {long long}\)</span></p><figure><img src="../pictures/20181126A.png" alt="大体思路" /><figcaption aria-hidden="true">大体思路</figcaption></figure><p>大体就是上面那玩意...先判断能不能在右下角的<spanclass="math inline">\(2^{n - 1}\)</span>正方形中分完<spanclass="math inline">\(k\)</span>; 如果不能 就看看整个<spanclass="math inline">\(2^n\)</span>的正方形能不能用恰好<spanclass="math inline">\(k\)</span>次分完; 再不能判断出来就假设路径上的正方形大小是最后分完的正方形中最小的, 枚举这个大小并判断;再不能判断 就说明路径上的正方形比其他正方形要大,可以看做先把初始正方形分完 然后再在左上角减少分割次数 合并出一条路径,只需要看看<span class="math inline">\(k\)</span>是否足够小,能不能合并出来就行了</p><p>写自闭了...估计有更简单的方法 有空再参悟一下大爷们的代码...</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF (1000000000000000000ll + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (100000 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL unsigned long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">LL S[MAXN], GG[MAXN], G[MAXN]; <span class="comment">// S[i]: 把大小为2^i的正方形分割至1需要的步数; GG[i]: 把大小为2^i的正方形分割至正方形长度为1组成的拐角需要的步数; G[i]: 把大小为2^i的正方形分割至长度为1组成的竖线或横线需要的步数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">LL x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; MAXN &amp;&amp; S[i] &lt; INF; i++)S[i] = S[i - <span class="number">1</span>] + x, x *= <span class="number">4</span>;</span><br><span class="line">x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; MAXN &amp;&amp; G[i] &lt; INF; i++)G[i] = G[i - <span class="number">1</span>] + x, x &lt;&lt;= <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; MAXN &amp;&amp; GG[i] &lt; INF; i++)GG[i] = GG[i - <span class="number">1</span>] + G[i - <span class="number">1</span>] * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(LL n, LL k)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; MAXN; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (k - <span class="number">1</span> &lt;= S[i])</span><br><span class="line"><span class="keyword">if</span> (i &lt;= n - <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;YES %llu\n&quot;</span>, n - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (k == S[i]) &#123;</span><br><span class="line"><span class="keyword">if</span> (i &gt; n)</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (i == n)</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;YES 0&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="keyword">if</span> (k &gt;= GG[i] &amp;&amp; k &lt;= S[i]) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;YES %llu\n&quot;</span>, n - i);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">1</span>)</span><br><span class="line"><span class="built_in">puts</span>((k &gt; <span class="number">1</span>) ? <span class="string">&quot;NO&quot;</span> : <span class="string">&quot;YES 1&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (k &lt;= S[n] - <span class="number">2</span> * (<span class="number">1</span> &lt;&lt; (n - <span class="number">1</span>)) + <span class="number">1</span>)</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;YES 1&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">init</span>();</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">for (int i = 1; i &lt;= 8; i++) printf(&quot;%llu &quot;, S[i]);</span></span><br><span class="line"><span class="comment">puts(&quot;&quot;);</span></span><br><span class="line"><span class="comment">for (int i = 1; i &lt;= 8; i++) printf(&quot;%llu &quot;, GG[i]);</span></span><br><span class="line"><span class="comment">puts(&quot;&quot;);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> t;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;t);</span><br><span class="line"><span class="keyword">while</span> (t--) &#123;</span><br><span class="line">LL n, k;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%llu%llu&quot;</span>, &amp;n, &amp;k);</span><br><span class="line"><span class="built_in">solve</span>(n, k);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="e.-sonya-and-matrix-beauty"><ahref="https://codeforces.com/contest/1080/problem/E">E. Sonya and MatrixBeauty</a></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="f.-katya-and-segments-sets"><ahref="https://codeforces.com/contest/1080/problem/F">F. Katya andSegments Sets</a></h3><p>妈耶这题就更有意思了</p><p>给<span class="math inline">\(k\)</span>个线段, 每个线段属于一个集合,共有<span class="math inline">\(n\)</span>个集合, 有<spanclass="math inline">\(m\)</span>个询问, 每次询问编号在<spanclass="math inline">\([a, b]\)</span>中的集合, 是否都至少有一个线段<spanclass="math inline">\([le, ri]\)</span>满足<span class="math inline">\(x\le le \le ri \le y\)</span>; 要求<span class="math inline">\((m + k)\lg n\)</span>做法, 强制在线</p><p>我一开始的思路大概是行是数轴列是集合然后二维线段树云云 后来参悟了<ahref="https://codeforces.com/contest/1080/submission/46161976">rnk1大爷的代码</a>发现我就是个弟弟OrzOrz</p><figure><img src="../pictures/20181126B.png" alt="大体思路" /><figcaption aria-hidden="true">大体思路</figcaption></figure><p>大体就是这样...OrzOrz</p><p>(实现起来好像固定右端点方便一点这里就反着写了...)</p><p>把坐标离散化后按照线段所属建主席树,根的编号为线段的右端点离散后的坐标; 节点所存储的值是区间内最小的值,代表当前节点所代表的集合区间中, 固定右端点时最靠左的左端点的位置;初始坐标都为<span class="math inline">\(0\)</span>, 每次插入一个线段从线段右端点坐标所在的根向下走, 直到递归的区间为<spanclass="math inline">\([\text{线段所在的集合编号},\text{线段所在的集合编号}]\)</span>, 往大里更新左端点的值;查询的时候就固定右端点, 找区间内最小的左端点, 然后再和<spanclass="math inline">\(x\)</span>比较一下就完事了;</p><p>我认为比较难想到的是如果集合中没有右端点符合条件的线段他的值就会为<span class="math inline">\(0\)</span>,从而导致整个区间的最小值(也就是最靠左的左端点)为<spanclass="math inline">\(0\)</span>, 而这一定是不满足要求的, 肥肠的妙啊 ==</p><p><del>这样的做法甚至支持带修改啊 Excited!</del></p><p><strong>PS</strong>:代码写起来还是有一点具体的问题的...就是如果像我这么写的话由于同一个节点会在插入时访问多次可能会出现一个情况:这个节点在之前的修改中已经被赋成<code>b[pre].ls</code>或者<code>b[pre].rs</code>了,然而现在又要修改这个点所在的区间,如果直接修改就会修改到ta的<code>pre</code>上去了...所以我加了一个<code>bool isl</code>代表这个节点是否曾经被赋为<code>pre</code>...</p><p>还是要使劲Orz一番在比赛时写出来的大爷顺便这题有60+测试点...真几把刺激</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (100000 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXR (300000 + 5)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">seg</span> &#123;</span><br><span class="line"><span class="type">int</span> le, ri, belong;</span><br><span class="line">&#125;a[MAXR];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line"><span class="type">int</span> ls, rs, zh, le, ri;</span><br><span class="line">&#125;b[MAXR &lt;&lt; <span class="number">6</span>];</span><br><span class="line"><span class="type">int</span> root[MAXR], n, m, k, sora[MAXR], cntb;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">js</span><span class="params">(<span class="type">int</span> pre, <span class="type">int</span>&amp; dq, <span class="type">int</span> le, <span class="type">int</span> ri, <span class="type">int</span> wz, <span class="type">int</span> zh, <span class="type">bool</span> isl)</span> </span>&#123; <span class="comment">// 可能会出现一点问题...就是之前已经赋为b[pre].ls || b[ore].rs了, 现在又需要新建点就有点蛋疼了...</span></span><br><span class="line"><span class="keyword">if</span> (!dq || isl)b[dq = ++cntb].le = le, b[dq].ri = ri;</span><br><span class="line"><span class="keyword">if</span> (le == ri) &#123;</span><br><span class="line">b[dq].zh = <span class="built_in">max</span>(zh, <span class="built_in">max</span>(b[dq].zh, b[pre].zh));</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mi = (le + ri) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (wz &gt; mi)b[dq].ls = (b[dq].ls ? b[dq].ls : b[pre].ls), <span class="built_in">js</span>(b[pre].rs, b[dq].rs, mi + <span class="number">1</span>, ri, wz, zh, b[dq].rs == b[pre].rs);</span><br><span class="line"><span class="keyword">else</span>b[dq].rs = (b[dq].rs ? b[dq].rs : b[pre].rs), <span class="built_in">js</span>(b[pre].ls, b[dq].ls, le, mi, wz, zh, b[dq].ls == b[pre].ls);</span><br><span class="line">b[dq].zh = <span class="built_in">min</span>(b[b[dq].ls].zh, b[b[dq].rs].zh);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cx</span><span class="params">(<span class="type">int</span> rdq, <span class="type">int</span> le, <span class="type">int</span> ri)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!rdq)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (b[rdq].le == le &amp;&amp; b[rdq].ri == ri)<span class="keyword">return</span> b[rdq].zh;</span><br><span class="line"><span class="type">int</span> mi = (b[rdq].le + b[rdq].ri) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (le &gt; mi)<span class="keyword">return</span> <span class="built_in">cx</span>(b[rdq].rs, le, ri);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (ri &lt;= mi)<span class="keyword">return</span> <span class="built_in">cx</span>(b[rdq].ls, le, ri);</span><br><span class="line"><span class="keyword">else</span><span class="keyword">return</span> <span class="built_in">min</span>(<span class="built_in">cx</span>(b[rdq].ls, le, mi), <span class="built_in">cx</span>(b[rdq].rs, mi + <span class="number">1</span>, ri));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(seg x, seg y)</span> </span>&#123; <span class="keyword">return</span> x.ri &lt; y.ri; &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;k);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= k; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;a[i].le, &amp;a[i].ri, &amp;a[i].belong);</span><br><span class="line">sora[++sora[<span class="number">0</span>]] = a[i].ri;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(sora + <span class="number">1</span>, sora + sora[<span class="number">0</span>] + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">sort</span>(a + <span class="number">1</span>, a + k + <span class="number">1</span>, cmp);</span><br><span class="line">sora[<span class="number">0</span>] = <span class="built_in">unique</span>(sora + <span class="number">1</span>, sora + sora[<span class="number">0</span>] + <span class="number">1</span>) - sora - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= k; i++) &#123;</span><br><span class="line">a[i].ri = <span class="built_in">lower_bound</span>(sora + <span class="number">1</span>, sora + sora[<span class="number">0</span>] + <span class="number">1</span>, a[i].ri) - sora;</span><br><span class="line"><span class="built_in">js</span>(root[a[i].ri - <span class="number">1</span>], root[a[i].ri], <span class="number">1</span>, n, a[i].belong, a[i].le, a[i].ri != a[i - <span class="number">1</span>].ri);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, sra, srb, srx, sry; i &lt;= m; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>, &amp;sra, &amp;srb, &amp;srx, &amp;sry);</span><br><span class="line"><span class="built_in">puts</span>((<span class="built_in">cx</span>(root[<span class="built_in">upper_bound</span>(sora + <span class="number">1</span>, sora + sora[<span class="number">0</span>] + <span class="number">1</span>, sry) - sora - <span class="number">1</span>], sra, srb) &gt;= srx) ? <span class="string">&quot;yes&quot;</span> : <span class="string">&quot;no&quot;</span>);</span><br><span class="line"><span class="built_in">fflush</span>(stdout);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>By 准备退役旅游的Cansult</p>]]></content>
      
      
      <categories>
          
          <category> 比赛总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 清奇脑回路 </tag>
            
            <tag> 主席树 </tag>
            
            <tag> 乱搞 </tag>
            
            <tag> Hash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>翻车笔记 [PA2014] Matryca [清奇脑回路]</title>
      <link href="/posts/42592.html"/>
      <url>/posts/42592.html</url>
      
        <content type="html"><![CDATA[<p>猜结论是能力的一部分</p><p>读题能力也是</p><span id="more"></span><h3 id="懵逼的-题目">懵逼的 题目</h3><p><ahref="https://www.lydsy.com/JudgeOnline/problem.php?id=3725">Orz</a></p><h3 id="扯淡的-题解">扯淡的 题解</h3><p>先说结论 <code>答案 = n - 最小的两个大写字符之间的距离</code></p><p>我感觉...这个证明我不会的啊....后来发现 我直接 看错题了啊QAQ</p><p>他要求的是要让刷子给给每个位置必须都要刷一遍的啊...</p><p>那么我们就不能让刷子移动超过这个最小的空缺啊 然后就完事了啊</p><h3 id="沙茶的-代码">沙茶的 代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**************************************************************</span></span><br><span class="line"><span class="comment">    Problem: 3725</span></span><br><span class="line"><span class="comment">    User: Cansult</span></span><br><span class="line"><span class="comment">    Language: C++</span></span><br><span class="line"><span class="comment">    Result: Accepted</span></span><br><span class="line"><span class="comment">    Time:336 ms</span></span><br><span class="line"><span class="comment">    Memory:2264 kb</span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (1000000 + 5)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">char</span> s[MAXN];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s);</span><br><span class="line">    n = <span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="type">int</span> wz = <span class="number">-1</span>, ans = n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="keyword">if</span> (s[i] != <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (~wz &amp;&amp; s[i] != s[wz])</span><br><span class="line">                ans = <span class="built_in">min</span>(ans, i - wz);</span><br><span class="line">            wz = i;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, n - ans + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>By 联赛钦定爆零的 Cansult</p>]]></content>
      
      
      <categories>
          
          <category> 翻车笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 清奇脑回路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>翻车笔记 ZROI246. 数对子 [线段树, 清奇脑回路]</title>
      <link href="/posts/19620.html"/>
      <url>/posts/19620.html</url>
      
        <content type="html"><![CDATA[<p>情况一定要考虑全面...</p><span id="more"></span><h3 id="懵逼的-题目">懵逼的 题目</h3><p><a href="http://www.zhengruioi.com/problem/246">...</a></p><h3 id="扯淡的-题解">扯淡的 题解</h3><p>比赛的时候写了一个线段树求区间并再加上区间数位DP...感觉自己肥肠dio然后一分没有</p><p>先是全局的<code>LL</code>数组被<code>int</code>屏蔽了...我也不知道咋想的...</p><p>然后又发现我漏了一种情况就是两个不相交的区间也会对答案产生贡献...</p><p>后来我抄敦爷爷题解发现直接分别记录当前区间并中数位<code>1</code>的个数为奇数和偶数的数的个数然后再乘起来就行了...</p><p>再后来我发现我不会求这个玩意...然后参悟了一波大爷的代码</p><figure><img src="../pictures/20180927A.png" alt="GG" /><figcaption aria-hidden="true">GG</figcaption></figure><p>...行吧...</p><h3 id="沙茶的-代码">沙茶的 代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pch.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXK (32 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (500000 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF (0x7fffffff)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;LL, LL&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LS(dq) ((dq) &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RS(dq) (((dq) &lt;&lt; 1) | 1)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> le, ri, zh, lazy;</span><br><span class="line">&#125;b[MAXN &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">LL sora[MAXN &lt;&lt; <span class="number">1</span>];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; cov;</span><br><span class="line">pii a[MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_up</span><span class="params">(<span class="type">int</span> dq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (b[<span class="built_in">LS</span>(dq)].zh == b[<span class="built_in">RS</span>(dq)].zh)b[dq].zh = b[<span class="built_in">LS</span>(dq)].zh;</span><br><span class="line"><span class="keyword">else</span>b[dq].zh = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_down</span><span class="params">(<span class="type">int</span> dq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">b[<span class="built_in">LS</span>(dq)].zh = b[<span class="built_in">RS</span>(dq)].zh = b[<span class="built_in">LS</span>(dq)].lazy = b[<span class="built_in">RS</span>(dq)].lazy = b[dq].lazy;</span><br><span class="line">b[dq].lazy = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">js</span><span class="params">(<span class="type">int</span> dq, <span class="type">int</span> le, <span class="type">int</span> ri)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">b[dq].zh = <span class="number">0</span>, b[dq].le = le, b[dq].ri = ri, b[dq].lazy = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (le == ri)<span class="keyword">return</span>;</span><br><span class="line"><span class="type">int</span> mi = (le + ri) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="built_in">js</span>(<span class="built_in">LS</span>(dq), le, mi);</span><br><span class="line"><span class="built_in">js</span>(<span class="built_in">RS</span>(dq), mi + <span class="number">1</span>, ri);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cx</span><span class="params">(<span class="type">int</span> dq, <span class="type">int</span> wz)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (b[dq].le == b[dq].ri)</span><br><span class="line"><span class="keyword">return</span> b[dq].zh;</span><br><span class="line"><span class="type">int</span> mi = (b[dq].le + b[dq].ri) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (b[dq].lazy)</span><br><span class="line"><span class="built_in">push_down</span>(dq);</span><br><span class="line"><span class="keyword">if</span> (wz &gt; mi)</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">cx</span>(<span class="built_in">RS</span>(dq), wz);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">cx</span>(<span class="built_in">LS</span>(dq), wz);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">xg</span><span class="params">(<span class="type">int</span> dq, <span class="type">int</span> le, <span class="type">int</span> ri, <span class="type">int</span> zh)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (b[dq].le == le &amp;&amp; b[dq].ri == ri)</span><br><span class="line">&#123;</span><br><span class="line">b[dq].zh = b[dq].lazy = zh;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mi = (b[dq].le + b[dq].ri) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (b[dq].lazy)</span><br><span class="line"><span class="built_in">push_down</span>(dq);</span><br><span class="line"><span class="keyword">if</span> (le &gt; mi)</span><br><span class="line"><span class="built_in">xg</span>(<span class="built_in">RS</span>(dq), le, ri, zh);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (ri &lt;= mi)</span><br><span class="line"><span class="built_in">xg</span>(<span class="built_in">LS</span>(dq), le, ri, zh);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">xg</span>(<span class="built_in">LS</span>(dq), le, mi, zh), <span class="built_in">xg</span>(<span class="built_in">RS</span>(dq), mi + <span class="number">1</span>, ri, zh);</span><br><span class="line"><span class="built_in">push_up</span>(dq);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">cx2</span><span class="params">(<span class="type">int</span> dq, <span class="type">int</span> le, <span class="type">int</span> ri)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (b[dq].zh &amp;&amp; b[dq].zh != <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">cov.<span class="built_in">push_back</span>(b[dq].zh);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (b[dq].le == b[dq].ri)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="type">int</span> mi = (b[dq].le + b[dq].ri) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (b[dq].lazy)</span><br><span class="line"><span class="built_in">push_down</span>(dq);</span><br><span class="line"><span class="keyword">if</span> (le &gt; mi)</span><br><span class="line"><span class="built_in">cx2</span>(<span class="built_in">RS</span>(dq), le, ri);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (ri &lt;= mi)</span><br><span class="line"><span class="built_in">cx2</span>(<span class="built_in">LS</span>(dq), le, ri);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (b[<span class="built_in">LS</span>(dq)].zh)</span><br><span class="line"><span class="built_in">cx2</span>(<span class="built_in">LS</span>(dq), le, mi);</span><br><span class="line"><span class="keyword">if</span> (b[<span class="built_in">RS</span>(dq)].zh)</span><br><span class="line"><span class="built_in">cx2</span>(<span class="built_in">RS</span>(dq), mi + <span class="number">1</span>, ri);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">is1</span><span class="params">(LL x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> re = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">32</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line"><span class="keyword">if</span> (x &amp; (<span class="number">1</span> &lt;&lt; i))</span><br><span class="line">++re;</span><br><span class="line"><span class="keyword">return</span> (re &amp; <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">cal</span><span class="params">(LL x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x &amp; <span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> (x + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">return</span> (x &gt;&gt; <span class="number">1</span>) + <span class="built_in">is1</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">cal1</span><span class="params">(<span class="type">int</span> i)</span> <span class="comment">// 0, 1; 2, 3; 4, 5;</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (<span class="built_in">cal</span>(sora[a[i].second]) - <span class="built_in">cal</span>(sora[a[i].first] - <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">cal0</span><span class="params">(<span class="type">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (sora[a[i].second] - sora[a[i].first] + <span class="number">1</span>) - <span class="built_in">cal1</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">a[<span class="number">0</span>].first = INF, a[<span class="number">0</span>].second = -INF;</span><br><span class="line"><span class="built_in">js</span>(<span class="number">1</span>, <span class="number">1</span>, sora[<span class="number">0</span>]);</span><br><span class="line">LL ans1 = <span class="number">0</span>, ans0 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> left = <span class="built_in">min</span>(a[i].first, a[<span class="built_in">cx</span>(<span class="number">1</span>, a[i].first)].first), right = <span class="built_in">max</span>(a[i].second, a[<span class="built_in">cx</span>(<span class="number">1</span>, a[i].second)].second);</span><br><span class="line">cov.<span class="built_in">clear</span>();</span><br><span class="line"><span class="built_in">cx2</span>(<span class="number">1</span>, left, right);</span><br><span class="line"><span class="built_in">sort</span>(cov.<span class="built_in">begin</span>(), cov.<span class="built_in">end</span>());</span><br><span class="line">cov.<span class="built_in">erase</span>(<span class="built_in">unique</span>(cov.<span class="built_in">begin</span>(), cov.<span class="built_in">end</span>()), cov.<span class="built_in">end</span>());</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; cov.<span class="built_in">size</span>(); j++)</span><br><span class="line">ans1 -= <span class="built_in">cal1</span>(cov[j]), ans0 -= <span class="built_in">cal0</span>(cov[j]);</span><br><span class="line"><span class="built_in">xg</span>(<span class="number">1</span>, left, right, i);</span><br><span class="line">a[i].first = left, a[i].second = right;</span><br><span class="line"><span class="comment">//printf(&quot;%d: %lld %lld\n&quot;, i, ans1, ans0);</span></span><br><span class="line">ans1 += <span class="built_in">cal1</span>(i), ans0 += <span class="built_in">cal0</span>(i);</span><br><span class="line"><span class="comment">//printf(&quot;%d: %lld %lld\n&quot;, i, ans1, ans0);</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans0 * ans1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>, &amp;a[i].first, &amp;a[i].second), sora[++sora[<span class="number">0</span>]] = a[i].first, sora[++sora[<span class="number">0</span>]] = a[i].second;</span><br><span class="line"><span class="built_in">sort</span>(sora + <span class="number">1</span>, sora + sora[<span class="number">0</span>] + <span class="number">1</span>);</span><br><span class="line">sora[<span class="number">0</span>] = <span class="built_in">unique</span>(sora + <span class="number">1</span>, sora + sora[<span class="number">0</span>] + <span class="number">1</span>) - sora - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">a[i].first = <span class="built_in">lower_bound</span>(sora + <span class="number">1</span>, sora + sora[<span class="number">0</span>] + <span class="number">1</span>, a[i].first) - sora, a[i].second = <span class="built_in">lower_bound</span>(sora + <span class="number">1</span>, sora + sora[<span class="number">0</span>] + <span class="number">1</span>, a[i].second) - sora;</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">8</span></span><br><span class="line"><span class="comment">68 69</span></span><br><span class="line"><span class="comment">14 15</span></span><br><span class="line"><span class="comment">64 64</span></span><br><span class="line"><span class="comment">17 24</span></span><br><span class="line"><span class="comment">67 76</span></span><br><span class="line"><span class="comment">37 54</span></span><br><span class="line"><span class="comment">27 32</span></span><br><span class="line"><span class="comment">45 56</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">6</span></span><br><span class="line"><span class="comment">42</span></span><br><span class="line"><span class="comment">110</span></span><br><span class="line"><span class="comment">380</span></span><br><span class="line"><span class="comment">506</span></span><br><span class="line"><span class="comment">550</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>By 联赛钦定爆零的 Cansult</p>]]></content>
      
      
      <categories>
          
          <category> 翻车笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
            <tag> 清奇脑回路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>翻车笔记 ZROI3354. [18 提高 5]进化 [清奇脑回路, 二进制]</title>
      <link href="/posts/37088.html"/>
      <url>/posts/37088.html</url>
      
        <content type="html"><![CDATA[<p>神仙做法</p><span id="more"></span><h2 id="懵逼的-题目">懵逼的 题目</h2><p><a href="http://www.zhengruioi.com/problem/354">Orz</a></p><h2 id="扯淡的-题解">扯淡的 题解</h2><p>dls出的题果然思路清奇啊<code>/cy</code></p><p>首先我们发现这个题啊 他这个头尾的限制肥肠不得劲,如果我们在前后都加一个<span class="math inline">\(0\)</span>的话,我们会发现变化的规则都一样了</p><p>现在我们让变化规则统一变成了<span class="math inline">\(a_{i, j} =a_{i - 1, j - 1} \oplus a_{i- 1, j + 1}\)</span></p><p>强迫症舒服了.jpg</p><p>然后我们又发现, 如果我们把这个序列(不包括头尾的两个<spanclass="math inline">\(0\)</span>)倒着复制一遍, 粘到末尾<spanclass="math inline">\(0\)</span>的后面, 也就是</p><p><span class="math display">\[a_0 = 0, a_1, a_2, \cdots, a_n, a_{n + 1} = 0, a_{n + 2} = a_{n}, a_{n +3} = a_{n - 1}, \cdots, a_{2n + 1} = a_1\]</span></p><p>然后首尾相接变成一个环</p><p>这样有什么用呢 因为对于对于我们加进去的两个<spanclass="math inline">\(0\)</span>来说这个环是对称的, 也就是说<spanclass="math inline">\(0\)</span>两边的数都是一样的,所以我们加进去的<spanclass="math inline">\(0\)</span>在不管进化多少次之后都会是<spanclass="math inline">\(0\)</span></p><p>这样我们可以保证这个对称的两边不会互相影响(不会跨过这个分界)</p><p>既然这样我们对这个环操作完了之后 原序列在环上位置的那些数就是答案</p><p>那么我们现在只需要考虑:在一个环上我们怎么计算[每一个点都变成他两边点的异或值]这样<spanclass="math inline">\(T\)</span>次后这个环的样子</p><p>然后我们发现 在这个每一次操作每个点都变成两边点异或值的序列中当操作数为<span class="math inline">\(2^d\)</span>时,<code>a[i][j] = a[i - 2^d][j - 2^d] xor a[i - 2^d][j + 2^d]</code></p><p>这是为是什么呢... 我们先打一个小表...</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  a[i][j]</span><br><span class="line">= a[i - <span class="number">1</span>][j - <span class="number">1</span>] <span class="keyword">xor</span> a[i - <span class="number">1</span>][j + <span class="number">1</span>]</span><br><span class="line">= a[i - <span class="number">2</span>][j - <span class="number">2</span>] <span class="keyword">xor</span> a[i - <span class="number">2</span>][j] <span class="keyword">xor</span> a[i - <span class="number">2</span>][j] <span class="keyword">xor</span> a[i - <span class="number">2</span>][j + <span class="number">2</span>]</span><br><span class="line">= a[i - <span class="number">3</span>][j - <span class="number">3</span>] <span class="keyword">xor</span> a[i - <span class="number">3</span>][j - <span class="number">1</span>] <span class="keyword">xor</span> a[i - <span class="number">3</span>][j + <span class="number">1</span>] <span class="keyword">xor</span> a[i - <span class="number">3</span>][j + <span class="number">3</span>]</span><br><span class="line">= a[i - <span class="number">4</span>][j - <span class="number">4</span>] <span class="keyword">xor</span> a[i - <span class="number">4</span>][j - <span class="number">2</span>] <span class="keyword">xor</span> a[i - <span class="number">4</span>][j - <span class="number">2</span>] <span class="keyword">xor</span> a[i - <span class="number">4</span>][j] <span class="keyword">xor</span> a[i - <span class="number">4</span>][j] <span class="keyword">xor</span> a[i - <span class="number">3</span>][j + <span class="number">2</span>] <span class="keyword">xor</span> a[i - <span class="number">4</span>][j + <span class="number">2</span>] <span class="keyword">xor</span> a[i - <span class="number">4</span>][j + <span class="number">4</span>]</span><br><span class="line">= a[i - <span class="number">5</span>][j - <span class="number">5</span>] <span class="keyword">xor</span> a[i - <span class="number">5</span>][j - <span class="number">3</span>] <span class="keyword">xor</span> a[i - <span class="number">5</span>][j + <span class="number">3</span>] <span class="keyword">xor</span> a[i - <span class="number">5</span>][j + <span class="number">5</span>]</span><br><span class="line">= a[i - <span class="number">6</span>][j - <span class="number">6</span>] <span class="keyword">xor</span> a[i - <span class="number">6</span>][j - <span class="number">4</span>] <span class="keyword">xor</span> a[i]</span><br></pre></td></tr></table></figure><p>然后稍微画一下 其实是这个样子的</p><p><img src="/pictures/20180923A.png" /></p><p>我们仔细观察然后就能发现这个玩意每消掉一次之后就会需要同样的时间来消掉下一次...嗯...意会一下吧_(:з」∠)_</p><p>知道这玩意了以后就可以对<spanclass="math inline">\(T\)</span>二进制拆分了...注意是拆分不是分解...Emmmm...大体意思就是下一个1出现的时候基础是上一个1修改后的数组...</p><p>dls出的题果然思路清奇啊<code>/cy</code></p><h2 id="沙茶的-代码">沙茶的 代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (100000 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n, a[MAXN &lt;&lt; <span class="number">1</span>], ans[MAXN &lt;&lt; <span class="number">1</span>];</span><br><span class="line">LL t;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cal</span><span class="params">(LL x)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="keyword">return</span> ((x) % (n + <span class="number">1</span>) + n + <span class="number">1</span>) % (n + <span class="number">1</span>); &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%d&quot;</span>, &amp;t, &amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%1d&quot;</span>, &amp;a[i]);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">a[n + <span class="number">1</span> + i] = a[n - i + <span class="number">1</span>];</span><br><span class="line">n = (n &lt;&lt; <span class="number">1</span>) | <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">63</span>; i++)</span><br><span class="line"><span class="keyword">if</span> (t &amp; (<span class="number">1ll</span> &lt;&lt; i))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= n; j++)</span><br><span class="line">ans[j] = a[<span class="built_in">cal</span>(j - (<span class="number">1ll</span> &lt;&lt; i))] ^ a[<span class="built_in">cal</span>(j + (<span class="number">1ll</span> &lt;&lt; i))];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= n; j++)</span><br><span class="line">a[j] = ans[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= (n &gt;&gt; <span class="number">1</span>); i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, ans[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>By 联赛钦定爆零的 Cansult</p>]]></content>
      
      
      <categories>
          
          <category> 翻车笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 清奇脑回路 </tag>
            
            <tag> 二进制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>翻车笔记 ZROI338. [18 提高 4]碳 [清奇脑回路, 线段树, 前缀和]</title>
      <link href="/posts/45900.html"/>
      <url>/posts/45900.html</url>
      
        <content type="html"><![CDATA[<p>神仙做法</p><p>似乎搞<span class="math inline">\(+1,-1\)</span>的前缀和后缀和是常见的套路</p><span id="more"></span><h2 id="懵逼的-题目">懵逼的 题目</h2><p><a href="http://www.zhengruioi.com/problem/338">淦</a></p><h2 id="扯淡的-题解">扯淡的 题解</h2><p>这题很神仙 看YJQ大爷的题解完全看不懂Orz最后参(抄)悟(袭)了一波代码...</p><p>首先我们如果把序列中的<span class="math inline">\(0\)</span>变成<spanclass="math inline">\(1\)</span>, 然后再把序列中的<spanclass="math inline">\(1\)</span>变成<spanclass="math inline">\(-1\)</span>, 显然这个玩意就是要我们删掉一些数,让这个区间里的任意 前缀/后缀和 都要非负</p><p>所以我们就是要找一个最小的<span class="math inline">\(fro_i + suf_j(i &lt; j)\)</span>, 他的相反数就是要删掉的<spanclass="math inline">\(1\)</span>的个数</p><p>当时我就想不明白: 这个<span class="math inline">\(i,j\)</span>中间的那些部分怎么办啊...后来发现如果<spanclass="math inline">\(i\)</span>向后移动, <spanclass="math inline">\(j\)</span>向前移动不会让这个<spanclass="math inline">\(fro_i + suf_j\)</span>更小的话,说明中间这个部分一定是已经合法, 不必再删掉<spanclass="math inline">\(1\)</span>了...</p><p>真是个神仙做法</p><h2 id="沙茶的-代码">沙茶的 代码</h2><p>具体的实现我们可以发现这个区间的前缀和其实就是全局前缀和的这一个部分减去区间左端点的左边,后缀和同理, 于是我们可以直接找最小值, 然后再用这些值减出来输出答案</p><p>我现在也能抄题解一遍过了呢 <code>_(:з」∠)_</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (200000 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LS(dq) ((dq) &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RS(dq) (((dq) &lt;&lt; 1) | 1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF (0x7ffffff)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> le, ri, minfr, minsu, minz;</span><br><span class="line">&#125;b[MAXN &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> fr[MAXN], su[MAXN], n, ans, minpre, a[MAXN], q;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">js</span><span class="params">(<span class="type">int</span> dq, <span class="type">int</span> le, <span class="type">int</span> ri)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">b[dq].le = le, b[dq].ri = ri;</span><br><span class="line"><span class="keyword">if</span> (le == ri)</span><br><span class="line">&#123;</span><br><span class="line">b[dq].minfr = fr[le];</span><br><span class="line">b[dq].minsu = su[le];</span><br><span class="line">b[dq].minz = INF;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mi = (le + ri) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="built_in">js</span>(<span class="built_in">LS</span>(dq), le, mi);</span><br><span class="line"><span class="built_in">js</span>(<span class="built_in">RS</span>(dq), mi + <span class="number">1</span>, ri);</span><br><span class="line">b[dq].minfr = <span class="built_in">min</span>(b[<span class="built_in">LS</span>(dq)].minfr, b[<span class="built_in">RS</span>(dq)].minfr);</span><br><span class="line">b[dq].minsu = <span class="built_in">min</span>(b[<span class="built_in">LS</span>(dq)].minsu, b[<span class="built_in">RS</span>(dq)].minsu);</span><br><span class="line">b[dq].minz = <span class="built_in">min</span>(<span class="built_in">min</span>(b[<span class="built_in">LS</span>(dq)].minz, b[<span class="built_in">RS</span>(dq)].minz), b[<span class="built_in">RS</span>(dq)].minsu + b[<span class="built_in">LS</span>(dq)].minfr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">cx</span><span class="params">(<span class="type">int</span> dq, <span class="type">int</span> le, <span class="type">int</span> ri)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (b[dq].le == le &amp;&amp; b[dq].ri == ri)</span><br><span class="line">&#123;</span><br><span class="line">ans = <span class="built_in">min</span>(ans, b[dq].minz);</span><br><span class="line">ans = <span class="built_in">min</span>(ans, b[dq].minsu + minpre);</span><br><span class="line">minpre = <span class="built_in">min</span>(minpre, b[dq].minfr);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mi = (b[dq].le + b[dq].ri) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (ri &lt;= mi)</span><br><span class="line"><span class="built_in">cx</span>(<span class="built_in">LS</span>(dq), le, ri);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (le &gt; mi)</span><br><span class="line"><span class="built_in">cx</span>(<span class="built_in">RS</span>(dq), le, ri);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">cx</span>(<span class="built_in">LS</span>(dq), le, mi), <span class="built_in">cx</span>(<span class="built_in">RS</span>(dq), mi + <span class="number">1</span>, ri);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;q);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, srx; i &lt;= n; i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%1d&quot;</span>, &amp;srx), a[i + <span class="number">1</span>] = (srx ? <span class="number">-1</span> : <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n + <span class="number">1</span>; i++)</span><br><span class="line">fr[i] = fr[i - <span class="number">1</span>] + a[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = n + <span class="number">1</span>; i &gt; <span class="number">1</span>; i--)</span><br><span class="line">su[i] = su[i + <span class="number">1</span>] + a[i];</span><br><span class="line"><span class="built_in">js</span>(<span class="number">1</span>, <span class="number">1</span>, n + <span class="number">2</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, srl, srr; i &lt;= q; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;srl, &amp;srr);</span><br><span class="line">srr += <span class="number">2</span>;</span><br><span class="line">ans = minpre = INF;</span><br><span class="line"><span class="built_in">cx</span>(<span class="number">1</span>, srl, srr);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, fr[srl] + su[srr] - ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>By 联赛钦定爆零的 Cansult</p>]]></content>
      
      
      <categories>
          
          <category> 翻车笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
            <tag> 清奇脑回路 </tag>
            
            <tag> 前缀和 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>翻车笔记 ZROI336. [18 提高 4]的 [清奇脑回路, 二分, 并查集, 最小生成树]</title>
      <link href="/posts/55104.html"/>
      <url>/posts/55104.html</url>
      
        <content type="html"><![CDATA[<p>有点像最小割的感觉...</p><span id="more"></span><h2 id="懵逼的-题目">懵逼的 题目</h2><p><a href="http://www.zhengruioi.com/problem/337">淦</a></p><h2 id="扯淡的-题解">扯淡的 题解</h2><p>一开始想搞个对偶图最大生成树然后跑个LCA云云的做法...</p><p>题解有两种做法...</p><p>一个是二分可能的最大值, 把能"拦下"这个球的两个点之间连边,然后用并查集判断一下上下边界是否联通就行了</p><p>第二个是把所有的边都连边, 然后跑最小生成树, 当上下边界联通的时候,最后那条边的长度就是球的最大直径</p><h2 id="沙茶的-代码">沙茶的 代码</h2><p>注意<code>%f</code>会给你自动四舍五入...</p><h3 id="最小生成树">1 最小生成树</h3><p>一开始想先跑出树来然后跑LCA云云</p><p>后来参照<ahref="http://www.zhengruioi.com/submission/40082">吴清月</a>大爷的做法感觉肥肠简短Orz</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (500 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DD double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> s = <span class="number">0</span>, t = <span class="number">501</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edg</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> from, to;</span><br><span class="line">DD cost;</span><br><span class="line"><span class="built_in">edg</span>() &#123;&#125;</span><br><span class="line"><span class="built_in">edg</span>(<span class="type">int</span> a, <span class="type">int</span> b, DD c): <span class="built_in">from</span>(a), <span class="built_in">to</span>(b), <span class="built_in">cost</span>(c) &#123;&#125;</span><br><span class="line">&#125;b[MAXN * MAXN];</span><br><span class="line"><span class="type">int</span> fa[MAXN], n, cntb, l;</span><br><span class="line">pii a[MAXN];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="keyword">return</span> (fa[x] == x) ? x : (fa[x] = <span class="built_in">find</span>(fa[x])); &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">uni</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123; fa[<span class="built_in">find</span>(x)] = <span class="built_in">find</span>(y); &#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(edg x, edg y)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="keyword">return</span> x.cost &lt; y.cost; &#125;</span><br><span class="line"><span class="function">DD <span class="title">caldis</span><span class="params">(<span class="type">int</span> x0, <span class="type">int</span> y0, <span class="type">int</span> x1, <span class="type">int</span> y1)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="keyword">return</span> <span class="built_in">sqrt</span>((x0 - x1) * (x0 - x1) + (y0 - y1) * (y0 - y1)); &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">sort</span>(b + <span class="number">1</span>, b + cntb + <span class="number">1</span>, cmp);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = s; i &lt;= t; i++)fa[i] = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= cntb; i++)</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">find</span>(b[i].from) != <span class="built_in">find</span>(b[i].to))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">uni</span>(b[i].from, b[i].to);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">find</span>(s) == <span class="built_in">find</span>(t))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.3lf&quot;</span>, b[i].cost);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;l);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a[i].first, &amp;a[i].second);</span><br><span class="line">b[++cntb] = <span class="built_in">edg</span>(s, i, l - a[i].second);</span><br><span class="line">b[++cntb] = <span class="built_in">edg</span>(t, i, a[i].second);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; i; j++)</span><br><span class="line">b[++cntb] = <span class="built_in">edg</span>(i, j, <span class="built_in">caldis</span>(a[i].first, a[i].second, a[j].first, a[j].second));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//cout &lt;&lt; cntb &lt;&lt; endl;</span></span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二分">2 二分</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (500 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> eps (0.000001)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DD double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> s = <span class="number">0</span>, t = <span class="number">501</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> fa[MAXN], n, l;</span><br><span class="line">pii a[MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="keyword">for</span> (<span class="type">int</span> i = s; i &lt;= t; i++)fa[i] = i; &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="keyword">return</span> ((x == fa[x]) ? x : (fa[x] = <span class="built_in">find</span>(fa[x]))); &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">uni</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123; fa[<span class="built_in">find</span>(x)] = <span class="built_in">find</span>(y); &#125;</span><br><span class="line"><span class="function">DD <span class="title">caldis</span><span class="params">(<span class="type">int</span> x0, <span class="type">int</span> y0, <span class="type">int</span> x1, <span class="type">int</span> y1)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="keyword">return</span> <span class="built_in">sqrt</span>((x1 - x0) * (x1 - x0) + (y1 - y0) * (y1 - y0)); &#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">pd</span><span class="params">(DD x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">init</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line"><span class="keyword">if</span> (i != j &amp;&amp; <span class="built_in">caldis</span>(a[i].first, a[i].second, a[j].first, a[j].second) &lt; x + eps)</span><br><span class="line"><span class="built_in">uni</span>(i, j);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (l - a[i].second &lt;= x)</span><br><span class="line"><span class="built_in">uni</span>(s, i);</span><br><span class="line"><span class="keyword">if</span> (a[i].second &lt;= x)</span><br><span class="line"><span class="built_in">uni</span>(i, t);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> !(<span class="built_in">find</span>(s) == <span class="built_in">find</span>(t));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ef</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">DD le = <span class="number">0</span>, ri = <span class="number">100000</span>;</span><br><span class="line"><span class="keyword">while</span> (ri - le &gt;= eps)</span><br><span class="line">&#123;</span><br><span class="line">DD mi = (le + ri) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">pd</span>(mi))</span><br><span class="line">le = mi;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">ri = mi;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.3f&quot;</span>, le + <span class="number">0.0005</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;l);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a[i].first, &amp;a[i].second);</span><br><span class="line"><span class="built_in">ef</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>By 联赛钦定爆零的 Cansult</p>]]></content>
      
      
      <categories>
          
          <category> 翻车笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 清奇脑回路 </tag>
            
            <tag> 二分 </tag>
            
            <tag> 并查集 </tag>
            
            <tag> 最小生成树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>翻车笔记 ZROI336. [18 提高 4]天 [清奇脑回路, 翻车]</title>
      <link href="/posts/2254.html"/>
      <url>/posts/2254.html</url>
      
        <content type="html"><![CDATA[<ul><li><code>multiset</code>中间没有下划线</li><li><code>multiset.size()</code>返回的是值的种类数而非值的个数</li><li><code>multiset.erase(x)</code>删除的是这个大小为<code>x</code>的所有的值,想要删除一个可以<code>multiset.erase(multiset.find(x))</code></li></ul><span id="more"></span><h2 id="懵逼的-题目">懵逼的 题目</h2><p><a href="http://www.zhengruioi.com/problem/336">淦</a></p><h2 id="扯淡的-题解">扯淡的 题解</h2><p>DP很好想然而似乎和正解没什么关系</p><p>正解看上去就是一个可以反悔的贪心...</p><p>扫描的时候:</p><ul><li>用一个小根堆堆维护[当前还未买的点中最优的买入天] (注意,堆中的元素可以是某个要卖的天)</li><li>用一个<code>multiset</code>维护[当前最优的卖出天]</li><li>如果当前最优的买入天价格比这一天的价格还高,直接把这一天<code>push</code>进堆</li><li>否则把这一天<code>insert</code>到<code>multiset</code>, 更新答案<code>+= a[i] - q.top();</code><ul><li>如果堆顶的元素在<code>multiset</code>中出现过,说明堆顶的那一天相当于三点一线的中间那个点, 舍去可以获得更少的买卖次数,把这个点从<code>multiset</code>中删除</li><li>否则, 说明这个点从未被用过, 把这个点从堆中删除</li></ul></li><li>最后买卖的次数就是<code>multset</code>中<strong>个数</strong>的二倍</li></ul><h2 id="沙茶的-代码">沙茶的 代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (50000 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int LL </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">cmp</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">operator</span> <span class="params">()</span> <span class="params">(<span class="type">const</span> <span class="type">int</span> x, <span class="type">const</span> <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="keyword">return</span> x &gt; y; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> n, a[MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">priority_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;, cmp&gt; q;</span><br><span class="line">multiset&lt;<span class="type">int</span>&gt; sold;</span><br><span class="line">LL ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!q.<span class="built_in">empty</span>() &amp;&amp; q.<span class="built_in">top</span>() &lt; a[i])</span><br><span class="line">&#123;</span><br><span class="line">ans += a[i] - q.<span class="built_in">top</span>();</span><br><span class="line">sold.<span class="built_in">insert</span>(a[i]);</span><br><span class="line"><span class="keyword">if</span> (sold.<span class="built_in">find</span>(q.<span class="built_in">top</span>()) != sold.<span class="built_in">end</span>())</span><br><span class="line">sold.<span class="built_in">erase</span>(sold.<span class="built_in">find</span>(q.<span class="built_in">top</span>()));</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line">q.<span class="built_in">push</span>(a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> nans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (!sold.<span class="built_in">empty</span>())</span><br><span class="line">sold.<span class="built_in">erase</span>(sold.<span class="built_in">begin</span>()), ++nans;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld %lld\n&quot;</span>, ans, nans &lt;&lt; <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> int</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="meta">#<span class="keyword">define</span> int LL</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;wa.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="type">int</span> t;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;t);</span><br><span class="line"><span class="keyword">while</span> (t--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;a[i]);</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>By 联赛钦定爆零的 Cansult</p>]]></content>
      
      
      <categories>
          
          <category> 翻车笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 翻车 </tag>
            
            <tag> 清奇脑回路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>翻车笔记 ZROI330. [18 提高 3]矿石 [线段树分治(大雾), 清奇脑回路]</title>
      <link href="/posts/23651.html"/>
      <url>/posts/23651.html</url>
      
        <content type="html"><![CDATA[<p>脑子一抽想复杂了...</p><span id="more"></span><h2 id="懵逼的-题目">懵逼的 题目</h2><p><a href="http://www.zhengruioi.com/problem/330">...</a></p><h2 id="扯淡的-题解">扯淡的 题解</h2><p>我们记一个采矿点采到的矿总数<span class="math inline">\(A_i\)</span>,第一次被这个采矿点采到的矿总数为<spanclass="math inline">\(B_i\)</span></p><p>然后我们考虑这个采矿点对答案的贡献, 为<spanclass="math inline">\((2_{B_i} - 1) \cdot 2^{A_i - B_i}\)</span></p><p>因为每个之前已经选过的点如果要对答案再产生贡献的话都要和没选过一些点来配对...是不是很好理解?</p><p>比赛的时候写了个复杂度肥肠正确的<span class="math inline">\(n\lgn\)</span>的线段树分治来找的<span class="math inline">\(A_i,B_i\)</span></p><p>结果被卡常了(比赛的时候还写挂了)...</p><h2 id="沙茶的-代码">沙茶的 代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LS(dq) ((dq) &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RS(dq) (((dq) &lt;&lt; 1) | 1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF (0x7fffffff)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (100000 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXZ (300000 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Aufun (998244353)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> le, ri, zz;</span><br><span class="line">set&lt;<span class="type">int</span>&gt; hvntbeen;</span><br><span class="line">&#125; b[MAXZ &lt;&lt; <span class="number">3</span>];</span><br><span class="line"><span class="type">int</span> n, m, a[MAXN], sora[MAXZ];</span><br><span class="line">pii mine[MAXN];</span><br><span class="line">LL ans;</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; tosolve;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">js</span><span class="params">(<span class="type">int</span> dq, <span class="type">int</span> le, <span class="type">int</span> ri)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">b[dq].le = le, b[dq].ri = ri;</span><br><span class="line">b[dq].zz = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (le == ri)</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line"><span class="type">int</span> mi = (le + ri) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="built_in">js</span>(<span class="built_in">LS</span>(dq), le, mi);</span><br><span class="line"><span class="built_in">js</span>(<span class="built_in">RS</span>(dq), mi + <span class="number">1</span>, ri);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">xg1</span><span class="params">(<span class="type">int</span> dq, <span class="type">int</span> le, <span class="type">int</span> ri, <span class="type">int</span> zh)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (b[dq].le == le &amp;&amp; b[dq].ri == ri)</span><br><span class="line">&#123;</span><br><span class="line">b[dq].hvntbeen.<span class="built_in">insert</span>(zh);</span><br><span class="line">++b[dq].zz;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mi = (b[dq].le + b[dq].ri) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (le &gt; mi)</span><br><span class="line"><span class="built_in">xg1</span>(<span class="built_in">RS</span>(dq), le, ri, zh);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (ri &lt;= mi)</span><br><span class="line"><span class="built_in">xg1</span>(<span class="built_in">LS</span>(dq), le, ri, zh);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">xg1</span>(<span class="built_in">LS</span>(dq), le, mi, zh), <span class="built_in">xg1</span>(<span class="built_in">RS</span>(dq), mi + <span class="number">1</span>, ri, zh);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">xg2</span><span class="params">(<span class="type">int</span> dq, <span class="type">int</span> le, <span class="type">int</span> ri, <span class="type">int</span> zh)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (b[dq].le == le &amp;&amp; b[dq].ri == ri)</span><br><span class="line">&#123;</span><br><span class="line">b[dq].hvntbeen.<span class="built_in">erase</span>(zh);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mi = (b[dq].le + b[dq].ri) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (le &gt; mi)</span><br><span class="line"><span class="built_in">xg2</span>(<span class="built_in">RS</span>(dq), le, ri, zh);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (ri &lt;= mi)</span><br><span class="line"><span class="built_in">xg2</span>(<span class="built_in">LS</span>(dq), le, ri, zh);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">xg2</span>(<span class="built_in">LS</span>(dq), le, mi, zh), <span class="built_in">xg2</span>(<span class="built_in">RS</span>(dq), mi + <span class="number">1</span>, ri, zh);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">fp</span><span class="params">(<span class="type">int</span> bx)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!bx)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">LL re = <span class="built_in">fp</span>(bx &gt;&gt; <span class="number">1</span>);</span><br><span class="line">re = (re * re) % Aufun;</span><br><span class="line"><span class="keyword">if</span> (bx &amp; <span class="number">1</span>)</span><br><span class="line">re = (re &lt;&lt; <span class="number">1</span>) % Aufun;</span><br><span class="line"><span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">cx</span><span class="params">(<span class="type">int</span> dq, <span class="type">int</span> wz, <span class="type">int</span> zz, <span class="type">int</span> fz)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">fz += b[dq].hvntbeen.<span class="built_in">size</span>(), zz += b[dq].zz;</span><br><span class="line"><span class="keyword">for</span> (set&lt;<span class="type">int</span>&gt;::iterator i = b[dq].hvntbeen.<span class="built_in">begin</span>(); i != b[dq].hvntbeen.<span class="built_in">end</span>(); i++)</span><br><span class="line">tosolve.<span class="built_in">push</span>(*i);</span><br><span class="line"><span class="keyword">if</span> (b[dq].le == b[dq].ri)</span><br><span class="line">&#123;</span><br><span class="line">ans = (ans + (<span class="built_in">fp</span>(fz) - <span class="number">1</span>) * <span class="built_in">fp</span>(zz - fz)) % Aufun;</span><br><span class="line"><span class="keyword">while</span> (ans &lt; <span class="number">0</span>)</span><br><span class="line">ans += Aufun;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mi = (b[dq].le + b[dq].ri) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (wz &lt;= mi)</span><br><span class="line"><span class="built_in">cx</span>(<span class="built_in">LS</span>(dq), wz, zz, fz);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">cx</span>(<span class="built_in">RS</span>(dq), wz, zz, fz);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//freopen(&quot;in.in&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;mine[i].first, &amp;mine[i].second), sora[++sora[<span class="number">0</span>]] = mine[i].first, sora[++sora[<span class="number">0</span>]] = mine[i].second;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]), sora[++sora[<span class="number">0</span>]] = a[i];</span><br><span class="line"><span class="built_in">sort</span>(sora + <span class="number">1</span>, sora + sora[<span class="number">0</span>] + <span class="number">1</span>);</span><br><span class="line">sora[<span class="number">0</span>] = <span class="built_in">unique</span>(sora + <span class="number">1</span>, sora + sora[<span class="number">0</span>] + <span class="number">1</span>) - sora - <span class="number">1</span>;</span><br><span class="line"><span class="built_in">js</span>(<span class="number">1</span>, <span class="number">1</span>, sora[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line">mine[i].first = <span class="built_in">lower_bound</span>(sora + <span class="number">1</span>, sora + sora[<span class="number">0</span>] + <span class="number">1</span>, mine[i].first) - sora;</span><br><span class="line">mine[i].second = <span class="built_in">lower_bound</span>(sora + <span class="number">1</span>, sora + sora[<span class="number">0</span>] + <span class="number">1</span>, mine[i].second) - sora;</span><br><span class="line"><span class="built_in">xg1</span>(<span class="number">1</span>, mine[i].first, mine[i].second, i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(a + <span class="number">1</span>, a + m + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">&#123;</span><br><span class="line">a[i] = <span class="built_in">lower_bound</span>(sora + <span class="number">1</span>, sora + sora[<span class="number">0</span>] + <span class="number">1</span>, a[i]) - sora;</span><br><span class="line"><span class="built_in">cx</span>(<span class="number">1</span>, a[i], <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">while</span> (!tosolve.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> dq = tosolve.<span class="built_in">front</span>();</span><br><span class="line">tosolve.<span class="built_in">pop</span>();</span><br><span class="line"><span class="built_in">xg2</span>(<span class="number">1</span>, mine[dq].first, mine[dq].second, dq);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>, ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">3 2</span></span><br><span class="line"><span class="comment">7 11</span></span><br><span class="line"><span class="comment">1 5</span></span><br><span class="line"><span class="comment">3 8</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">7</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>By 联赛钦定爆零的 Cansult</p>]]></content>
      
      
      <categories>
          
          <category> 翻车笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 清奇脑回路 </tag>
            
            <tag> 线段树分治 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>翻车笔记 [Usaco2009 Jan]安全路经Travel [并查集, 最短路树, 清奇脑回路]</title>
      <link href="/posts/2897.html"/>
      <url>/posts/2897.html</url>
      
        <content type="html"><![CDATA[<p>这个世界是不是就我堆优化<spanclass="math inline">\(Dijkstra\)</span>忘了用优先队列了...</p><span id="more"></span><h2 id="懵逼的-题目">懵逼的 题目</h2><p><ahref="https://www.lydsy.com/JudgeOnline/problem.php?id=1576">...</a></p><h2 id="扯淡的-题解">扯淡的 题解</h2><p>感觉我好像对删边这种东西不是很会...<del>其实是啥都不会</del></p><p>先跑出最短路, 建出最短路树(就是每一个节点和更新他的节点连边),每个点到根的距离就是他到节点<spanclass="math inline">\(1\)</span>的最短路</p><p>然后就会有树边和非树边, 我们发现加入一条非树边后, 就能表示出<spanclass="math inline">\(ans_z = dis_x + dis_y +c_{x, y} | z \in\text{x到y的路径上除去LCA的点}\)</span></p><p>那我们怎么找这个要更新的<span class="math inline">\(c_{x,y}\)</span>呢, 我们又发现对于每一条路径能更新的点<spanclass="math inline">\(z\)</span>来说<spanclass="math inline">\(dis_z\)</span>是不会变的, 影响答案大小的只有<spanclass="math inline">\(dis_x + dis_y + c_{x, y}\)</span>,那我们只需要把所有的非树边都按照这个东西排序, 然后就可以从小到大更新了,第一次更新点<spanclass="math inline">\(z\)</span>的答案也一定是最有的答案</p><p>更新答案有两种方法, 树剖和并查集, 因为每个点只会更新一次,所以我们可以把更新过的点缩到LCA上, 然后更新的时候一步步往上爬就行了</p><figure><img src="../pictures/20190224E.png" alt="Orz" /><figcaption aria-hidden="true">Orz</figcaption></figure><h2 id="沙茶的-代码">沙茶的 代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**************************************************************</span></span><br><span class="line"><span class="comment">    Problem: 1576</span></span><br><span class="line"><span class="comment">    User: Cansult</span></span><br><span class="line"><span class="comment">    Language: C++</span></span><br><span class="line"><span class="comment">    Result: Accepted</span></span><br><span class="line"><span class="comment">    Time:1256 ms</span></span><br><span class="line"><span class="comment">    Memory:26528 kb</span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (100000 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXM (500000 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF (0x7ffffff)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edg</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> from, to, next, cost;</span><br><span class="line">&#125;b[MAXM &lt;&lt; <span class="number">1</span>], rb[MAXM];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">cmp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">operator</span> <span class="params">()</span> <span class="params">(<span class="type">const</span> pii x, <span class="type">const</span> pii y)</span></span></span><br><span class="line"><span class="function">    </span>&#123; <span class="keyword">return</span> x.second &gt; y.second; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> g[MAXN], cntb, n, m, pre[MAXN], dis[MAXN], deep[MAXN];</span><br><span class="line"><span class="type">bool</span> vis[MAXN];</span><br><span class="line">priority_queue&lt;pii, vector&lt;pii&gt;, cmp&gt; q;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">adn</span><span class="params">(<span class="type">int</span> from, <span class="type">int</span> to, <span class="type">int</span> cost)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    b[++cntb].next = g[from];</span><br><span class="line">    b[cntb].from = from, b[cntb].to = to, b[cntb].cost = cost;</span><br><span class="line">    g[from] = cntb;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dijk</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(vis, <span class="literal">false</span>, <span class="built_in">sizeof</span>(vis));</span><br><span class="line">    <span class="built_in">memset</span>(dis, <span class="number">0x7f</span>, <span class="built_in">sizeof</span>(dis));</span><br><span class="line">    q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(<span class="number">1</span>, dis[<span class="number">1</span>] = <span class="number">0</span>));</span><br><span class="line">    deep[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        pii dq = q.<span class="built_in">top</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (vis[dq.first])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        vis[dq.first] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = g[dq.first]; i; i = b[i].next)</span><br><span class="line">            <span class="keyword">if</span> (dis[b[i].to] &gt; dq.second + b[i].cost)</span><br><span class="line">            &#123;</span><br><span class="line">                dis[b[i].to] = dq.second + b[i].cost;</span><br><span class="line">                pre[b[i].to] = dq.first;</span><br><span class="line">                deep[b[i].to] = deep[dq.first] + <span class="number">1</span>;</span><br><span class="line">                q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(b[i].to, dis[b[i].to]));</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp1</span><span class="params">(edg x, edg y)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="keyword">return</span> x.cost &lt; y.cost; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(edg e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x = e.from, y = e.to;</span><br><span class="line">    <span class="keyword">while</span> (x != y)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (deep[x] &lt; deep[y])</span><br><span class="line">            <span class="built_in">swap</span>(x, y);</span><br><span class="line">        <span class="keyword">if</span> (!vis[x])</span><br><span class="line">            dis[x] = e.cost - dis[x];</span><br><span class="line">        vis[x] = <span class="literal">true</span>;</span><br><span class="line">        x = pre[x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (e.from != x)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> bf = e.from;</span><br><span class="line">        e.from = pre[e.from];</span><br><span class="line">        pre[bf] = x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (e.to != x)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> be = e.to;</span><br><span class="line">        e.to = pre[e.to];</span><br><span class="line">        pre[be] = x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;rb[i].from, &amp;rb[i].to, &amp;rb[i].cost);</span><br><span class="line">        <span class="built_in">adn</span>(rb[i].from, rb[i].to, rb[i].cost);</span><br><span class="line">        <span class="built_in">adn</span>(rb[i].to, rb[i].from, rb[i].cost);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dijk</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">        <span class="keyword">if</span> (dis[rb[i].from] &lt; INF)</span><br><span class="line">            rb[i].cost += dis[rb[i].from] + dis[rb[i].to];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            rb[i].cost = INF;</span><br><span class="line">    <span class="built_in">sort</span>(rb + <span class="number">1</span>, rb + m + <span class="number">1</span>, cmp1);</span><br><span class="line">    <span class="built_in">memset</span>(vis, <span class="literal">false</span>, <span class="built_in">sizeof</span>(vis));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">        <span class="keyword">if</span> (dis[rb[i].from] &lt; INF &amp;&amp; pre[rb[i].to] != rb[i].from &amp;&amp; pre[rb[i].from] != rb[i].to)</span><br><span class="line">            <span class="built_in">solve</span>(rb[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">if</span> (dis[i] &lt; INF &amp;&amp; vis[i])</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, dis[i]);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">4 5</span></span><br><span class="line"><span class="comment">1 2 2</span></span><br><span class="line"><span class="comment">1 3 2</span></span><br><span class="line"><span class="comment">3 4 4</span></span><br><span class="line"><span class="comment">3 2 1</span></span><br><span class="line"><span class="comment">2 4 3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>By 药丸的 Cansult</p>]]></content>
      
      
      <categories>
          
          <category> 翻车笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 清奇脑回路 </tag>
            
            <tag> 并查集 </tag>
            
            <tag> 最短路树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>翻车笔记 [JOI2014]水壶 [清奇脑回路, BFS, LCA]</title>
      <link href="/posts/49396.html"/>
      <url>/posts/49396.html</url>
      
        <content type="html"><![CDATA[<p>思路错了就换一个呗</p><span id="more"></span><h3 id="懵逼的-题目">懵逼的 题目</h3><p><ahref="https://www.lydsy.com/JudgeOnline/problem.php?id=4242">BZOJ</a></p><h3 id="扯淡的-题解">扯淡的 题解</h3><p>显然是找瓶颈路 要搞最小生成树</p><p>但是我们不可能给所有点连边...那么怎么找最小生成树呢...</p><p>一开始想的是从一个点开始bfs, 然后遇到城市就向上一个城市连边并且更新"上一个城市"</p><p>后来发现一个格子要被更新多次, 复杂度有点爆炸</p><p>gayge表示我太菜了, 然后告诉我要从所有的点开始同时bfs,两个城市相遇了就加边, 然后kruskal一波...</p><p>Orz</p><h3 id="沙茶的-代码">沙茶的 代码</h3><p>被卡常了...懒得改了...</p><p>一直都是多了<span class="math inline">\(0.6s\)</span>的样子</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mkp(a, b) make_pair(a, b)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DD double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rint register int </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (4000000 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXC (200000 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXL (20)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF (0x7ffffff)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> xy[<span class="number">4</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">-1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">0</span>, <span class="number">-1</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edg</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> from, to, cost, next;</span><br><span class="line"><span class="built_in">edg</span>() &#123;&#125;</span><br><span class="line"><span class="built_in">edg</span>(<span class="type">int</span> f, <span class="type">int</span> t, <span class="type">int</span> c): <span class="built_in">from</span>(f), <span class="built_in">to</span>(t), <span class="built_in">cost</span>(c) &#123;&#125;</span><br><span class="line">&#125; b[MAXC &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> g[MAXC], cntb, n, h, w, vis[MAXN], col[MAXN], city[MAXC], fa[MAXC], size[MAXN], dis[MAXN];</span><br><span class="line"><span class="type">int</span> d[MAXC][MAXL], maxc[MAXC][MAXL], lgn, deep[MAXC], nc;</span><br><span class="line">vector&lt;edg&gt; rb[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">pti</span><span class="params">(<span class="type">const</span> pii x)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="keyword">return</span> (x.first - <span class="number">1</span>) * w + x.second; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> pii <span class="title">itp</span><span class="params">(<span class="type">const</span> <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="keyword">return</span> <span class="built_in">mkp</span>(<span class="built_in">ceil</span>((DD)x / w), x - <span class="built_in">ceil</span>((DD)x / w) * w + w); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">max</span><span class="params">(<span class="type">const</span> <span class="type">int</span> x, <span class="type">const</span> <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="keyword">return</span> x &gt; y ? x : y; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">min</span><span class="params">(<span class="type">const</span> <span class="type">int</span> x, <span class="type">const</span> <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="keyword">return</span> x &lt; y ? x : y; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">adn</span><span class="params">(<span class="type">const</span> <span class="type">int</span> from, <span class="type">const</span> <span class="type">int</span> to, <span class="type">const</span> <span class="type">int</span> cost)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">b[++cntb].next = g[from];</span><br><span class="line">b[cntb].from = from, b[cntb].to = to, b[cntb].cost = cost;</span><br><span class="line">g[from] = cntb;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">pd</span><span class="params">(<span class="type">const</span> pii x)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="keyword">return</span> (x.first &lt;= h &amp;&amp; x.first &gt;= <span class="number">1</span> &amp;&amp; x.second &lt;= w &amp;&amp; x.second &gt;= <span class="number">1</span> &amp;&amp; vis[<span class="built_in">pti</span>(x)] &gt;= <span class="number">0</span>); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">const</span> <span class="type">int</span> s, <span class="type">const</span> <span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">q.<span class="built_in">push</span>(s);</span><br><span class="line">col[s] = c;</span><br><span class="line"><span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> dq = q.<span class="built_in">front</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">if</span> (vis[dq] &gt; <span class="number">0</span>)</span><br><span class="line">++size[c];</span><br><span class="line"><span class="keyword">for</span> (rint i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">pii ndq = <span class="built_in">itp</span>(dq);</span><br><span class="line">ndq.first += xy[i][<span class="number">0</span>], ndq.second += xy[i][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">pd</span>(ndq))</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (!col[<span class="built_in">pti</span>(ndq)])</span><br><span class="line">col[<span class="built_in">pti</span>(ndq)] = c, q.<span class="built_in">push</span>(<span class="built_in">pti</span>(ndq));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="keyword">for</span> (rint i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">q.<span class="built_in">push</span>(city[i]);</span><br><span class="line"><span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> dq = q.<span class="built_in">front</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">for</span> (rint i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">pii ndq = <span class="built_in">itp</span>(dq);</span><br><span class="line">ndq.first += xy[i][<span class="number">0</span>], ndq.second += xy[i][<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> idq = <span class="built_in">pti</span>(ndq);</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">pd</span>(ndq) || vis[idq] == vis[dq])</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (vis[idq])</span><br><span class="line">rb[col[dq]].<span class="built_in">push_back</span>(<span class="built_in">edg</span>(vis[dq], vis[idq], dis[idq] + dis[dq]));</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">vis[idq] = vis[dq];</span><br><span class="line">dis[idq] = dis[dq] + <span class="number">1</span>;</span><br><span class="line">q.<span class="built_in">push</span>(idq);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">const</span> <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="keyword">return</span> (x == fa[x] ? x : (fa[x] = <span class="built_in">find</span>(fa[x]))); &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">uni</span><span class="params">(<span class="type">const</span> <span class="type">int</span> x, <span class="type">const</span> <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123; fa[<span class="built_in">find</span>(x)] = <span class="built_in">find</span>(y); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">const</span> edg x, <span class="type">const</span> edg y)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="keyword">return</span> x.cost &lt; y.cost; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">kruskal</span><span class="params">(<span class="type">const</span> <span class="type">int</span> dqc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">sort</span>(rb[dqc].<span class="built_in">begin</span>(), rb[dqc].<span class="built_in">end</span>(), cmp);</span><br><span class="line"><span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (rint i = <span class="number">0</span>, u, v; i &lt; rb[dqc].<span class="built_in">size</span>(); i++)</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">find</span>(u = rb[dqc][i].from) != <span class="built_in">find</span>(v = rb[dqc][i].to))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">uni</span>(u, v);</span><br><span class="line"><span class="built_in">adn</span>(u, v, rb[dqc][i].cost);</span><br><span class="line"><span class="built_in">adn</span>(v, u, rb[dqc][i].cost);</span><br><span class="line">++cnt;</span><br><span class="line"><span class="keyword">if</span> (cnt == size[dqc] - <span class="number">1</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> dq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (rint i = <span class="number">1</span>; i &lt;= lgn; i++)</span><br><span class="line">&#123;</span><br><span class="line">d[dq][i] = d[d[dq][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line">maxc[dq][i] = <span class="built_in">max</span>(maxc[dq][i - <span class="number">1</span>], maxc[d[dq][i - <span class="number">1</span>]][i - <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (rint i = g[dq]; i; i = b[i].next)</span><br><span class="line"><span class="keyword">if</span> (d[dq][<span class="number">0</span>] != b[i].to)</span><br><span class="line">&#123;</span><br><span class="line">d[b[i].to][<span class="number">0</span>] = dq;</span><br><span class="line">maxc[b[i].to][<span class="number">0</span>] = b[i].cost;</span><br><span class="line">deep[b[i].to] = deep[dq] + <span class="number">1</span>;</span><br><span class="line"><span class="built_in">dfs</span>(b[i].to);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> re = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (deep[y] &gt; deep[x])</span><br><span class="line"><span class="built_in">swap</span>(x, y);</span><br><span class="line"><span class="keyword">for</span> (rint i = lgn; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line"><span class="keyword">if</span> (deep[d[x][i]] &gt;= deep[y])</span><br><span class="line">re = <span class="built_in">max</span>(re, maxc[x][i]), x = d[x][i];</span><br><span class="line"><span class="keyword">if</span> (x == y)</span><br><span class="line"><span class="keyword">return</span> re;</span><br><span class="line"><span class="keyword">for</span> (rint i = lgn; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line"><span class="keyword">if</span> (d[x][i] != d[y][i])</span><br><span class="line">re = <span class="built_in">max</span>(re, <span class="built_in">max</span>(maxc[x][i], maxc[y][i])), x = d[x][i], y = d[y][i];</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">max</span>(re, <span class="built_in">max</span>(maxc[x][<span class="number">0</span>], maxc[y][<span class="number">0</span>]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lg</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> re = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> ((<span class="number">1</span> &lt;&lt; re) &lt; x)</span><br><span class="line">++re;</span><br><span class="line"><span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> q;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>, &amp;h, &amp;w, &amp;n, &amp;q);</span><br><span class="line">lgn = <span class="built_in">lg</span>(n);</span><br><span class="line"><span class="keyword">for</span> (rint i = <span class="number">1</span>; i &lt;= h; i++)</span><br><span class="line"><span class="keyword">for</span> (rint j = <span class="number">1</span>; j &lt;= w; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (x != <span class="string">&#x27;.&#x27;</span> &amp;&amp; x != <span class="string">&#x27;#&#x27;</span>)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;x);</span><br><span class="line"><span class="keyword">if</span> (x == <span class="string">&#x27;.&#x27;</span>)vis[<span class="built_in">pti</span>(<span class="built_in">mkp</span>(i, j))] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> vis[<span class="built_in">pti</span>(<span class="built_in">mkp</span>(i, j))] = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (rint i = <span class="number">1</span>, srx, sry; i &lt;= n; i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;srx, &amp;sry), vis[city[i] = <span class="built_in">pti</span>(<span class="built_in">mkp</span>(srx, sry))] = i; </span><br><span class="line"><span class="keyword">for</span> (rint i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="keyword">if</span> (!col[city[i]])</span><br><span class="line"><span class="built_in">init</span>(city[i], ++nc);</span><br><span class="line"><span class="built_in">bfs</span>();</span><br><span class="line"><span class="keyword">for</span> (rint i = <span class="number">1</span>; i &lt;= n; i++)fa[i] = i;</span><br><span class="line"><span class="keyword">for</span> (rint i = <span class="number">1</span>; i &lt;= nc; i++)</span><br><span class="line"><span class="built_in">kruskal</span>(i);</span><br><span class="line"><span class="keyword">for</span> (rint i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="keyword">if</span> (!d[i][<span class="number">0</span>])</span><br><span class="line">d[i][<span class="number">0</span>] = i, deep[i] = <span class="number">1</span>, <span class="built_in">dfs</span>(i);</span><br><span class="line"><span class="keyword">for</span> (rint i = <span class="number">1</span>, srx, sry; i &lt;= q; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;srx, &amp;sry);</span><br><span class="line"><span class="keyword">if</span> (col[city[srx]] != col[city[sry]])</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">solve</span>(srx, sry));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>By 沙茶 Cansult</p>]]></content>
      
      
      <categories>
          
          <category> 翻车笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 清奇脑回路 </tag>
            
            <tag> BFS </tag>
            
            <tag> LCA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>翻车笔记 Sumdiv [翻车, 清奇脑回路, 数学, 分治]</title>
      <link href="/posts/15332.html"/>
      <url>/posts/15332.html</url>
      
        <content type="html"><![CDATA[<p>颓了一个暑假我终于腆着脸回来更博客了</p><p>带模的减法一定要加上模数再取一遍模...</p><span id="more"></span><h3 id="懵逼的-题目">懵逼的 题目</h3><p><a href="http://poj.org/problem?id=1845">传送至poj</a></p><h3 id="扯淡的-题解">扯淡的 题解</h3><p>我们惊奇的发现 <spanclass="math inline">\(A^B\)</span>的约数和就是</p><p><span class="math display">\[(p_1^0 + p_1^1 + \cdots + p_1^{k_1\cdot B}) \cdot (p_2^0 + p_2^1 +\cdots +p_2^{k_2\cdot B}) \cdot (p_3^0 + p_3^1 + \cdots + p_3 ^{k_3\cdot B}) \cdot (\cdots)\]</span> 的展开, 是不是很神奇?</p><p>那么我们只需要对每一个<span class="math inline">\(p\)</span>求出<spanclass="math inline">\((p^0 + p^1 + \cdots + p^{k \cdotB})\)</span>就可以了</p><p>我们又发现, 这个式子其实就是个等比数列求和, 直接套分治板子就行了</p><p>然后就因为带模减法减成负数调了一下午... = =</p><h3 id="沙茶的-代码">沙茶的 代码</h3><p>调了好久...肥肠的丑...</p><p>对了 千万别忘了是多组数据....</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF (50000000 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (4000000 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Aufun (9901)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">LL a;</span><br><span class="line"><span class="type">int</span> b;</span><br><span class="line"><span class="function">LL <span class="title">fp</span><span class="params">(LL pa, <span class="type">int</span> pb)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (pb == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">LL re = <span class="built_in">fp</span>(pa, pb &gt;&gt; <span class="number">1</span>);</span><br><span class="line">re = (re * re) % Aufun;</span><br><span class="line"><span class="keyword">if</span> (pb &amp; <span class="number">1</span>)</span><br><span class="line">re = (re * pa) % Aufun;</span><br><span class="line"><span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">sum</span><span class="params">(LL p, <span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (c == <span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> (p + <span class="number">1</span>) % Aufun;</span><br><span class="line"><span class="keyword">if</span> (c == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">LL re = <span class="built_in">sum</span>(p, c &gt;&gt; <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (c &amp; <span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> (re * (<span class="number">1ll</span> + <span class="built_in">fp</span>(p, (c + <span class="number">1</span>) &gt;&gt; <span class="number">1ll</span>))) % Aufun;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">return</span> (re * (<span class="number">1ll</span> + <span class="built_in">fp</span>(p, (c &gt;&gt; <span class="number">1</span>) + <span class="number">1</span>)) - <span class="built_in">fp</span>(p, c + <span class="number">1</span>) + Aufun) % Aufun; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;WA.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%lld%d&quot;</span>, &amp;a, &amp;b) == <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">LL ans = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= <span class="built_in">sqrt</span>((<span class="type">double</span>)a) + <span class="number">1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> dq = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (a % i == <span class="number">0</span>)</span><br><span class="line">a /= i, ++dq;</span><br><span class="line">ans = (ans * <span class="built_in">sum</span>((LL)i, dq * b)) % Aufun;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (a &gt; <span class="number">1</span>)</span><br><span class="line">ans = (ans * <span class="built_in">sum</span>(a, b)) % Aufun;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>By 粉Bandit的彩虹六号萌新 Cansult</p><p><del>Bandit抬头看我的样子真的好帅啊嘤嘤嘤</del></p>]]></content>
      
      
      <categories>
          
          <category> 翻车笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 翻车 </tag>
            
            <tag> 清奇脑回路 </tag>
            
            <tag> 分治 </tag>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>翻车笔记 [LNOI2014]LCA [树链剖分, 清奇脑回路, 翻车, 前缀和]</title>
      <link href="/posts/45279.html"/>
      <url>/posts/45279.html</url>
      
        <content type="html"><![CDATA[<p>前缀和 + 扫描会给人惊喜</p><p>看上去更麻烦的做法却通向了正解</p><span id="more"></span><h2 id="懵逼的-题目">懵逼的 题目</h2><p><ahref="https://www.lydsy.com/JudgeOnline/problem.php?id=3626">神题Orz</a></p><h2 id="扯淡的-题解">扯淡的 题解</h2><p>省(旅)队(游)集(C)训(S)回来之后感觉做题状态肥肠不得劲,加之又发现班没了...掏出之前的坑打算填一下...结果...</p><p>这题好神啊Orzzz</p><p>抄题解.jpg</p><p>(以下编号均从<span class="math inline">\(1\)</span>开始)</p><p>我们考虑一组询问的时候, 查询<span class="math inline">\(\sum_{i\in[le, ri]} deep(LCA(z, i))\)</span>, 我们发现这个<spanclass="math inline">\(LCA\)</span>很碍事, 于是可以把所有的<spanclass="math inline">\(i\in [le, ri]\)</span>到根的路径都加一,然后查询<span class="math inline">\(z\)</span>到根的区间和,就是答案了</p><p>看上去多此一举, 但是我们发现, 这个玩意是满足前缀和的性质的, 也就是说<span class="math display">\[\sum _{i\in [le, ri]} deep(LCA(z, i)) = \sum_{i\in [0, ri]}deep(LCA(z,i)) - \sum_{i \in [0, le - 1]} deep(LCA(z, i))\]</span> 这样我们考虑多组询问的时候, 可以离线所有的<spanclass="math inline">\(z\)</span>, 然后从<spanclass="math inline">\(1\)</span>到<spanclass="math inline">\(n\)</span>扫描, 计算出每一个询问的两个端点上,​<span class="math inline">\(z\)</span>到根的区间和,然后作差就是这个询问的答案了</p><p>是不是很妙?</p><h2 id="沙茶的-代码">沙茶的 代码</h2><p>注意在进行有取膜的前缀和或差分运算的时候判断负数的情况(我会告诉你我因为这个调了一天?)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**************************************************************</span></span><br><span class="line"><span class="comment">    Problem: 3626</span></span><br><span class="line"><span class="comment">    User: Cansult</span></span><br><span class="line"><span class="comment">    Language: C++</span></span><br><span class="line"><span class="comment">    Result: Accepted</span></span><br><span class="line"><span class="comment">    Time:1592 ms</span></span><br><span class="line"><span class="comment">    Memory:10192 kb</span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (50000 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LS(dq) ((dq) &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RS(dq) (((dq) &lt;&lt; 1) | 1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Gary (201314)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> root = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> zh, le, ri, lazy;</span><br><span class="line">&#125;b[MAXN &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">tnode</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> fa, deep, begin, end, size, hs, top;</span><br><span class="line">&#125;ta[MAXN];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">tedg</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> from, to, next;</span><br><span class="line">&#125;tb[MAXN &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> tg[MAXN], cntb, cnta, ans[MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">adn</span><span class="params">(<span class="type">int</span> from, <span class="type">int</span> to)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tb[++cntb].next = tg[from];</span><br><span class="line">    tb[cntb].from = from, tb[cntb].to = to;</span><br><span class="line">    tg[from] = cntb;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> dq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ta[dq].size = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = tg[dq]; i; i = tb[i].next)</span><br><span class="line">        <span class="keyword">if</span> (tb[i].to != ta[dq].fa)</span><br><span class="line">        &#123;</span><br><span class="line">            ta[tb[i].to].fa = dq;</span><br><span class="line">            ta[tb[i].to].deep = ta[dq].deep + <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">init</span>(tb[i].to);</span><br><span class="line">            ta[dq].size += ta[tb[i].to].size;</span><br><span class="line">            <span class="keyword">if</span> (ta[tb[i].to].size &gt; ta[ta[dq].hs].size)</span><br><span class="line">                ta[dq].hs = tb[i].to;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> dq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ta[dq].begin = ++cnta;</span><br><span class="line">    <span class="keyword">if</span> (ta[dq].hs)</span><br><span class="line">        ta[ta[dq].hs].top = ta[dq].top, <span class="built_in">dfs</span>(ta[dq].hs);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = tg[dq]; i; i = tb[i].next)</span><br><span class="line">        <span class="keyword">if</span> (tb[i].to != ta[dq].fa &amp;&amp; tb[i].to != ta[dq].hs)</span><br><span class="line">            ta[tb[i].to].top = tb[i].to, <span class="built_in">dfs</span>(tb[i].to);</span><br><span class="line">    ta[dq].end = cnta;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">js</span><span class="params">(<span class="type">int</span> dq, <span class="type">int</span> le, <span class="type">int</span> ri)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    b[dq].le = le, b[dq].ri = ri;</span><br><span class="line">    b[dq].lazy = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (le == ri)</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    <span class="type">int</span> mi = (le + ri) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">js</span>(<span class="built_in">LS</span>(dq), le, mi);</span><br><span class="line">    <span class="built_in">js</span>(<span class="built_in">RS</span>(dq), mi + <span class="number">1</span>, ri);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">xg</span><span class="params">(<span class="type">int</span> dq, <span class="type">int</span> le, <span class="type">int</span> ri, <span class="type">int</span> zh)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    b[dq].zh = (b[dq].zh + (ri - le + <span class="number">1</span>) * zh) % Gary; </span><br><span class="line">    <span class="keyword">if</span> (b[dq].le == le &amp;&amp; b[dq].ri == ri)</span><br><span class="line">    &#123;</span><br><span class="line">        b[dq].lazy += zh;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mi = (b[dq].le + b[dq].ri) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (le &gt; mi)</span><br><span class="line">        <span class="built_in">xg</span>(<span class="built_in">RS</span>(dq), le, ri, zh);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (ri &lt;= mi)</span><br><span class="line">        <span class="built_in">xg</span>(<span class="built_in">LS</span>(dq), le, ri, zh);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">xg</span>(<span class="built_in">LS</span>(dq), le, mi, zh), <span class="built_in">xg</span>(<span class="built_in">RS</span>(dq), mi + <span class="number">1</span>, ri, zh);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cx</span><span class="params">(<span class="type">int</span> dq, <span class="type">int</span> le, <span class="type">int</span> ri)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (b[dq].le == le &amp;&amp; b[dq].ri == ri)</span><br><span class="line">        <span class="keyword">return</span> b[dq].zh;</span><br><span class="line">    <span class="type">int</span> mi = (b[dq].le + b[dq].ri) &gt;&gt; <span class="number">1</span>, re = b[dq].lazy * (ri - le + <span class="number">1</span>) % Gary;</span><br><span class="line">    <span class="keyword">if</span> (le &gt; mi)</span><br><span class="line">        re = (re + <span class="built_in">cx</span>(<span class="built_in">RS</span>(dq), le, ri)) % Gary;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (ri &lt;= mi)</span><br><span class="line">        re = (re + <span class="built_in">cx</span>(<span class="built_in">LS</span>(dq), le, ri)) % Gary;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        re = (re + <span class="built_in">cx</span>(<span class="built_in">LS</span>(dq), le, mi) + <span class="built_in">cx</span>(<span class="built_in">RS</span>(dq), mi + <span class="number">1</span>, ri)) % Gary;</span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">txg</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (ta[x].top != root)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">xg</span>(root, ta[ta[x].top].begin, ta[x].begin, <span class="number">1</span>);</span><br><span class="line">        x = ta[ta[x].top].fa;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">xg</span>(root, ta[root].begin, ta[x].begin, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">tcx</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> re = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (ta[x].top != root)</span><br><span class="line">    &#123;</span><br><span class="line">        re = (re + <span class="built_in">cx</span>(root, ta[ta[x].top].begin, ta[x].begin)) % Gary;</span><br><span class="line">        x = ta[ta[x].top].fa;</span><br><span class="line">    &#125;</span><br><span class="line">    re = (re + <span class="built_in">cx</span>(root, ta[root].begin, ta[x].begin)) % Gary;</span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, q;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; nwz[MAXN], bh[MAXN];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;q);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>, srx; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;srx);</span><br><span class="line">        ++srx;</span><br><span class="line">        <span class="built_in">adn</span>(srx, i), <span class="built_in">adn</span>(i, srx);</span><br><span class="line">    &#125;</span><br><span class="line">    ta[root].fa = root, ta[root].deep = <span class="number">1</span>, ta[root].top = root;</span><br><span class="line">    <span class="built_in">init</span>(root), <span class="built_in">dfs</span>(root);</span><br><span class="line">    <span class="built_in">js</span>(root, <span class="number">1</span>, n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, srx, sry, srz; i &lt;= q; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;srx, &amp;sry, &amp;srz), nwz[srx].<span class="built_in">push_back</span>(-srz - <span class="number">1</span>), nwz[sry + <span class="number">1</span>].<span class="built_in">push_back</span>(srz + <span class="number">1</span>), bh[srx].<span class="built_in">push_back</span>(i), bh[sry + <span class="number">1</span>].<span class="built_in">push_back</span>(i);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">txg</span>(i);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; nwz[i].<span class="built_in">size</span>(); j++)</span><br><span class="line">            <span class="keyword">if</span> (nwz[i][j] &gt; <span class="number">0</span>)</span><br><span class="line">                ans[bh[i][j]] += <span class="built_in">tcx</span>(nwz[i][j]);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                ans[bh[i][j]] = -<span class="built_in">tcx</span>(-nwz[i][j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= q; i++) <span class="comment">// 注意负数</span></span><br><span class="line">        <span class="keyword">while</span> (ans[i] &lt; <span class="number">0</span>)</span><br><span class="line">            ans[i] = (ans[i] + Gary) % Gary;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= q; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans[i] % Gary);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>By 沙茶 Cansult</p>]]></content>
      
      
      <categories>
          
          <category> 翻车笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 翻车 </tag>
            
            <tag> 清奇脑回路 </tag>
            
            <tag> 树链剖分 </tag>
            
            <tag> 前缀和 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>翻车笔记 Rivendell 学长的线段树杂题 [线段树, 清奇脑回路]</title>
      <link href="/posts/49219.html"/>
      <url>/posts/49219.html</url>
      
        <content type="html"><![CDATA[<p>寒假的时候讲的 现在才开始补...惭愧啊</p><span id="more"></span><h3 id="bzoj-3333-排队计划"><ahref="https://www.lydsy.com/JudgeOnline/problem.php?id=3333">BZOJ 3333:排队计划</a></h3><p>我们发现, 你抽出后面的数排序后,<strong>[取出来的数之间]就没有逆序对了</strong></p><p>然后我们又发现, 因为没取出来的都比取出来的数要大, 所以实际上原来[取出来和没取出的数之间] 构成逆序对的地方现在还是逆序对,之前后面比前面小的地方, 现在后面还是比前面小;也就是<strong>[取出来的数和没取出来的数之间]的逆序对数量不变</strong></p><p>我们考虑用树状数组找逆序对的过程:找后面所有比他小的数的个数(或者前面比他大的数, 无所谓)的和</p><p>我们发现, 如果这个数被取出来了,他后面就没有比他小的数了(排序后取出来的数比他大的一定在他后面,没取出来的数比<span class="math inline">\(a_p\)</span>都大,肯定比取出来的所有数大)</p><p>我们计一个数<spanclass="math inline">\(i\)</span>后面比他小的数的个数为<spanclass="math inline">\(nxd_i\)</span></p><p>那么我们只需要在他选出来的<span class="math inline">\(p\)</span>后面,取出所有比他小的数<span class="math inline">\(i\)</span>,然后在答案里减去<span class="math inline">\(nxd_i\)</span>就行了</p><p>具体实现的话, 为了去重我们要把已经取出来的数都设为<spanclass="math inline">\(\infty\)</span>,防止被多次取出(因为已经排过序了)</p><p>所以代码的实现就是:</p><ul><li>初始答案为整个序列的逆序对个数<spanclass="math inline">\(ans\)</span></li><li>不断的在<span class="math inline">\(p\)</span>的后面找比<spanclass="math inline">\(p\)</span>小的数<spanclass="math inline">\(i\)</span>(用线段树), 把<spanclass="math inline">\(i\)</span>设成<spanclass="math inline">\(\infty\)</span>, <span class="math inline">\(ans =ans - nxd_i\)</span>, 直到<spanclass="math inline">\(p\)</span>后面的数都比<spanclass="math inline">\(a_p\)</span>大, 输出<spanclass="math inline">\(ans\)</span></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**************************************************************</span></span><br><span class="line"><span class="comment">    Problem: 3333</span></span><br><span class="line"><span class="comment">    User: Cansult</span></span><br><span class="line"><span class="comment">    Language: C++</span></span><br><span class="line"><span class="comment">    Result: Accepted</span></span><br><span class="line"><span class="comment">    Time:8792 ms</span></span><br><span class="line"><span class="comment">    Memory:42236 kb</span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (500000 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXM (500000 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF (0x7fffffff)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(i) ((i) &amp; (-(i)))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LS(dq) ((dq) &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RS(dq) (((dq) &lt;&lt; 1) | 1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> le, ri, minz, minwz;</span><br><span class="line">&#125;b[MAXN &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">bitnode</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> b[MAXN], n;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">xg</span><span class="params">(<span class="type">int</span> wz)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = wz; i &lt;= n; i += <span class="built_in">lowbit</span>(i))</span><br><span class="line">            ++b[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">cx</span><span class="params">(<span class="type">int</span> le, <span class="type">int</span> ri)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> re = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = ri; i; i -= <span class="built_in">lowbit</span>(i))</span><br><span class="line">            re += b[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = le - <span class="number">1</span>; i; i -= <span class="built_in">lowbit</span>(i))</span><br><span class="line">            re -= b[i];</span><br><span class="line">        <span class="keyword">return</span> re;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span>* a, <span class="type">int</span> xn, LL* ans)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        n = xn;</span><br><span class="line">        <span class="type">int</span> sora[MAXN];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            sora[i] = a[i];</span><br><span class="line">        <span class="built_in">sort</span>(sora + <span class="number">1</span>, sora + n + <span class="number">1</span>);</span><br><span class="line">        sora[<span class="number">0</span>] = <span class="built_in">unique</span>(sora + <span class="number">1</span>, sora + n + <span class="number">1</span>) - sora - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            a[i] = <span class="built_in">lower_bound</span>(sora + <span class="number">1</span>, sora + sora[<span class="number">0</span>] + <span class="number">1</span>, a[i]) - sora;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">            ans[i] = <span class="built_in">cx</span>(<span class="number">1</span>, a[i] - <span class="number">1</span>), <span class="built_in">xg</span>(a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> n, m, a[MAXN];</span><br><span class="line">LL xd[MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    bitnode qwq;</span><br><span class="line">    qwq.<span class="built_in">init</span>(a, n, xd);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">node <span class="title">push_up</span><span class="params">(node ls, node rs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    node re;</span><br><span class="line">    re.le = ls.le, re.ri = rs.ri;</span><br><span class="line">    <span class="keyword">if</span> (ls.minz &lt; rs.minz)</span><br><span class="line">        re.minz = ls.minz, re.minwz = ls.minwz;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        re.minz = rs.minz, re.minwz = rs.minwz;</span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">js</span><span class="params">(<span class="type">int</span> dq, <span class="type">int</span> le, <span class="type">int</span> ri)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (le == ri)</span><br><span class="line">    &#123;</span><br><span class="line">        b[dq].le = le, b[dq].ri = ri;</span><br><span class="line">        b[dq].minz = a[le];</span><br><span class="line">        b[dq].minwz = le;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mi = (le + ri) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">js</span>(<span class="built_in">LS</span>(dq), le, mi);</span><br><span class="line">    <span class="built_in">js</span>(<span class="built_in">RS</span>(dq), mi + <span class="number">1</span>, ri);</span><br><span class="line">    b[dq] = <span class="built_in">push_up</span>(b[<span class="built_in">LS</span>(dq)], b[<span class="built_in">RS</span>(dq)]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">xg</span><span class="params">(<span class="type">int</span> dq, <span class="type">int</span> wz, <span class="type">int</span> zh)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (b[dq].le == b[dq].ri)</span><br><span class="line">    &#123;</span><br><span class="line">        b[dq].minz = zh;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mi = (b[dq].le + b[dq].ri) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (wz &lt;= mi)</span><br><span class="line">        <span class="built_in">xg</span>(<span class="built_in">LS</span>(dq), wz, zh);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">xg</span>(<span class="built_in">RS</span>(dq), wz, zh);</span><br><span class="line">    b[dq] = <span class="built_in">push_up</span>(b[<span class="built_in">LS</span>(dq)], b[<span class="built_in">RS</span>(dq)]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">node <span class="title">cx</span><span class="params">(<span class="type">int</span> dq, <span class="type">int</span> le, <span class="type">int</span> ri)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (b[dq].le == le &amp;&amp; b[dq].ri == ri)</span><br><span class="line">        <span class="keyword">return</span> b[dq];</span><br><span class="line">    <span class="type">int</span> mi = (b[dq].le + b[dq].ri) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (ri &lt;= mi)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">cx</span>(<span class="built_in">LS</span>(dq), le, ri);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (le &gt; mi)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">cx</span>(<span class="built_in">RS</span>(dq), le, ri);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">push_up</span>(<span class="built_in">cx</span>(<span class="built_in">LS</span>(dq), le, mi), <span class="built_in">cx</span>(<span class="built_in">RS</span>(dq), mi + <span class="number">1</span>, ri));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="built_in">js</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    LL dans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        dans += xd[i];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, dans);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, srp; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;srp);</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            node qwq = <span class="built_in">cx</span>(<span class="number">1</span>, srp, n);</span><br><span class="line">            <span class="keyword">if</span> (qwq.minz &gt; a[srp])</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="built_in">xg</span>(<span class="number">1</span>, qwq.minwz, INF);</span><br><span class="line">            dans -= xd[qwq.minwz];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, dans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="codechef-frbsum-fjoi-2016神秘数"><ahref="https://www.lydsy.com/JudgeOnline/problem.php?id=4299">CodechefFRBSUM</a> &amp;&amp; <ahref="https://www.lydsy.com/JudgeOnline/problem.php?id=4408">[Fjoi2016]神秘数</a></h3><p>这题好神啊qwq</p><p>首先我们要知道一个显而易见的结论:</p><blockquote><p>我们给要求的区间排序, 如果前<spanclass="math inline">\(i\)</span>个数的神秘数为<spanclass="math inline">\(ans_i\)</span>, 那么:</p><ol type="1"><li><span class="math inline">\(a_{i+ 1} \le ans_i \to ans_{i + 1} =ans_i + a_{i + 1}\)</span>: 考虑把<spanclass="math inline">\(a_i\)</span>放在"底下"(或者说放在"前面")</li><li><span class="math inline">\(a_{i + 1} &gt; ans_i \toans_{\text{整个区间}} = ans_i\)</span>: 考虑如果这个数自己就超过了<spanclass="math inline">\(ans_i\)</span>,那么之后的整个区间都不可能有数能到达<spanclass="math inline">\(ans_i\)</span>了</li></ol></blockquote><p>想一想是不是这样的</p><p>那么, 我们就可以这样</p><ul><li>先设一个<span class="math inline">\(ans = 1\)</span>(因为<spanclass="math inline">\(0\)</span>肯定能凑出来), 然后开始循环:</li><li>在主席树中查找给定区间里所有不大于<spanclass="math inline">\(ans\)</span>的数的和<a href="#fn1"class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a>,记作<span class="math inline">\(qwq\)</span></li><li>如果<span class="math inline">\(qwq\)</span>小于<spanclass="math inline">\(ans\)</span>, 那么直接输出现在的<spanclass="math inline">\(ans\)</span>: 因为所有不大于<spanclass="math inline">\(ans\)</span>的数加起来都不能凑出<spanclass="math inline">\(ans\)</span>, 而加入大于<spanclass="math inline">\(ans\)</span>的数肯定也不可能正好是<spanclass="math inline">\(ans\)</span>, 也就是这个区间里不可能凑出<spanclass="math inline">\(ans\)</span></li><li>如果<span class="math inline">\(qwq\)</span>大于<spanclass="math inline">\(ans\)</span>, 那么<span class="math inline">\(ans= qwq + 1\)</span>: 考虑上面的结论, 我们加入的数(其实就是第一个结论,但是一次加了多个数)都没有超过<span class="math inline">\(ans\)</span>,所以我们可以扩大<span class="math inline">\(ans\)</span>到<spanclass="math inline">\(ans + a_x + a_y + \cdots = qwq + 1\)</span></li></ul><p>感性理解一下就是:</p><p>在上一轮循环, 我们用了一些<span class="math inline">\(a\)</span>,得到了一个<span class="math inline">\(ans\)</span> 在这一轮循环里,我们加入了一些<span class="math inline">\(a\)</span>, 这些<spanclass="math inline">\(a\)</span>都满足上面的第一个结论, 每一个<spanclass="math inline">\(a_x\)</span>都可以让<spanclass="math inline">\(ans\)</span>变成<span class="math inline">\(ans +a_x\)</span> 我们一次加了好多的<span class="math inline">\(a\)</span>,每一个<span class="math inline">\(a\)</span>都符合要求,所以我们可以让<span class="math inline">\(ans\)</span>扩大<spanclass="math inline">\(\sum\text{所有被加进来(也就是比$ans$小的)}a\)</span>, 而之前的<spanclass="math inline">\(ans\)</span>就是前面几轮中被加入的<spanclass="math inline">\(a\)</span>, 所以新的<spanclass="math inline">\(ans\)</span>就是所有比<spanclass="math inline">\(ans\)</span>小的数的和了</p><p>因为如果要继续循环的话, <spanclass="math inline">\(ans\)</span>一定比上一个<spanclass="math inline">\(ans\)</span>的两倍还要大, 所以复杂度是<spanclass="math inline">\(\mathrm O(n\lg ^2n)\)</span>的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**************************************************************</span></span><br><span class="line"><span class="comment">    Problem: 4408</span></span><br><span class="line"><span class="comment">    User: Cansult</span></span><br><span class="line"><span class="comment">    Language: C++</span></span><br><span class="line"><span class="comment">    Result: Accepted</span></span><br><span class="line"><span class="comment">    Time:2540 ms</span></span><br><span class="line"><span class="comment">    Memory:64968 kb</span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (100000 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF (0x7fffffff)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> zh, ls, rs, le, ri;</span><br><span class="line">&#125;b[MAXN &lt;&lt; <span class="number">5</span>];</span><br><span class="line"><span class="type">int</span> n, m, a[MAXN], sora[MAXN], cntb, root[MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">xg</span><span class="params">(<span class="type">int</span> pre, <span class="type">int</span>&amp; dq, <span class="type">int</span> le, <span class="type">int</span> ri, <span class="type">int</span> zh, <span class="type">int</span> tz)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dq = ++cntb;</span><br><span class="line">    b[dq].le = le, b[dq].ri = ri;</span><br><span class="line">    <span class="keyword">if</span> (le == ri)</span><br><span class="line">    &#123;</span><br><span class="line">        b[dq].zh = b[pre].zh + tz; </span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mi = (le + ri) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (zh &lt;= mi)</span><br><span class="line">        <span class="built_in">xg</span>(b[pre].ls, b[dq].ls, le, mi, zh, tz), b[dq].rs = b[pre].rs;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">xg</span>(b[pre].rs, b[dq].rs, mi + <span class="number">1</span>, ri, zh, tz), b[dq].ls = b[pre].ls;</span><br><span class="line">    b[dq].zh = b[b[dq].ls].zh + b[b[dq].rs].zh;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cx</span><span class="params">(<span class="type">int</span> ler, <span class="type">int</span> rir, <span class="type">int</span> le, <span class="type">int</span> ri)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!rir)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (b[rir].le == le &amp;&amp; b[rir].ri == ri)</span><br><span class="line">        <span class="keyword">return</span> b[rir].zh - b[ler].zh;</span><br><span class="line">    <span class="type">int</span> mi = (b[rir].le + b[rir].ri) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (ri &lt;= mi)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">cx</span>(b[ler].ls, b[rir].ls, le, ri);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (le &gt; mi)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">cx</span>(b[ler].rs, b[rir].rs, le, ri);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">cx</span>(b[ler].ls, b[rir].ls, le, mi) + <span class="built_in">cx</span>(b[ler].rs, b[rir].rs, mi + <span class="number">1</span>, ri);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]), sora[i] = a[i];</span><br><span class="line">    <span class="built_in">sort</span>(sora + <span class="number">1</span>, sora + n + <span class="number">1</span>);</span><br><span class="line">    sora[<span class="number">0</span>] = <span class="built_in">unique</span>(sora + <span class="number">1</span>, sora + n + <span class="number">1</span>) - sora - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        a[i] = <span class="built_in">lower_bound</span>(sora + <span class="number">1</span>, sora + sora[<span class="number">0</span>] + <span class="number">1</span>, a[i]) - sora,</span><br><span class="line">        <span class="built_in">xg</span>(root[i - <span class="number">1</span>], root[i], <span class="number">1</span>, sora[sora[<span class="number">0</span>]], a[i], sora[a[i]]);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, srl, srr; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;srl, &amp;srr);</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> tans = <span class="built_in">upper_bound</span>(sora + <span class="number">1</span>, sora + sora[<span class="number">0</span>] + <span class="number">1</span>, ans) - sora - <span class="number">1</span>, qwq = <span class="built_in">cx</span>(root[srl - <span class="number">1</span>], root[srr], <span class="number">1</span>, tans);</span><br><span class="line">            <span class="keyword">if</span> (qwq &lt; ans)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            ans = qwq + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>By Cansult</p><aside id="footnotes" class="footnotes footnotes-end-of-document"role="doc-endnotes"><hr /><ol><li id="fn1"><p>其实就是在插入一个数的时候,不是<code>b[dq].zh = b[pre].zh + 1</code>,而是<code>b[dq].zh = b[pre].zh + zh</code><a href="#fnref1"class="footnote-back" role="doc-backlink">↩︎</a></p></li></ol></aside>]]></content>
      
      
      <categories>
          
          <category> 翻车笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
            <tag> 清奇脑回路 </tag>
            
            <tag> 主席树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>翻车笔记 [POI2005]Kos-Dicing [二分, 网络流, 清奇脑回路]</title>
      <link href="/posts/20904.html"/>
      <url>/posts/20904.html</url>
      
        <content type="html"><![CDATA[<p>学了好久文化课, 来刷(被)水题啦(虐)</p><p>转变模型中某些东西代表的含义通常会有惊喜</p><span id="more"></span><h3 id="懵逼的-题目">懵逼的 题目</h3><p><ahref="https://www.lydsy.com/JudgeOnline/problem.php?id=1532">qwq</a></p><h3 id="扯淡的-题解">扯淡的 题解</h3><p>最多的最少 显然要二分</p><p>然后判定的时候可以用网络流, 发现如果只用点表示参赛的人的话,没办法去掉一个人和他对手打一架, 他的对手又来打他的情况</p><p>昊哥: 你sb吧, 用一排点表示每一场比赛不就行了</p><p>我: Orzzz</p><p>来给每一个人向起点连上容量位最多赢的次数(二分出来的)的边,每一个人向他参加的每一场比赛连边, 每一场比赛向终点连边,然后跑最大流看是否满流即可</p><h3 id="沙茶的-代码">沙茶的 代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**************************************************************</span></span><br><span class="line"><span class="comment">    Problem: 1532</span></span><br><span class="line"><span class="comment">    User: Cansult</span></span><br><span class="line"><span class="comment">    Language: C++</span></span><br><span class="line"><span class="comment">    Result: Accepted</span></span><br><span class="line"><span class="comment">    Time:2008 ms</span></span><br><span class="line"><span class="comment">    Memory:21940 kb</span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF (0x7fffffff)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (100000 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXM (500000 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rev(i) ((((i) - 1) ^ 1) + 1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cbh(i) ((i) + 10000)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> s = <span class="number">0</span>, t = MAXN - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edg</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> from, to, next, cap, flow;</span><br><span class="line">&#125;b[MAXM &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> g[MAXN], cntb, n, m, dis[MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">adn</span><span class="params">(<span class="type">int</span> from, <span class="type">int</span> to, <span class="type">int</span> cap)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    b[++cntb].next = g[from];</span><br><span class="line">    b[cntb].from = from, b[cntb].to = to, b[cntb].cap = cap, b[cntb].flow = <span class="number">0</span>;</span><br><span class="line">    g[from] = cntb;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(s);</span><br><span class="line">    <span class="built_in">memset</span>(dis, <span class="number">0</span>, <span class="built_in">sizeof</span>(dis));</span><br><span class="line">    dis[s] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> dq = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = g[dq]; i; i = b[i].next)</span><br><span class="line">            <span class="keyword">if</span> (b[i].cap &gt; b[i].flow &amp;&amp; !dis[b[i].to])</span><br><span class="line">            &#123;</span><br><span class="line">                dis[b[i].to] = dis[dq] + <span class="number">1</span>;</span><br><span class="line">                q.<span class="built_in">push</span>(b[i].to);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dis[t] &gt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dinic</span><span class="params">(<span class="type">int</span> dq, <span class="type">int</span> maxf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dq == t || !maxf)</span><br><span class="line">        <span class="keyword">return</span> maxf;</span><br><span class="line">    <span class="type">int</span> re = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = g[dq]; i; i = b[i].next)</span><br><span class="line">        <span class="keyword">if</span> (b[i].cap &gt; b[i].flow &amp;&amp; dis[dq] + <span class="number">1</span> == dis[b[i].to])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> zl = <span class="built_in">dinic</span>(b[i].to, <span class="built_in">min</span>(maxf, b[i].cap - b[i].flow));</span><br><span class="line">            re += zl;</span><br><span class="line">            maxf -= zl;</span><br><span class="line">            b[i].flow += zl;</span><br><span class="line">            b[<span class="built_in">rev</span>(i)].flow -= zl;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> re = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">bfs</span>())</span><br><span class="line">        re += <span class="built_in">dinic</span>(s, INF);</span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ef</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> le = <span class="number">0</span>, ri = m + <span class="number">1</span>, ans;</span><br><span class="line">    <span class="keyword">while</span> (le &lt; ri)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mi = (le + ri) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= cntb; i++)</span><br><span class="line">            b[i].flow = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = g[s]; i; i = b[i].next)</span><br><span class="line">            b[i].cap = mi;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">solve</span>() &gt;= m)</span><br><span class="line">            ans = mi, ri = mi;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            le = mi + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, srx, sry; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;srx, &amp;sry);</span><br><span class="line">        <span class="built_in">adn</span>(srx, <span class="built_in">cbh</span>(i), <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">adn</span>(<span class="built_in">cbh</span>(i), srx, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">adn</span>(sry, <span class="built_in">cbh</span>(i), <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">adn</span>(<span class="built_in">cbh</span>(i), sry, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">adn</span>(<span class="built_in">cbh</span>(i), t, <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">adn</span>(t, <span class="built_in">cbh</span>(i), <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">adn</span>(s, i, <span class="number">1</span>), <span class="built_in">adn</span>(i, s, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">ef</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>By 合格考求过的 Cansult</p>]]></content>
      
      
      <categories>
          
          <category> 翻车笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 清奇脑回路 </tag>
            
            <tag> 网络流 </tag>
            
            <tag> 二分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>水题笔记 [ONTAK2015] OR-XOR [贪心]</title>
      <link href="/posts/4342.html"/>
      <url>/posts/4342.html</url>
      
        <content type="html"><![CDATA[<p>...细节决定成败...</p><p>注意在进行爆<code>int</code>的位运算的时候要把前面的数这样写<code>1ll &lt;&lt; i</code></p><span id="more"></span><h3 id="懵逼的-题目">懵逼的 题目</h3><p><ahref="https://www.lydsy.com/JudgeOnline/problem.php?id=4245">qwq</a></p><h3 id="扯淡的-题解">扯淡的 题解</h3><p>这就是<ahref="https://www.cansult.ga/50380.html">前几天说的那个题</a></p><p>我们发现按位贪心的时候前面贪过的位会对当前位的判定产生影响,那我们就把前面的位带上转移(其实真正的思路来源于<ahref="https://www.cansult.ga/50169.html">ARC092D</a>)</p><p>这样 我们就可以按位贪心, 判断当前的位是否能够为<spanclass="math inline">\(0\)</span>(具体的说就是满足分成的所有块的<spanclass="math inline">\(xor\)</span>和都满足<code>(xorsum &amp; (ans + (1 &lt;&lt; i) - 1)) == ans + (1 &lt;&lt; i) - 1</code>,就可以不在第<code>i</code>位放<spanclass="math inline">\(1\)</span>了)</p><p>我们发现, 在判断的时候, 如果能分成的份数<spanclass="math inline">\(re\)</span>如果满足<span class="math inline">\(m\le re\)</span>,那么我们就可以知道当前要判断的数可以被满足(因为被异或后只可能变小不可能变大),所以我们可以把<span class="math inline">\(a[]\)</span>分成尽可能多的份,最后判断份数和<span class="math inline">\(m\)</span>的关系就可以了</p><p>我们还发现, 如果最后剩下的一份不满足当前给的数,那么也一定不可能再消掉最后那个块里的<spanclass="math inline">\(1\)</span>(因为如果消掉最后一块的<spanclass="math inline">\(1\)</span>, 前面的块中就必然有一个<spanclass="math inline">\(1\)</span>多出来)</p><h3 id="沙茶的-代码">沙茶的 代码</h3><p>十分尴尬的忘记给位运算的<spanclass="math inline">\(1\)</span>赋成<code>LL</code>了...</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**************************************************************</span></span><br><span class="line"><span class="comment">    Problem: 4245</span></span><br><span class="line"><span class="comment">    User: Cansult</span></span><br><span class="line"><span class="comment">    Language: C++</span></span><br><span class="line"><span class="comment">    Result: Accepted</span></span><br><span class="line"><span class="comment">    Time:1756 ms</span></span><br><span class="line"><span class="comment">    Memory:5196 kb</span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (500000 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL unsigned long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line">LL ans, a[MAXN];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">pd</span><span class="params">(LL x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> re = <span class="number">0</span>, i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; n)</span><br><span class="line">    &#123;</span><br><span class="line">        LL dq = a[++i];</span><br><span class="line">        <span class="keyword">while</span> ((x | dq) != x &amp;&amp; i &lt; n)</span><br><span class="line">            dq ^= a[++i];</span><br><span class="line">        <span class="keyword">if</span> ((x | dq) == x)</span><br><span class="line">            ++re;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (i == n)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> re &gt;= m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">63</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">pd</span>((ans | ((<span class="number">1ll</span> &lt;&lt; i) - <span class="number">1</span>))))</span><br><span class="line">            ans |= (<span class="number">1ll</span> &lt;&lt; i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%llu&quot;</span>, &amp;a[i]);</span><br><span class="line">    <span class="built_in">solve</span>();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%llu\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>By 沙茶 Cansult</p>]]></content>
      
      
      <categories>
          
          <category> 水题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>翻车笔记 BZOJ4765 普通计算姬 [分块, 清奇脑回路, 大分块, 翻车]</title>
      <link href="/posts/64119.html"/>
      <url>/posts/64119.html</url>
      
        <content type="html"><![CDATA[<p>合理平衡复杂度是手筋</p><span id="more"></span><h3 id="懵逼的-题目">懵逼的 题目</h3><p><ahref="https://www.lydsy.com/JudgeOnline/problem.php?id=4765">qwq</a></p><h3 id="扯淡的-题解">扯淡的 题解</h3><p>不会, 抄的题解</p><p>来...让我们想一下 树链剖分一次修改的复杂度是<spanclass="math inline">\(\mathrm O(\lg n)\)</span>, 但是查询是<spanclass="math inline">\(\mathrm O(n)\)</span>的</p><p>好...那我们就可以平衡复杂度了</p><p>考虑一下修改一个点对答案的贡献,修改一个节点的权值只会对他的祖先造成影响,我们就可以搞一个区间求和的大分块, 记录最后的<code>ans</code>,然后搞一个数组<code>g[i][j]</code>, 表示第<spanclass="math inline">\(i\)</span>个节点在第<spanclass="math inline">\(j\)</span>个块有几个祖先(包括自己),这样修改的时候就可以直接<code>sum[i] += g[dq][i] * zh</code>了</p><p>那么零散的块呢? 总不能搞一个树链剖分吧...</p><p>Emmmmm...如果我们不记录子树和, 而是每一次都重新计算呢?</p><p>在<span class="math inline">\(dfs\)</span>序上搞一个树状数组,然后每一次都重新计算子树和!</p><p>完美!</p><p><del>感觉再给我三辈子我也想不出来_(:з」∠)_</del></p><p>好...让我们想想我们需要些什么...</p><ul><li>一个区间修改, 区间查询的块<code>qwq</code>, 用来存储最终的答案<ul><li>一个数组<code>sum[MAXK]</code>, 记录当前块的数字和; 一个单点修改,区间查询的树状数组<code>b</code>, 建在<spanclass="math inline">\(dfs\)</span>序上, 用来存储每一个节点的子树和</li><li><code>ULL cx(int le, int ri)</code>:<ul><li>找到<span class="math inline">\([le, ri]\)</span>间的整块,<code>re += sum[i]</code></li><li>对于所有的零散点, <code>re += cxsum(i)</code></li></ul></li><li><code>void xg(int wz, ULL zh)</code>: 遍历所有的块,<code>sum[i] += zh * g[wz][i], xgsum(ta[wz].begin, zh)</code></li></ul></li><li>一个数组<code>g[MAXN][MAXK]</code>:<code>g[i][j]</code>用来存储第<code>i</code>个节点在第<code>j</code>个块中的祖先个数(用来记录贡献)</li><li>一个结构体<code>ta[MAXN] = &#123;begin, end&#125;</code>, 来搞<spanclass="math inline">\(dfs\)</span>序</li></ul><h3 id="沙茶的-代码">沙茶的 代码</h3><p>注意几个细节:</p><ul><li>分块的时候一定要在最后一个块的右边界上加一个和<spanclass="math inline">\(n\)</span>的取<spanclass="math inline">\(\min\)</span>...否则<spanclass="math inline">\(RE\)</span>死你...</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (100000 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXK (350 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF (0x7ffffff)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x) &amp; (-(x)))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ULL unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rint register int </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cint const int </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> max(a, b) ((a) &gt; (b) ? (a) : (b))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> min(a, b) ((a) &lt; (b) ? (a) : (b))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edg</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> from, to, next;</span><br><span class="line">&#125;tb[MAXN &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">tnode</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> begin, end, fa;</span><br><span class="line">&#125;ta[MAXN];</span><br><span class="line"><span class="type">int</span> n, root, tg[MAXN], g[MAXN][MAXK], cnta, cntb, block, le[MAXK], ri[MAXK];</span><br><span class="line">ULL sum[MAXK], b[MAXN];</span><br><span class="line">LL a[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">belong</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="keyword">return</span> ((x - <span class="number">1</span>) / block + <span class="number">1</span>); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ULL <span class="title">cxsum</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ULL re = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = ta[x].end; i; i -= <span class="built_in">lowbit</span>(i))</span><br><span class="line">re += b[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = ta[x].begin - <span class="number">1</span>; i; i -= <span class="built_in">lowbit</span>(i))</span><br><span class="line">re -= b[i];</span><br><span class="line"><span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">xgsum</span><span class="params">(<span class="type">int</span> wz, LL zh)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = wz; i &lt;= n; i += <span class="built_in">lowbit</span>(i))</span><br><span class="line">b[i] += zh;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> dq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ta[dq].begin = ++cnta;</span><br><span class="line"><span class="built_in">xgsum</span>(cnta, a[dq]);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= le[<span class="number">0</span>]; i++)</span><br><span class="line">g[dq][i] = g[ta[dq].fa][i];</span><br><span class="line">++g[dq][<span class="built_in">belong</span>(dq)];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = tg[dq]; i; i = tb[i].next)</span><br><span class="line"><span class="keyword">if</span> (tb[i].to != ta[dq].fa)</span><br><span class="line">&#123;</span><br><span class="line">ta[tb[i].to].fa = dq;</span><br><span class="line"><span class="built_in">dfs</span>(tb[i].to);</span><br><span class="line">&#125;</span><br><span class="line">ta[dq].end = cnta;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">xg</span><span class="params">(<span class="type">int</span> wz, LL zh)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">a[wz] += zh;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= le[<span class="number">0</span>]; i++)</span><br><span class="line">sum[i] += zh * g[wz][i];</span><br><span class="line"><span class="built_in">xgsum</span>(ta[wz].begin, zh);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ULL <span class="title">cx</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ULL re = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> lerk = INF, rigk = -INF;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= le[<span class="number">0</span>]; i++)</span><br><span class="line"><span class="keyword">if</span> (le[i] &gt;= l &amp;&amp; ri[i] &lt;= r)</span><br><span class="line">&#123;</span><br><span class="line">re += sum[i];</span><br><span class="line">lerk = <span class="built_in">min</span>(lerk, i), rigk = <span class="built_in">max</span>(rigk, i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (lerk &gt;= INF || rigk &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = l; i &lt;= r; i++)</span><br><span class="line">re += <span class="built_in">cxsum</span>(i);</span><br><span class="line"><span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (lerk &gt; <span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = l; i &lt;= ri[lerk - <span class="number">1</span>]; i++)</span><br><span class="line">re += <span class="built_in">cxsum</span>(i);</span><br><span class="line"><span class="keyword">if</span> (rigk &lt; le[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = le[rigk + <span class="number">1</span>]; i &lt;= r; i++)</span><br><span class="line">re += <span class="built_in">cxsum</span>(i);</span><br><span class="line"><span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">block = <span class="built_in">sqrt</span>(n) + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i += block)</span><br><span class="line">le[++le[<span class="number">0</span>]] = i, ri[++ri[<span class="number">0</span>]] = <span class="built_in">min</span>(n, i + block - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">adn</span><span class="params">(<span class="type">int</span> from, <span class="type">int</span> to)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">tb[++cntb].next = tg[from];</span><br><span class="line">tb[cntb].from = from;</span><br><span class="line">tb[cntb].to = to;</span><br><span class="line">tg[from] = cntb;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="type">int</span> q;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;q);</span><br><span class="line"><span class="built_in">init</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;a[i]);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, srx, sry; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;srx, &amp;sry);</span><br><span class="line"><span class="keyword">if</span> (!srx)</span><br><span class="line">&#123;</span><br><span class="line">root = sry;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">adn</span>(srx, sry);</span><br><span class="line"><span class="built_in">adn</span>(sry, srx);</span><br><span class="line">&#125;</span><br><span class="line">ta[root].fa = root;</span><br><span class="line"><span class="built_in">dfs</span>(root);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= le[<span class="number">0</span>]; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = le[i]; j &lt;= ri[i]; j++)</span><br><span class="line">sum[i] += <span class="built_in">cxsum</span>(j);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, sre, srx, sry; i &lt;= q; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;sre, &amp;srx, &amp;sry);</span><br><span class="line"><span class="keyword">if</span> (sre == <span class="number">1</span>)</span><br><span class="line"><span class="built_in">xg</span>(srx, sry - a[srx]);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%llu\n&quot;</span>, <span class="built_in">cx</span>(srx, sry));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>By 大傻叉 Cansult</p>]]></content>
      
      
      <categories>
          
          <category> 翻车笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 翻车 </tag>
            
            <tag> 清奇脑回路 </tag>
            
            <tag> 分块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>翻车笔记 ABC096D &quot;Five, Five Everywhere&quot; [欧拉筛, 数学, 清奇脑回路]</title>
      <link href="/posts/64976.html"/>
      <url>/posts/64976.html</url>
      
        <content type="html"><![CDATA[<p>不会ABC了已经</p><span id="more"></span><h3 id="懵逼的-题目">懵逼的 题目</h3><p><ahref="https://abc096.contest.atcoder.jp/tasks/abc096_d">qwq</a></p><h3 id="扯淡的-题解">扯淡的 题解</h3><p>当时和Ycrpro看这道题的时候完全是懵逼的啊!</p><p>我翻了哥德巴赫猜想, 猜了是否5个素数的和不可能是合数, 算了<spanclass="math inline">\(5000\)</span>以内的素数和为合数的情况, 找了<spanclass="math inline">\(2, 4, 6\)</span>个素数和的规律</p><p>就是没有想到</p><blockquote><p>其实题目名称有点小提示，让这些数的个位是1，5个这样的数加起来一定是5的倍数，也就是合数了。</p><p>——from <ahref="https://blog.csdn.net/swunHJ/article/details/80211192">一个不知名的大佬</a></p></blockquote><p>[人生重来算了.jpg]</p><h3 id="沙茶的-代码">沙茶的 代码</h3><p>去年的欧拉筛我居然没忘...</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (100000 + 5)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">bool</span> isp[MAXN];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; prime;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(isp, <span class="literal">true</span>, <span class="built_in">sizeof</span>(isp));</span><br><span class="line">isp[<span class="number">1</span>] = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt; MAXN; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (isp[i])</span><br><span class="line">prime.<span class="built_in">push_back</span>(i);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; prime.<span class="built_in">size</span>() &amp;&amp; prime[j] * i &lt; MAXN; j++)</span><br><span class="line">&#123;</span><br><span class="line">isp[i * prime[j]] = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (i % prime[j] == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="built_in">init</span>();</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="type">int</span> last = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (; last &lt; prime.<span class="built_in">size</span>(); last++)</span><br><span class="line"><span class="keyword">if</span> (prime[last] % <span class="number">10</span> == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, prime[last]);</span><br><span class="line">++last;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>By 大沙茶 Cansult</p>]]></content>
      
      
      <categories>
          
          <category> 翻车笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 清奇脑回路 </tag>
            
            <tag> 欧拉筛 </tag>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>翻车笔记 [SCOI2007]修车 + [Noi2012]美食节 [网络流, 清奇脑回路, 翻车]</title>
      <link href="/posts/8548.html"/>
      <url>/posts/8548.html</url>
      
        <content type="html"><![CDATA[<p>神建模...我真是太菜了...</p><span id="more"></span><h3 id="懵逼的-题目">懵逼的 题目</h3><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=1070">1070:[SCOI2007]修车</a></p><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=2879">2879:[Noi2012]美食节</a></p><h3 id="扯淡的-题解">扯淡的 题解</h3><p>我内心: 这玩意咋做啊qwqwqwqwqwq,之前的东西会对后面的边权造成影响啊qwqwqwqwqwq</p><p>然后翻题解...王gay梁A了... AHmhr A了...xMinh A了...REfun A了...</p><p>...你们都太强了 Orzzzzzz</p><p>艹</p><p>前面会对后面造成影响那我倒过来连边不就行了...</p><p>设 第<span class="math inline">\(j\)</span>盘菜是第<spanclass="math inline">\(i\)</span>个人做的倒数第<spanclass="math inline">\(k\)</span>盘菜,那么这盘菜对答案的影响就是后面的<spanclass="math inline">\(k\)</span>个人, 影响的总时间是<spanclass="math inline">\(k \cdot time_{i, j}\)</span></p><p>然后好啦</p><ul><li><p>拆点: 把每一个厨师拆成<span class="math inline">\(\sum_j^np_j\)</span>个点<span class="math inline">\(b_{i, k}\)</span>,代表第<span class="math inline">\(i\)</span>个厨师做倒数第<spanclass="math inline">\(k\)</span>盘菜</p></li><li><p>连边:</p><ul><li><span class="math inline">\(S\)</span>向所有的菜<spanclass="math inline">\(c_i\)</span>连边<span class="math inline">\(cost =0, cap = (c_i\)</span>的需求量<spanclass="math inline">\()\)</span></li><li><span class="math inline">\(c_j\)</span>向<spanclass="math inline">\(b_{i, k}\)</span>连边, <spanclass="math inline">\(cost = k \cdot time_{i, j}, cap = 1\)</span></li><li><span class="math inline">\(b_{i, k}\)</span>向<spanclass="math inline">\(T\)</span>连边, <span class="math inline">\(cost =0, cap = 1\)</span></li></ul></li></ul><p>没了?</p><p><del>没了</del></p><p>你用这种方法做美食节的时候...你会发现你T的很惨啊...Emmmmmmmm...我们有一种奇妙的优化方法...</p><p>我们发现这个边数太多了...然而每一次曾广只会用到<spanclass="math inline">\(3\)</span>条边...<spanclass="math inline">\(spfa\)</span>的复杂度就爆炸了...</p><p>考虑怎么缩减边数...</p><p>你跑<spanclass="math inline">\(spfa\)</span>肯定是先跑费用最小的边...而如果边<spanclass="math inline">\(c_j \to b_{i, k + 1}\)</span>符合要求, 而且<spanclass="math inline">\((c_j \to b_{i, k}).cap &gt; (c_j \to b_{i,k}).flow\)</span>时, 肯定是要跑<span class="math inline">\(c_j \to b_{i,k}\)</span>的...</p><p>也就是说, 如果<span class="math inline">\(c_j\to b_{i,k}\)</span>没有满流, 我们是没有必要加<span class="math inline">\(c_j \tob_{i, k + 1}\)</span>这条边的...我们就可以在每一次增广后才加入对应的边,这样就保证了整个图的边数都在一个可以接受的范围内</p><p>复杂度? <span class="math inline">\(\mathrm O(\)</span>跑的过<spanclass="math inline">\()\)</span>...</p><h3 id="沙茶的-代码">沙茶的 代码</h3><h4 id="修车">修车</h4><p>他bzoj这个题时限<spanclass="math inline">\(1s\)</span>感觉很不资瓷啊...没<del>(懒得)</del>卡</p><p><del>你以为你bzoj的测评姬速度能和别的oj比还是咋的,还™搞<strong>总时限</strong><spanclass="math inline">\(1s\)</span></del></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**************************************************************</span></span><br><span class="line"><span class="comment">    Problem: 1070</span></span><br><span class="line"><span class="comment">    User: Cansult</span></span><br><span class="line"><span class="comment">    Language: C++</span></span><br><span class="line"><span class="comment">    Result: Time_Limit_Exceed</span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (100000 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXM (500000 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF (0X7FFFFFFF)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXC (100)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rev(a) ((a) ^ 1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> bh(i, j) ((((i) - 1) * MAXC) + j)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ca(i) (i + 90000)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DD double</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> s = <span class="number">0</span>, t = MAXN - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edg</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> from, to, next, cap, flow, cost;</span><br><span class="line">    <span class="built_in">edg</span>() &#123;&#125;</span><br><span class="line">    <span class="built_in">edg</span>(<span class="type">int</span> fr, <span class="type">int</span> dqt, <span class="type">int</span> ne, <span class="type">int</span> ca, <span class="type">int</span> co): <span class="built_in">from</span>(fr), <span class="built_in">to</span>(dqt), <span class="built_in">next</span>(ne), <span class="built_in">cap</span>(ca), <span class="built_in">flow</span>(<span class="number">0</span>), <span class="built_in">cost</span>(co) &#123;&#125;</span><br><span class="line">&#125;b[MAXM &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> g[MAXN], cntb = <span class="number">-1</span>, n, m, gg[MAXC][MAXC], pre[MAXN], ans;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">adn</span><span class="params">(<span class="type">int</span> from, <span class="type">int</span> to, <span class="type">int</span> cap, <span class="type">int</span> cost)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    b[++cntb] = <span class="built_in">edg</span>(from, to, g[from], cap, cost);</span><br><span class="line">    g[from] = cntb;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">spfa</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> dis[MAXN], a[MAXN];</span><br><span class="line">    <span class="type">bool</span> inq[MAXN];</span><br><span class="line">    <span class="built_in">memset</span>(inq, <span class="literal">false</span>, <span class="built_in">sizeof</span>(inq));</span><br><span class="line">    <span class="built_in">memset</span>(dis, <span class="number">0x7f</span>, <span class="built_in">sizeof</span>(dis));</span><br><span class="line">    <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="built_in">sizeof</span>(a));</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(s);</span><br><span class="line">    dis[s] = <span class="number">0</span>;</span><br><span class="line">    a[s] = INF;</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> dq = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        inq[dq] = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = g[dq]; ~i; i = b[i].next)</span><br><span class="line">            <span class="keyword">if</span> (dis[b[i].to] &gt; dis[dq] + b[i].cost &amp;&amp; b[i].cap &gt; b[i].flow)</span><br><span class="line">            &#123;</span><br><span class="line">                a[b[i].to] = <span class="built_in">min</span>(a[dq], b[i].cap - b[i].flow);</span><br><span class="line">                pre[b[i].to] = i;</span><br><span class="line">                dis[b[i].to] = dis[dq] + b[i].cost;</span><br><span class="line">                <span class="keyword">if</span> (!inq[b[i].to])</span><br><span class="line">                    inq[b[i].to] = <span class="literal">true</span>, q.<span class="built_in">push</span>(b[i].to);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a[t];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> zl = <span class="built_in">spfa</span>();</span><br><span class="line">        <span class="keyword">if</span> (!zl)    <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = t; i != s; i = b[pre[i]].from)</span><br><span class="line">            <span class="comment">/*printf(&quot;from: %d, to: %d, cost: %d, flow: %d\n&quot;, b[pre[i]].from, b[pre[i]].to, b[pre[i]].cost, b[pre[i]].flow), */</span>b[pre[i]].flow += zl, b[<span class="built_in">rev</span>(pre[i])].flow -= zl, ans += zl * b[pre[i]].cost; <span class="comment">// Emmmm怎么加成流量了...</span></span><br><span class="line"><span class="comment">//      puts(&quot;-----------&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">        <span class="built_in">adn</span>(s, <span class="built_in">ca</span>(i), <span class="number">1</span>, <span class="number">0</span>), <span class="built_in">adn</span>(<span class="built_in">ca</span>(i), s, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">            <span class="built_in">adn</span>(<span class="built_in">bh</span>(i, j), t, <span class="number">1</span>, <span class="number">0</span>), <span class="built_in">adn</span>(t, <span class="built_in">bh</span>(i, j), <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt;= m; k++)</span><br><span class="line">        <span class="built_in">adn</span>(<span class="built_in">ca</span>(i), <span class="built_in">bh</span>(j, k), <span class="number">1</span>, gg[j][i] * k), <span class="built_in">adn</span>(<span class="built_in">bh</span>(j, k), <span class="built_in">ca</span>(i), <span class="number">0</span>, -gg[j][i] * k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//    cout &lt;&lt; &quot;Hello world!&quot; &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//  freopen(&quot;in.in&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line">    <span class="built_in">memset</span>(g, <span class="number">-1</span>, <span class="built_in">sizeof</span>(g));</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;gg[j][i]);</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="built_in">solve</span>();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.2lf&quot;</span>, (DD)ans / m);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">3 9</span></span><br><span class="line"><span class="comment">42 2 53</span></span><br><span class="line"><span class="comment">16 66 94</span></span><br><span class="line"><span class="comment">37 55 99</span></span><br><span class="line"><span class="comment">77 79 11</span></span><br><span class="line"><span class="comment">9 2 95</span></span><br><span class="line"><span class="comment">19 49 10</span></span><br><span class="line"><span class="comment">5 19 91</span></span><br><span class="line"><span class="comment">36 14 95</span></span><br><span class="line"><span class="comment">100 61 54</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">23.78</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="美食节">美食节</h4><p>其实这个实现还是有一些细节</p><p>如果你一开始就把所有的<span class="math inline">\(b_{i,k}\)</span>与<span class="math inline">\(T\)</span>连上边了,你的常数就炸了...稳定<span class="math inline">\(1.4s\)</span>...</p><p>所以要把<span class="math inline">\(b_{i, k}\toT\)</span>的连边和<span class="math inline">\(c_j \to b_{i,k}\)</span>的连边放在一起...</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**************************************************************</span></span><br><span class="line"><span class="comment">    Problem: 2879</span></span><br><span class="line"><span class="comment">    User: Cansult</span></span><br><span class="line"><span class="comment">    Language: C++</span></span><br><span class="line"><span class="comment">    Result: Accepted</span></span><br><span class="line"><span class="comment">    Time:7108 ms</span></span><br><span class="line"><span class="comment">    Memory:14932 kb</span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">费用流</span></span><br><span class="line"><span class="comment">我猜...对于每一个厨师来说, 应该先放用时小的..</span></span><br><span class="line"><span class="comment">每一道菜我是不是可以多连几条边然后赋边权啥的...</span></span><br><span class="line"><span class="comment">我是不是可以...按照边权, 一层一层的加...</span></span><br><span class="line"><span class="comment">写一写?</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">Naive!</span></span><br><span class="line"><span class="comment">...</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (100000 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXM (500000 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF (0x7fffffff)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXC (800 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXH (100 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rev(a) ((a) ^ 1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ca(i) (90000 + i)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> bh(i, j) ((i) * MAXC + (j))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cint const int</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rint register int</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> s = <span class="number">0</span>, t = MAXN - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edg</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> from, to, next, cap, flow, cost;</span><br><span class="line">    <span class="built_in">edg</span>() &#123;&#125;</span><br><span class="line">    <span class="built_in">edg</span>(cint fr, cint dqt, cint ne, cint ca, cint co): <span class="built_in">from</span>(fr), <span class="built_in">to</span>(dqt), <span class="built_in">next</span>(ne), <span class="built_in">cap</span>(ca), <span class="built_in">flow</span>(<span class="number">0</span>), <span class="built_in">cost</span>(co) &#123;&#125;</span><br><span class="line">&#125;b[MAXM];</span><br><span class="line"><span class="type">int</span> g[MAXN], cntb = <span class="number">-1</span>, n, m, cnt[MAXC], dqch, ans, fans, gg[MAXH][MAXC], totp, pre[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">adn</span><span class="params">(cint from, cint to, cint cap, cint cost)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    b[++cntb] = <span class="built_in">edg</span>(from, to, g[from], cap, cost);</span><br><span class="line">    g[from] = cntb;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">min</span><span class="params">(<span class="type">const</span> <span class="type">int</span> x, <span class="type">const</span> <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; y)</span><br><span class="line">        <span class="keyword">return</span> y;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">spfa</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> dis[MAXN], a[MAXN];</span><br><span class="line">    <span class="type">bool</span> inq[MAXN];</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    <span class="built_in">memset</span>(dis, <span class="number">0x7f</span>, <span class="built_in">sizeof</span>(dis));</span><br><span class="line">    <span class="built_in">memset</span>(inq, <span class="literal">false</span>, <span class="built_in">sizeof</span>(inq));</span><br><span class="line">    a[t] = <span class="number">0</span>;</span><br><span class="line">    a[s] = INF;</span><br><span class="line">    dis[s] = <span class="number">0</span>;</span><br><span class="line">    q.<span class="built_in">push</span>(s);</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> dq = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        inq[dq] = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (rint i = g[dq]; ~i; i = b[i].next)</span><br><span class="line">            <span class="keyword">if</span> (dis[b[i].to] &gt; dis[dq] + b[i].cost &amp;&amp; b[i].cap &gt; b[i].flow)</span><br><span class="line">            &#123;</span><br><span class="line">                dis[b[i].to] = dis[dq] + b[i].cost;</span><br><span class="line">                a[b[i].to] = <span class="built_in">min</span>(a[dq], b[i].cap - b[i].flow);</span><br><span class="line">                pre[b[i].to] = i;</span><br><span class="line">                <span class="keyword">if</span>(!inq[b[i].to])</span><br><span class="line">                    q.<span class="built_in">push</span>(b[i].to), inq[b[i].to] = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a[t];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cint zl = <span class="built_in">spfa</span>();</span><br><span class="line">    fans += zl;</span><br><span class="line">    <span class="keyword">for</span> (rint i = t; i != s; i = b[pre[i]].from)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (b[pre[i]].from &lt; <span class="number">90000</span> &amp;&amp; b[pre[i]].to == t)</span><br><span class="line">            dqch = b[pre[i]].from / MAXC;</span><br><span class="line">        b[pre[i]].flow += zl, b[<span class="built_in">rev</span>(pre[i])].flow -= zl;</span><br><span class="line">        ans += zl * b[pre[i]].cost;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dqch;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">qwq</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (rint i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    <span class="keyword">for</span> (rint j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">        <span class="built_in">adn</span>(<span class="built_in">ca</span>(j), <span class="built_in">bh</span>(i, cnt[i] + <span class="number">1</span>), <span class="number">1</span>, gg[i][j] * (cnt[i] + <span class="number">1</span>)), <span class="built_in">adn</span>(<span class="built_in">bh</span>(i, cnt[i] + <span class="number">1</span>), <span class="built_in">ca</span>(j), <span class="number">0</span>, -gg[i][j] * (cnt[i] + <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">        <span class="built_in">adn</span>(<span class="built_in">bh</span>(i, cnt[i] + <span class="number">1</span>), t, <span class="number">1</span>, <span class="number">0</span>), <span class="built_in">adn</span>(t, <span class="built_in">bh</span>(i, cnt[i] + <span class="number">1</span>), <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">/*for (rint i = 1; i &lt;= m; i++)</span></span><br><span class="line"><span class="comment">    for (rint j = 1; j &lt;= totp; j++)</span></span><br><span class="line"><span class="comment">        adn(bh(i, j), t, 1, 0), adn(t, bh(i, j), 0, 0);*/</span></span><br><span class="line">    <span class="keyword">while</span> (fans &lt; totp)</span><br><span class="line">    &#123;</span><br><span class="line">        cint i = <span class="built_in">solve</span>();</span><br><span class="line">        ++cnt[i];</span><br><span class="line">        <span class="keyword">for</span> (rint j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">            <span class="built_in">adn</span>(<span class="built_in">ca</span>(j), <span class="built_in">bh</span>(i, cnt[i] + <span class="number">1</span>), <span class="number">1</span>, gg[i][j] * (cnt[i] + <span class="number">1</span>)), <span class="built_in">adn</span>(<span class="built_in">bh</span>(i, cnt[i] + <span class="number">1</span>), <span class="built_in">ca</span>(j), <span class="number">0</span>, -gg[i][j] * (cnt[i] + <span class="number">1</span>));</span><br><span class="line">        <span class="built_in">adn</span>(<span class="built_in">bh</span>(i, cnt[i] + <span class="number">1</span>), t, <span class="number">1</span>, <span class="number">0</span>), <span class="built_in">adn</span>(t, <span class="built_in">bh</span>(i, cnt[i] + <span class="number">1</span>), <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    rint re = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="type">char</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (x &lt; <span class="string">&#x27;0&#x27;</span> || x &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">            f = <span class="number">-1</span>;</span><br><span class="line">        x = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (x &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; x &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">        re = (re &lt;&lt; <span class="number">1</span>) + (re &lt;&lt; <span class="number">3</span>) + x - <span class="string">&#x27;0&#x27;</span>, x = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">return</span> re * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(g, <span class="number">-1</span>, <span class="built_in">sizeof</span>(g));</span><br><span class="line"><span class="comment">//  scanf(&quot;%d%d&quot;, &amp;n, &amp;m);</span></span><br><span class="line">    n = <span class="built_in">read</span>(), m = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">for</span> (rint i = <span class="number">1</span>, srx; i &lt;= n; i++)</span><br><span class="line">        <span class="comment">/*scanf(&quot;%d&quot;, &amp;srx), */</span>srx = <span class="built_in">read</span>(), <span class="built_in">adn</span>(s, <span class="built_in">ca</span>(i), srx, <span class="number">0</span>), <span class="built_in">adn</span>(<span class="built_in">ca</span>(i), s, <span class="number">0</span>, <span class="number">0</span>), totp += srx;</span><br><span class="line">    <span class="keyword">for</span> (rint i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    <span class="keyword">for</span> (rint j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">        gg[j][i] = <span class="built_in">read</span>();</span><br><span class="line">    <span class="comment">//      scanf(&quot;%d&quot;, &amp;gg[j][i]);</span></span><br><span class="line">    <span class="built_in">qwq</span>();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">3 2</span></span><br><span class="line"><span class="comment">3 1 1</span></span><br><span class="line"><span class="comment">5 7</span></span><br><span class="line"><span class="comment">3 6</span></span><br><span class="line"><span class="comment">8 9</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>By 沙茶 Cansult</p>]]></content>
      
      
      <categories>
          
          <category> 翻车笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 翻车 </tag>
            
            <tag> 清奇脑回路 </tag>
            
            <tag> 网络流 </tag>
            
            <tag> 费用流 </tag>
            
            <tag> 动态加边 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记 点分治 [点分治, 树, 分治]</title>
      <link href="/posts/16668.html"/>
      <url>/posts/16668.html</url>
      
        <content type="html"><![CDATA[<p>又学了一种什么题都是模板的算法, 深感药丸</p><span id="more"></span><h2 id="沙茶的-点分治不详解">沙茶的 点分治不详解</h2><p>点分治, 可以用来找满足某种约束条件的路径的条数<spanclass="math inline">\(or\)</span>经过最多<spanclass="math inline">\(or\)</span>最少边的路径数等等</p><p>具体思想和实现起来就是计算和利用子树的计算来去重</p><p>我们考虑以当前节点为根的子树对答案的贡献:</p><ul><li>以当前节点为起点的路径组合的贡献</li><li>在当前节点子树中的路径的贡献 (不经过当前节点的路径的贡献,即忽略的路径 需要加上)</li><li>以某棵以<spanclass="math inline">\(x\)</span>节点为根的子树中不符合要求,而重复经过路径<span class="math inline">\(x \rightarrow dq \,\,\&amp;\&amp; \,\, dq \rightarrow x\)</span>后"符合要求"的路径(即需要去重的路径)</li></ul><p>这样就可以直接到子树中递归分治了</p><p>然而我们发现, 如果这样搞的话, 一些奇怪的数据可能把我们卡成<spanclass="math inline">\(n ^ 2\)</span>, 然而你不是AH-mhr,你没有高超的暴力技巧, 于是我们每次应该找树的重心,每次删除重心并递归重心的子树, 这样一次递归毕然会使节点数量减少一半,复杂度为<span class="math inline">\(\mathrm O(n\lg n\cdot\)</span>每次递归操作的复杂度<spanclass="math inline">\()\)</span></p><p>这玩意还是看代码比较得劲...</p><h2 id="沙茶一不小心水过的-超sb模板题">沙茶一不小心水过的超SB模板题</h2><h3 id="poj1741-tree"><a href="http://poj.org/problem?id=1741">poj1741Tree</a></h3><p>点分模板题, 没啥说的</p><ul><li>漏了<code>i &lt; j</code>WA了好几发...</li><li>不能只在<code>init_size()</code>之前<code>memset</code>一次<code>maxside</code>数组...耗时又大又会出问题...而是应该直接在每次递归到当前节点的时候就赋值为<code>0</code></li></ul><h3 id="沙茶的-代码">沙茶的 代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (10000 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF (0x7fffffff)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rev(a) ((((a) - 1) ^ 1) + 1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rint register int</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cint const int </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edg</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> from, to, next, cost;</span><br><span class="line">&#125; b[MAXN &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> g[MAXN], cntb, n, maxside[MAXN], size[MAXN], k, dis[MAXN];</span><br><span class="line"><span class="type">bool</span> vis[MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">adn</span><span class="params">(cint from, cint to, cint cost)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">b[++cntb].next = g[from];</span><br><span class="line">b[cntb].from = from;</span><br><span class="line">b[cntb].to = to;</span><br><span class="line">b[cntb].cost = cost;</span><br><span class="line">g[from] = cntb;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(cint)</span></span>; <span class="comment">// to solve the problem</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cal</span><span class="params">(cint, cint)</span></span>; <span class="comment">// to calculate the number of road in the tree</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init_size</span><span class="params">(cint, cint)</span></span>; <span class="comment">// to init the size of each node&#x27;s son-tree</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs_root</span><span class="params">(cint, cint, cint)</span></span>; <span class="comment">// to init the maxside of each node and return the root of the tree</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getroot</span><span class="params">(cint)</span></span>; <span class="comment">// to work those faction</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs_dis</span><span class="params">(cint)</span></span>; <span class="comment">// to init the distance from node to root</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;k);</span><br><span class="line"><span class="keyword">if</span> (!n &amp;&amp; !k)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="built_in">init</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">dfs</span>(<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cntb = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(g, <span class="number">0</span>, <span class="built_in">sizeof</span>(g));</span><br><span class="line"><span class="built_in">memset</span>(vis, <span class="literal">false</span>, <span class="built_in">sizeof</span>(vis));</span><br><span class="line"><span class="keyword">for</span> (rint i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> srx, sry, srz;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;srx, &amp;sry, &amp;srz);</span><br><span class="line"><span class="built_in">adn</span>(srx, sry, srz);</span><br><span class="line"><span class="built_in">adn</span>(sry, srx, srz);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(cint dq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cint root = <span class="built_in">getroot</span>(dq);</span><br><span class="line">vis[root] = <span class="literal">true</span>;</span><br><span class="line"><span class="type">int</span> re = <span class="built_in">cal</span>(root, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (rint i = g[root]; i; i = b[i].next)</span><br><span class="line"><span class="keyword">if</span> (!vis[b[i].to])</span><br><span class="line">&#123;</span><br><span class="line">re -= <span class="built_in">cal</span>(b[i].to, b[i].cost);</span><br><span class="line">re += <span class="built_in">dfs</span>(b[i].to);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">getroot</span><span class="params">(cint dq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">init_size</span>(dq, dq);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">dfs_root</span>(dq, dq, dq);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init_size</span><span class="params">(cint dq, cint fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">size[dq] = <span class="number">1</span>;</span><br><span class="line">maxside[dq] = <span class="number">0</span>; <span class="comment">// 这个地方直接赋为0就好了</span></span><br><span class="line"><span class="keyword">for</span> (rint i = g[dq]; i; i = b[i].next)</span><br><span class="line"><span class="keyword">if</span> (b[i].to != fa &amp;&amp; !vis[b[i].to])</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">init_size</span>(b[i].to, dq);</span><br><span class="line">maxside[dq] = <span class="built_in">max</span>(maxside[dq], size[b[i].to]);</span><br><span class="line">size[dq] += size[b[i].to];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs_root</span><span class="params">(cint dq, cint fa, cint root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> minsonside = n, re = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (rint i = g[dq]; i; i = b[i].next)</span><br><span class="line"><span class="keyword">if</span> (b[i].to != fa &amp;&amp; !vis[b[i].to])</span><br><span class="line">&#123;</span><br><span class="line">rint t = <span class="built_in">dfs_root</span>(b[i].to, dq, root);</span><br><span class="line"><span class="keyword">if</span> (maxside[t] &lt; minsonside)</span><br><span class="line">minsonside = maxside[t], re = t;</span><br><span class="line">&#125;</span><br><span class="line">maxside[dq] = <span class="built_in">max</span>(maxside[dq], size[root] - size[dq]);</span><br><span class="line"><span class="keyword">if</span> (minsonside &gt; maxside[dq])</span><br><span class="line">re = dq;</span><br><span class="line"><span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs_dis</span><span class="params">(cint dq, cint fa, cint dqdis)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">dis[++dis[<span class="number">0</span>]] = dqdis;</span><br><span class="line"><span class="keyword">for</span> (rint i = g[dq]; i; i = b[i].next)</span><br><span class="line"><span class="keyword">if</span> (!vis[b[i].to] &amp;&amp; b[i].to != fa)</span><br><span class="line"><span class="built_in">dfs_dis</span>(b[i].to, dq, dqdis + b[i].cost);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">cal</span><span class="params">(cint dq, cint fir)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> re = <span class="number">0</span>;</span><br><span class="line">dis[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">dfs_dis</span>(dq, dq, fir);</span><br><span class="line"><span class="built_in">sort</span>(dis + <span class="number">1</span>, dis + dis[<span class="number">0</span>] + <span class="number">1</span>);</span><br><span class="line">rint j = dis[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (rint i = <span class="number">1</span>; i &lt; j; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (dis[j] + dis[i] &gt; k &amp;&amp; i &lt; j)--j; <span class="comment">// i &lt; j 不能漏了... </span></span><br><span class="line">re += j - i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">5 4</span></span><br><span class="line"><span class="comment">1 2 3</span></span><br><span class="line"><span class="comment">1 3 1</span></span><br><span class="line"><span class="comment">1 4 2</span></span><br><span class="line"><span class="comment">3 5 1</span></span><br><span class="line"><span class="comment">0 0</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="聪聪可可"><ahref="https://www.luogu.org/problemnew/show/P2634">聪聪可可</a></h3><p>也是裸题吧...据说有dp做法就跟着写了一发,我一开始胡的dp和点分治差不多,然后一直WA...也不知道为啥...后来看远古神犇blog,改成po姐的写法...过了...<del>我感觉其实差不多啊,有没有人愿意来看看啊qwqwqwqwq</del></p><p>细节就是一开始写点分治的时候忘了如果两条膜3为0的路径加起来路径和膜3也是0...调了好半天才过的样例...</p><p>还有就是一条路径可以正反选两遍非常恶心...</p><h3 id="沙茶的-代码-1">沙茶的 代码</h3><h4 id="点分治写法">点分治写法</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (20000 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edg</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> from, to, next, cost;</span><br><span class="line">&#125;b[MAXN &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> g[MAXN], cntb, dis[MAXN], maxside[MAXN], size[MAXN], n;</span><br><span class="line"><span class="type">bool</span> vis[MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">adn</span><span class="params">(<span class="type">int</span> from, <span class="type">int</span> to, <span class="type">int</span> cost)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    b[++cntb].next = g[from];</span><br><span class="line">    b[cntb].from = from;</span><br><span class="line">    b[cntb].to = to;</span><br><span class="line">    b[cntb].cost = cost;</span><br><span class="line">    g[from] = cntb;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="keyword">return</span> (b ? <span class="built_in">gcd</span>(b, a % b) : a); &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init_size</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs_root</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getroot</span><span class="params">(<span class="type">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs_dis</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cal</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// freopen(&quot;in.in&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line">    <span class="built_in">memset</span>(vis, <span class="literal">false</span>, <span class="built_in">sizeof</span>(vis));</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> srx, sry, srz;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;srx, &amp;sry, &amp;srz);</span><br><span class="line">        <span class="built_in">adn</span>(srx, sry, srz);</span><br><span class="line">        <span class="built_in">adn</span>(sry, srx, srz);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> upside = <span class="built_in">dfs</span>(<span class="number">1</span>), downside = n * n, ta = <span class="built_in">gcd</span>(upside, downside);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d/%d&quot;</span>, upside / ta, downside / ta);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> dq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> root = <span class="built_in">getroot</span>(dq);</span><br><span class="line">    vis[root] = <span class="literal">true</span>;</span><br><span class="line">    <span class="type">int</span> re = <span class="built_in">cal</span>(root, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = g[root]; i; i = b[i].next)</span><br><span class="line">        <span class="keyword">if</span> (!vis[b[i].to])</span><br><span class="line">        &#123;</span><br><span class="line">            re -= <span class="built_in">cal</span>(b[i].to, b[i].cost);</span><br><span class="line">            re += <span class="built_in">dfs</span>(b[i].to);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getroot</span><span class="params">(<span class="type">int</span> dq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">init_size</span>(dq, dq);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">dfs_root</span>(dq, dq, dq);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init_size</span><span class="params">(<span class="type">int</span> dq, <span class="type">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    size[dq] = <span class="number">1</span>, maxside[dq] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = g[dq]; i; i = b[i].next)</span><br><span class="line">        <span class="keyword">if</span> (b[i].to != fa &amp;&amp; !vis[b[i].to])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">init_size</span>(b[i].to, dq);</span><br><span class="line">            size[dq] += size[b[i].to];</span><br><span class="line">            maxside[dq] = <span class="built_in">max</span>(maxside[dq], size[b[i].to]);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs_root</span><span class="params">(<span class="type">int</span> dq, <span class="type">int</span> fa, <span class="type">int</span> root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> re, minsonside = n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = g[dq]; i; i = b[i].next)</span><br><span class="line">        <span class="keyword">if</span> (b[i].to != fa &amp;&amp; !vis[b[i].to])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> t = <span class="built_in">dfs_root</span>(b[i].to, dq, root);</span><br><span class="line">            <span class="keyword">if</span> (maxside[t] &lt; minsonside)</span><br><span class="line">                re = t, minsonside = maxside[t];</span><br><span class="line">        &#125;</span><br><span class="line">    maxside[dq] = <span class="built_in">max</span>(maxside[dq], size[root] - size[dq]);</span><br><span class="line">    <span class="keyword">if</span> (maxside[dq] &lt; minsonside)</span><br><span class="line">        re = dq;</span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs_dis</span><span class="params">(<span class="type">int</span> dq, <span class="type">int</span> fa, <span class="type">int</span> dqdis)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dis[++dis[<span class="number">0</span>]] = dqdis;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = g[dq]; i; i = b[i].next)</span><br><span class="line">        <span class="keyword">if</span> (b[i].to != fa &amp;&amp; !vis[b[i].to])</span><br><span class="line">            <span class="built_in">dfs_dis</span>(b[i].to, dq, dqdis + b[i].cost);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cal</span><span class="params">(<span class="type">int</span> dq, <span class="type">int</span> fir)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dis[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">dfs_dis</span>(dq, dq, fir);</span><br><span class="line">    <span class="type">int</span> num[<span class="number">3</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= dis[<span class="number">0</span>]; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        dis[i] %= <span class="number">3</span>;</span><br><span class="line">        ++num[dis[i]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ((num[<span class="number">1</span>] * num[<span class="number">2</span>]) &lt;&lt; <span class="number">1</span>) + num[<span class="number">0</span>] * num[<span class="number">0</span>]; <span class="comment">// 别忘了膜3为0的路径也可以组成合法路径</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">1 2 1</span></span><br><span class="line"><span class="comment">1 3 2</span></span><br><span class="line"><span class="comment">1 4 1</span></span><br><span class="line"><span class="comment">2 5 3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="dp写法">dp写法</h4><h5 id="ac">AC</h5><p>用dp写果然短了不少</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (20000 + 5)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edg</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> from, to, next, cost;</span><br><span class="line">&#125;b[MAXN &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> g[MAXN], cntb, dis[MAXN][<span class="number">3</span>], fa[MAXN], n, ans; <span class="comment">// f[i][x]: 当前在节点i, 到根的距离 % 3为x的方案数, f[i][1] = dis[dq][1] * f[son][0] - f[son][1 - cost] emmmm</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">adn</span><span class="params">(<span class="type">int</span> from, <span class="type">int</span> to, <span class="type">int</span> cost)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    b[++cntb].next = g[from];</span><br><span class="line">    b[cntb].from = from;</span><br><span class="line">    b[cntb].to = to;</span><br><span class="line">    b[cntb].cost = cost;</span><br><span class="line">    g[from] = cntb;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// f[i][1] = dis[dq][1] * dis[dq][0] - f[son][1 - cost] + f[son][cost]</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> dq)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="comment">// dis[dq][i]: 在以dq节点为根的子树中, 有dis[dq][i]条以dq为起点的路径长度为i </span></span><br><span class="line">    dis[dq][<span class="number">1</span>] = dis[dq][<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">    dis[dq][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = g[dq]; i; i = b[i].next)</span><br><span class="line">        <span class="keyword">if</span> (fa[dq] != b[i].to)</span><br><span class="line">        &#123;</span><br><span class="line">            fa[b[i].to] = dq;</span><br><span class="line">            <span class="built_in">dfs</span>(b[i].to);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">            &#123; <span class="comment">// j + x + b[i].cost = 0 -&gt; x = </span></span><br><span class="line">                ans += dis[dq][j] * dis[b[i].to][(-((b[i].cost) % <span class="number">3</span>) - j + <span class="number">6</span>) % <span class="number">3</span>];</span><br><span class="line">                dis[dq][j] += dis[b[i].to][(j + <span class="number">3</span> - (b[i].cost % <span class="number">3</span>)) % <span class="number">3</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="keyword">return</span> (b ? <span class="built_in">gcd</span>(b, a % b) : a); &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// freopen(&quot;in.in&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> srx, sry, srz;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;srx, &amp;sry, &amp;srz);</span><br><span class="line">        <span class="built_in">adn</span>(srx, sry, srz);</span><br><span class="line">        <span class="built_in">adn</span>(sry, srx, srz);</span><br><span class="line">    &#125;</span><br><span class="line">    fa[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line">    ans = ans * <span class="number">2</span> + n;</span><br><span class="line">    <span class="type">int</span> ta = <span class="built_in">gcd</span>(ans, n * n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d/%d&quot;</span>, ans / ta, n * n / ta);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">1 2 1</span></span><br><span class="line"><span class="comment">1 3 2</span></span><br><span class="line"><span class="comment">1 4 1</span></span><br><span class="line"><span class="comment">2 5 3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h5 id="wa">WA</h5><p>蜜汁WA了...qwqwqwqwqwq有人愿意看看嘛 /kel</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (20000 + 5)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edg</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> from, to, next, cost;</span><br><span class="line">&#125;b[MAXN &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> g[MAXN], cntb, f[MAXN][<span class="number">3</span>], dis[MAXN][<span class="number">3</span>], fa[MAXN], n; <span class="comment">// f[i][x]: 当前在节点i, 到根的距离 % 3为x的方案数, f[i][1] = dis[dq][1] * f[son][0] - f[son][1 - cost] emmmm</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">adn</span><span class="params">(<span class="type">int</span> from, <span class="type">int</span> to, <span class="type">int</span> cost)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    b[++cntb].next = g[from];</span><br><span class="line">    b[cntb].from = from;</span><br><span class="line">    b[cntb].to = to;</span><br><span class="line">    b[cntb].cost = cost;</span><br><span class="line">    g[from] = cntb;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// f[i][1] = dis[dq][1] * dis[dq][0] - f[son][1 - cost] + f[son][cost]</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> dq)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">// f[dq][i]: 在以dq节点为根的子树中, 有f[dq][i]条路径长度为i</span></span><br><span class="line"><span class="comment">// dis[dq][i]: 在以dq节点为根的子树中, 有dis[dq][i]条以dq为起点的路径长度为i </span></span><br><span class="line">    dis[dq][<span class="number">1</span>] = dis[dq][<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">    dis[dq][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = g[dq]; i; i = b[i].next)</span><br><span class="line">        <span class="keyword">if</span> (fa[dq] != b[i].to)</span><br><span class="line">        &#123;</span><br><span class="line">            fa[b[i].to] = dq;</span><br><span class="line">            <span class="built_in">dfs</span>(b[i].to);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">                dis[dq][j] += dis[b[i].to][(j + <span class="number">3</span> - (b[i].cost % <span class="number">3</span>)) % <span class="number">3</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    f[dq][<span class="number">1</span>] = dis[dq][<span class="number">1</span>] * dis[dq][<span class="number">0</span>] + dis[dq][<span class="number">2</span>] * (dis[dq][<span class="number">2</span>] - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">    f[dq][<span class="number">2</span>] = dis[dq][<span class="number">2</span>] * dis[dq][<span class="number">0</span>] + dis[dq][<span class="number">1</span>] * (dis[dq][<span class="number">1</span>] - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">    f[dq][<span class="number">0</span>] = dis[dq][<span class="number">0</span>] * (dis[dq][<span class="number">0</span>] - <span class="number">1</span>) / <span class="number">2</span> + dis[dq][<span class="number">1</span>] * dis[dq][<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = g[dq]; i; i = b[i].next)</span><br><span class="line">        <span class="keyword">if</span> (fa[dq] != b[i].to)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                f[dq][j] -= f[b[i].to][(j + <span class="number">3</span> - (b[i].cost % <span class="number">3</span>)) % <span class="number">3</span>];</span><br><span class="line">                f[dq][j] += f[b[i].to][j];</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="keyword">return</span> (b ? <span class="built_in">gcd</span>(b, a % b) : a); &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// freopen(&quot;in.in&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> srx, sry, srz;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;srx, &amp;sry, &amp;srz);</span><br><span class="line">        <span class="built_in">adn</span>(srx, sry, srz);</span><br><span class="line">        <span class="built_in">adn</span>(sry, srx, srz);</span><br><span class="line">    &#125;</span><br><span class="line">    fa[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line">    f[<span class="number">1</span>][<span class="number">0</span>] = f[<span class="number">1</span>][<span class="number">0</span>] * <span class="number">2</span> + n;</span><br><span class="line">    <span class="type">int</span> ta = <span class="built_in">gcd</span>(f[<span class="number">1</span>][<span class="number">0</span>], n * n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d/%d&quot;</span>, f[<span class="number">1</span>][<span class="number">0</span>] / ta, n * n / ta);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">1 2 1</span></span><br><span class="line"><span class="comment">1 3 2</span></span><br><span class="line"><span class="comment">1 4 1</span></span><br><span class="line"><span class="comment">2 5 3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="race"><ahref="https://www.luogu.org/problemnew/show/P4149">Race</a></h3><h3 id="沙茶的-代码-2">沙茶的 代码</h3><p>犯了一些sb错误...比如</p><ul><li>递归找根没有记录返回的根(?????)直接把<code>b[i].to</code>当成子树的根了(????)...</li><li>计算<code>maxside</code>数组居然用<code>size[root] - maxside[dq]</code>,应该是<code>size[root] - size[dq]</code></li><li>计算<code>cnt</code>的时候把<code>i</code>和<code>j</code>全写成了<code>i</code>...</li><li>在子树中计算去重的时候没有考虑到初始的时候来回已经经过了两条边,也就是要从2开始计算边数</li></ul><p>然后你就有95分辣! IOI的题95分是不是很激动?</p><p>一开始以为是哪里的细节出了问题, 静态查了半天 + 胡乱搞反例都没啥用,最后还是看了po爷爷的blog...</p><p>还有一个问题...其实你的算法整个都是有问题的...</p><p>就是...可能会出现<code>dis</code>数组相等的问题,所以不能直接移动<code>j</code>指针; 而是应该对于每一个<code>i</code>,都备份一个<code>j</code>并移动, 对于下一个<code>i</code>从头开始判断,复杂度...不是很懂...不过大概不是<span class="math inline">\(\mathrmO(n)\)</span> 吧...</p><p>最后....卡常让人怀疑人生...最后bzoj还是没过...不过某谷还是能过的...</p><p>又: 某谷上这个题...是黑的...被我用三个小号...刷成紫题了...Emmm...<del>你们加油把他搞成红的啊</del></p><h4 id="卡常前">卡常前</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (2000000 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF (0x7fffffff)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cint const int </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rint register int</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edg</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> from, to, next, cost;</span><br><span class="line">&#125;b[MAXN &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> g[MAXN], cntb, n, k, ans = <span class="number">-1</span>, totdis, maxside[MAXN], size[MAXN], cnt[MAXN], dis0;</span><br><span class="line">pii dis[MAXN];</span><br><span class="line"><span class="type">bool</span> vis[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">adn</span><span class="params">(<span class="type">int</span> from, <span class="type">int</span> to, <span class="type">int</span> cost)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    b[++cntb].next = g[from];</span><br><span class="line">    b[cntb].from = from;</span><br><span class="line">    b[cntb].to = to;</span><br><span class="line">    b[cntb].cost = cost;</span><br><span class="line">    g[from] = cntb;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    rint re = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line">    <span class="type">char</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (x &lt; <span class="string">&#x27;0&#x27;</span> || x &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> ((x = <span class="built_in">getchar</span>()) == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">            f = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span> (x &lt;= <span class="string">&#x27;9&#x27;</span> &amp;&amp; x &gt;= <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        re = (re &lt;&lt; <span class="number">1</span>) + (re &lt;&lt; <span class="number">3</span>) + x - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        x = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> re * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">cal</span><span class="params">(cint, cint, cint, cint)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs_dis</span><span class="params">(cint, cint, cint, cint)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">get_root</span><span class="params">(cint)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs_root</span><span class="params">(cint, cint, cint)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init_size</span><span class="params">(cint, cint)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(cint)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//freopen(&quot;ioi2011-race.out&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line"><span class="comment">//freopen(&quot;in.in&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line">    <span class="built_in">memset</span>(vis, <span class="literal">false</span>, <span class="built_in">sizeof</span>(vis));</span><br><span class="line"><span class="comment">//scanf(&quot;%d%d&quot;, &amp;n, &amp;k);</span></span><br><span class="line">    n = <span class="built_in">read</span>(), k = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line"><span class="comment">//int srx, sry, srz;</span></span><br><span class="line">        <span class="type">int</span> srx = <span class="built_in">read</span>(), sry = <span class="built_in">read</span>(), srz = <span class="built_in">read</span>();</span><br><span class="line"><span class="comment">//scanf(&quot;%d%d%d&quot;, &amp;srx, &amp;sry, &amp;srz);</span></span><br><span class="line">        ++srx, ++sry;</span><br><span class="line">        <span class="built_in">adn</span>(srx, sry, srz);</span><br><span class="line">        <span class="built_in">adn</span>(sry, srx, srz);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n &amp;&amp; ans == <span class="number">-1</span>; i++)</span><br><span class="line">        <span class="keyword">if</span> (cnt[i] &gt; <span class="number">0</span>)</span><br><span class="line">            ans = i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> dq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> root = <span class="built_in">get_root</span>(dq);</span><br><span class="line">    vis[root] = <span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">cal</span>(root, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = g[root]; i; i = b[i].next)</span><br><span class="line">        <span class="keyword">if</span> (!vis[b[i].to])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cal</span>(b[i].to, b[i].cost, <span class="number">-1</span>, <span class="number">2</span>); <span class="comment">// 如果是以b[i].to为根的链...是不是要改wa为1啊... 不是 </span></span><br><span class="line">            <span class="built_in">dfs</span>(b[i].to);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">get_root</span><span class="params">(cint dq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">init_size</span>(dq, dq);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">dfs_root</span>(dq, dq, dq);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init_size</span><span class="params">(cint dq, cint fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    maxside[dq] = <span class="number">0</span>;</span><br><span class="line">    size[dq] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = g[dq]; i; i = b[i].next)</span><br><span class="line">        <span class="keyword">if</span> (!vis[b[i].to] &amp;&amp; b[i].to != fa)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">init_size</span>(b[i].to, dq);</span><br><span class="line">            maxside[dq] = <span class="built_in">max</span>(maxside[dq], size[b[i].to]);</span><br><span class="line">            size[dq] += size[b[i].to];</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs_root</span><span class="params">(cint dq, cint fa, cint root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> re, minmaxside = n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = g[dq]; i; i = b[i].next)</span><br><span class="line">        <span class="keyword">if</span> (!vis[b[i].to] &amp;&amp; b[i].to != fa)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> t = <span class="built_in">dfs_root</span>(b[i].to, dq, root); <span class="comment">// 犯了奇奇怪怪的错误...这里没有记录t...gg </span></span><br><span class="line">            <span class="keyword">if</span> (maxside[t] &lt; minmaxside)</span><br><span class="line">                re = t, minmaxside = maxside[t];</span><br><span class="line">        &#125;</span><br><span class="line">    maxside[dq] = <span class="built_in">max</span>(maxside[dq], size[root] - size[dq]); <span class="comment">// 这里减的是size...不是maxside...日益zz</span></span><br><span class="line">    <span class="keyword">if</span> (maxside[dq] &lt; minmaxside)</span><br><span class="line">        re = dq;</span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs_dis</span><span class="params">(cint dq, cint fa, cint dqdis, cint way)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dis[++dis0] = <span class="built_in">make_pair</span>(dqdis, way);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = g[dq]; i; i = b[i].next)</span><br><span class="line">        <span class="keyword">if</span> (b[i].to != fa &amp;&amp; !vis[b[i].to])</span><br><span class="line">            <span class="built_in">dfs_dis</span>(b[i].to, dq, dqdis + b[i].cost, way + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">cal</span><span class="params">(cint dq, cint fir, cint zh, cint wa)</span> <span class="comment">// wa: 记录初始有几条边 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dis0 = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">dfs_dis</span>(dq, dq, fir, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">sort</span>(dis + <span class="number">1</span>, dis + dis0 + <span class="number">1</span>);</span><br><span class="line">    <span class="type">int</span> j = dis0;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; j; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (dis[i].first + dis[j].first &gt; k &amp;&amp; i &lt; j)--j;</span><br><span class="line">        <span class="type">int</span> last = j;</span><br><span class="line">        <span class="keyword">while</span> (dis[i].first + dis[last].first == k &amp;&amp; i &lt; last)</span><br><span class="line">        &#123;</span><br><span class="line">            cnt[dis[i].second + dis[last].second + wa] += zh; <span class="comment">// 这个地方把i写成j了... </span></span><br><span class="line">            --last;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">4 3</span></span><br><span class="line"><span class="comment">0 1 1</span></span><br><span class="line"><span class="comment">1 2 2</span></span><br><span class="line"><span class="comment">1 3 4</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="卡常后">卡常后</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (200000 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF (0x7fffffff)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cint const int </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rint register int</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> max(a, b) ((a) &gt; (b) ? (a) : (b))</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(3)</span></span><br><span class="line"><span class="comment">//#define getchar() (S == T &amp;&amp; (T = (S = BB) + fread(BB, 1, MAXN &lt;&lt; 5, stdin), S == T) ? EOF : *S++)</span></span><br><span class="line"><span class="comment">//char BB[MAXN * 20], *S = BB, *T = BB;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> to[MAXN &lt;&lt; <span class="number">1</span>], next[MAXN &lt;&lt; <span class="number">1</span>], cost[MAXN &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> g[MAXN], cntb, n, k, ans = <span class="number">-1</span>, totdis, maxside[MAXN], size[MAXN], cnt[MAXN], dis0;</span><br><span class="line">pii dis[MAXN];</span><br><span class="line"><span class="type">bool</span> vis[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">adn</span><span class="params">(cint fro, cint t, cint co)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    next[++cntb] = g[fro];</span><br><span class="line">    to[cntb] = t;</span><br><span class="line">    cost[cntb] = co;</span><br><span class="line">    g[fro] = cntb;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">char</span> <span class="title">gc</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">char</span> BUFF[<span class="number">1000000</span>],*S=BUFF,*T=BUFF;</span><br><span class="line">    <span class="keyword">return</span> S==T&amp;&amp;(T=(S=BUFF)+<span class="built_in">fread</span>(BUFF,<span class="number">1</span>,<span class="number">1000000</span>,stdin),S==T)?EOF:*S++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>,c=<span class="number">1</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    <span class="keyword">while</span>((ch&gt;<span class="string">&#x27;9&#x27;</span>||ch&lt;<span class="string">&#x27;0&#x27;</span>)&amp;&amp;ch!=<span class="string">&#x27;-&#x27;</span>)ch=<span class="built_in">gc</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch==<span class="string">&#x27;-&#x27;</span>)c*=<span class="number">-1</span>,ch=<span class="built_in">gc</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;ch&gt;=<span class="string">&#x27;0&#x27;</span>)x=x*<span class="number">10</span>+ch-<span class="string">&#x27;0&#x27;</span>,ch=<span class="built_in">gc</span>();</span><br><span class="line">    <span class="keyword">return</span> x*c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">cal</span><span class="params">(cint, cint, cint, cint)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs_dis</span><span class="params">(cint, cint, cint, cint)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">get_root</span><span class="params">(cint)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs_root</span><span class="params">(cint, cint, cint)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init_size</span><span class="params">(cint, cint)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(cint)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//freopen(&quot;in.in&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line"><span class="comment">//scanf(&quot;%d%d&quot;, &amp;n, &amp;k);</span></span><br><span class="line">    n = <span class="built_in">read</span>(), k = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">for</span> (rint i = <span class="number">1</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line"><span class="comment">//int srx, sry, srz;</span></span><br><span class="line">        rint srx = <span class="built_in">read</span>(), sry = <span class="built_in">read</span>(), srz = <span class="built_in">read</span>();</span><br><span class="line"><span class="comment">//scanf(&quot;%d%d%d&quot;, &amp;srx, &amp;sry, &amp;srz);</span></span><br><span class="line">        ++srx, ++sry;</span><br><span class="line">        <span class="built_in">adn</span>(srx, sry, srz);</span><br><span class="line">        <span class="built_in">adn</span>(sry, srx, srz);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (rint i = <span class="number">0</span>; i &lt; n &amp;&amp; ans == <span class="number">-1</span>; ++i)</span><br><span class="line">        <span class="keyword">if</span> (cnt[i] &gt; <span class="number">0</span>)</span><br><span class="line">            ans = i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(cint dq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cint root = <span class="built_in">get_root</span>(dq);</span><br><span class="line">    vis[root] = <span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">cal</span>(root, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (rint i = g[root]; i; i = next[i])</span><br><span class="line">        <span class="keyword">if</span> (!vis[to[i]])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cal</span>(to[i], cost[i], <span class="number">-1</span>, <span class="number">2</span>); <span class="comment">// 如果是以b[i].to为根的链...是不是要改wa为1啊... 然而不是 </span></span><br><span class="line">            <span class="built_in">dfs</span>(to[i]);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">get_root</span><span class="params">(cint dq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">init_size</span>(dq, dq);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">dfs_root</span>(dq, dq, dq);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init_size</span><span class="params">(cint dq, cint fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    maxside[dq] = <span class="number">0</span>;</span><br><span class="line">    size[dq] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (rint i = g[dq]; i; i = next[i])</span><br><span class="line">        <span class="keyword">if</span> (!vis[to[i]] &amp;&amp; to[i] != fa)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">init_size</span>(to[i], dq);</span><br><span class="line">            maxside[dq] = <span class="built_in">max</span>(maxside[dq], size[to[i]]);</span><br><span class="line">            size[dq] += size[to[i]];</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs_root</span><span class="params">(cint dq, cint fa, cint root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    rint re, minmaxside = n;</span><br><span class="line">    <span class="keyword">for</span> (rint i = g[dq]; i; i = next[i])</span><br><span class="line">        <span class="keyword">if</span> (!vis[to[i]] &amp;&amp; to[i] != fa)</span><br><span class="line">        &#123;</span><br><span class="line">            cint t = <span class="built_in">dfs_root</span>(to[i], dq, root); <span class="comment">// 犯了奇奇怪怪的错误...这里没有记录t...gg </span></span><br><span class="line">            <span class="keyword">if</span> (maxside[t] &lt; minmaxside)</span><br><span class="line">                re = t, minmaxside = maxside[t];</span><br><span class="line">        &#125;</span><br><span class="line">    maxside[dq] = <span class="built_in">max</span>(maxside[dq], size[root] - size[dq]); <span class="comment">// 这里减的是size...不是maxside...日益zz</span></span><br><span class="line">    <span class="keyword">if</span> (maxside[dq] &lt; minmaxside)</span><br><span class="line">        re = dq;</span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs_dis</span><span class="params">(cint dq, cint fa, cint dqdis, cint way)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dis[++dis0] = <span class="built_in">make_pair</span>(dqdis, way);</span><br><span class="line">    <span class="keyword">for</span> (rint i = g[dq]; i; i = next[i])</span><br><span class="line">        <span class="keyword">if</span> (to[i] != fa &amp;&amp; !vis[to[i]])</span><br><span class="line">            <span class="built_in">dfs_dis</span>(to[i], dq, dqdis + cost[i], way + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">cal</span><span class="params">(cint dq, cint fir, cint zh, cint wa)</span> <span class="comment">// wa: 记录初始有几条边 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dis0 = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">dfs_dis</span>(dq, dq, fir, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">sort</span>(dis + <span class="number">1</span>, dis + dis0 + <span class="number">1</span>);</span><br><span class="line">    rint j = dis0;</span><br><span class="line">    <span class="keyword">for</span> (rint i = <span class="number">1</span>; i &lt; j; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (dis[i].first + dis[j].first &gt; k &amp;&amp; i &lt; j)--j;</span><br><span class="line">        rint last = j; <span class="comment">// 注意这个地方的lasst非常得劲, 你可能会出现两个数相等的情况草草草 </span></span><br><span class="line">        <span class="keyword">while</span> (dis[i].first + dis[last].first == k &amp;&amp; i &lt; last)</span><br><span class="line">        &#123;</span><br><span class="line">            cnt[dis[i].second + dis[last].second + wa] += zh; <span class="comment">// 这个地方把i写成j了... </span></span><br><span class="line">            --last;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">4 3</span></span><br><span class="line"><span class="comment">0 1 1</span></span><br><span class="line"><span class="comment">1 2 2</span></span><br><span class="line"><span class="comment">1 3 4</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>感觉文化课彻底凉了...</p><p>By 吃枣药丸的 Cansult</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 点分治 </tag>
            
            <tag> 树 </tag>
            
            <tag> 分治 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>翻车笔记 XIZ [KMP, 清奇脑回路]</title>
      <link href="/posts/2911.html"/>
      <url>/posts/2911.html</url>
      
        <content type="html"><![CDATA[<p>HN的大爷们都太强了Orzzzzzzzz</p><span id="more"></span><h3 id="懵逼的-题目">懵逼的 题目</h3><h4 id="看不懂的-描述">看不懂的 描述</h4><p>给两个串(长度<span class="math inline">\(n, m &lt;= 10 ^ 6\)</span>),字符集为<span class="math inline">\(c &lt;= 10 ^ 6\)</span></p><p>每次可以钦定字符与字符的相等关系, 求最多有多少匹配,并输出匹配的位置</p><h5 id="总是输错的-读入">总是输错的 读入</h5><p>第一行两个数, 一个数据组数, 一个字符集的大小</p><p>每一组数据一行两个数, <span class="math inline">\(m, n\)</span>,代表字符串长度</p><p>一行<span class="math inline">\(n\)</span>个数, 代表串<spanclass="math inline">\(s\)</span>, 下一行<spanclass="math inline">\(m\)</span>个数, 代表串<spanclass="math inline">\(t\)</span></p><h5 id="输了也wa的-输出">输了也WA的 输出</h5><p>一行一个整数<span class="math inline">\(ans\)</span>代表<spanclass="math inline">\(t\)</span>在<spanclass="math inline">\(s\)</span>中能匹配的次数</p><p>一行<span class="math inline">\(ans\)</span>个整数代表匹配的开头</p><h4 id="算不出的-样例">算不出的 样例</h4><h5 id="input">input</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">3 3</span><br><span class="line">6 3</span><br><span class="line">1 2 1 2 3 2</span><br><span class="line">3 1 3</span><br><span class="line">6 3</span><br><span class="line">1 2 1 2 1 2</span><br><span class="line">3 1 3</span><br><span class="line">6 3</span><br><span class="line">1 1 2 1 2 1</span><br><span class="line">3 1 3</span><br></pre></td></tr></table></figure><h5 id="output">output</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">1 2 4</span><br><span class="line">4</span><br><span class="line">1 2 3 4</span><br><span class="line">3</span><br><span class="line">2 3 4</span><br></pre></td></tr></table></figure><h5 id="样例解释">样例解释</h5><p>题目太难懂了... 比如说串<span class="math inline">\(112121\)</span>,和串<span class="math inline">\(313\)</span>...</p><ul><li>第一次匹配 我钦定 <span class="math inline">\(1 = 3, 2 = 1\)</span>,所以匹配到了<span class="math inline">\(121\)</span>, 也就是第二个</li><li>第二次匹配 我钦定 <span class="math inline">\(2 = 3, 1 = 1\)</span>,所以匹配到了<span class="math inline">\(212\)</span>, 也就是第三个</li><li>第三次匹配 我钦定 <span class="math inline">\(1 = 3, 2 = 1\)</span>,所以匹配到了<span class="math inline">\(121\)</span>, 也就是第四个</li></ul><h3 id="扯淡的-题解">扯淡的 题解</h3><p>不会 这题不会</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">直接 hash 就可以了 ...</span><br><span class="line">优美一点的做法是 KMP. 记每个字符的前一个字符距离自己的距离为 w_i, 如果两个串的 w 数组相等, 则可以匹配. 预处理出 w 就可以用 KMP 了.</span><br></pre></td></tr></table></figure><p>考完看了看题解...Emmmmm好像很有趣...</p><p>然后写写写...发现...woc怎么样例不对啊...</p><p>按照题解预处理样例第一组的<code>w</code>:</p><table><thead><tr class="header"><th style="text-align: center;">gg</th><th style="text-align: center;">1</th><th style="text-align: center;">2</th><th style="text-align: center;">3</th><th style="text-align: center;">4</th><th style="text-align: center;">5</th><th style="text-align: center;">6</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">S</td><td style="text-align: center;">0</td><td style="text-align: center;">0</td><td style="text-align: center;">2</td><td style="text-align: center;">2</td><td style="text-align: center;">0</td><td style="text-align: center;">2</td></tr><tr class="even"><td style="text-align: center;">T</td><td style="text-align: center;">0</td><td style="text-align: center;">0</td><td style="text-align: center;">2</td><td style="text-align: center;"></td><td style="text-align: center;"></td><td style="text-align: center;"></td></tr></tbody></table><p>woc这匹配个卵啊(摔!</p><p><imgsrc="http://pic4.zhimg.com/50/ccba7fa017efe2b6d5f2af5788f47e97_hd.jpg" /></p><p>尝试搞了一波比较函数 把超过当前匹配的长度的<spanclass="math inline">\(S\)</span>的<spanclass="math inline">\(w\)</span>值置为<spanclass="math inline">\(0\)</span></p><p>然后发现...<spanclass="math inline">\(w\)</span>初始化时候的比较<spanclass="math inline">\(gg\)</span>了...</p><p>然后问学长 + 参悟代码(感谢<spanclass="math inline">\(K404-A2\)</span>的代码)...</p><p>Emmmmmm妙啊...写两个比较函数不就行了...</p><p><code>dq</code>代表当前在匹配的位置,<code>hsd</code>代表当前已经匹配上的位数,<code>lt[i]</code>代表<code>t</code>串中位置<code>i</code>前最靠近的<code>t[i]</code>的位置,<code>ls[i]</code>就是<code>s</code>中在<code>i</code>前最靠近<code>s[i]</code>的位置</p><ul><li><code>cmpa</code>函数是用来初始化<code>fail</code>数组的<ul><li>第一个<code>if</code>:如果<code>dq</code>位置的<code>w</code>超出了当前匹配的位数,而且当前的长度内没有重复的字符, 也就是不会对当前的串匹配产生影响,返回<code>true</code></li><li>第二个<code>if</code>:如果<code>dq</code>位置的<code>w</code>在当前匹配的位数内,而且当前匹配的位数内也有<code>t[hsd]</code>重复出现, 返回他们是否相等,即他们的<code>w</code>值是否相等</li><li>否则 一个出现了, 一个没有出现, 返回<code>false</code></li></ul></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmpa</span><span class="params">(<span class="type">const</span> <span class="type">int</span> dq, <span class="type">const</span> <span class="type">int</span> hsd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (t[dq] &lt;= dq - hsd &amp;&amp; !t[hsd])</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (t[dq] &gt; dq - hsd &amp;&amp; t[hsd])</span><br><span class="line"><span class="keyword">return</span> (dq - t[dq] == hsd - t[hsd]);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>cmpb</code>是用来做kmp匹配的, 基本和上面差不多...反正<spanclass="math inline">\(kmp\)</span>的初始化和匹配是类似的过程...</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmpb</span><span class="params">(<span class="type">const</span> <span class="type">int</span> dq, <span class="type">const</span> <span class="type">int</span> hsd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (s[dq] &lt;= dq - hsd &amp;&amp; !t[hsd])</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (s[dq] &gt; dq - hsd &amp;&amp; t[hsd])</span><br><span class="line"><span class="keyword">return</span> (dq - s[dq] == hsd - t[hsd]);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="沙茶的-代码">沙茶的 代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (1000000 + 5)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n, m, s[MAXN], t[MAXN], ls[MAXN], lt[MAXN], ans[MAXN], f[MAXN];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmpa</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmpb</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">kmp</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;xiz.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;xiz.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="type">int</span> tim, c;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;tim, &amp;c);</span><br><span class="line"><span class="keyword">while</span> (tim--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(ls, <span class="number">0</span>, <span class="built_in">sizeof</span>(ls));</span><br><span class="line"><span class="built_in">memset</span>(lt, <span class="number">0</span>, <span class="built_in">sizeof</span>(lt));</span><br><span class="line"><span class="built_in">memset</span>(ans, <span class="number">0</span>, <span class="built_in">sizeof</span>(ans));</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="type">int</span> srx;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;srx);</span><br><span class="line">s[i] = ls[srx], ls[srx] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;srx);</span><br><span class="line">t[i] = lt[srx], lt[srx] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">init</span>();</span><br><span class="line"><span class="built_in">kmp</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= ans[<span class="number">0</span>]; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, ans[i]);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">f[<span class="number">1</span>] = f[<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> j;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= m; i++)</span><br><span class="line">&#123;</span><br><span class="line">j = f[i];</span><br><span class="line"><span class="keyword">while</span> (j != <span class="number">1</span> &amp;&amp; !<span class="built_in">cmpa</span>(i, j))j = f[j];</span><br><span class="line">f[i + <span class="number">1</span>] = (<span class="built_in">cmpa</span>(i, j) ? (j + <span class="number">1</span>) : <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">kmp</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> j = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (j != <span class="number">1</span> &amp;&amp; !<span class="built_in">cmpb</span>(i, j))j = f[j];</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">cmpb</span>(i, j))</span><br><span class="line">++j;</span><br><span class="line"><span class="keyword">if</span> (j == m + <span class="number">1</span>)</span><br><span class="line">ans[++ans[<span class="number">0</span>]] = i - m + <span class="number">1</span>, j = f[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1 2 1 2 3 2</span></span><br><span class="line"><span class="comment">// 3 1 3</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmpa</span><span class="params">(<span class="type">const</span> <span class="type">int</span> dq, <span class="type">const</span> <span class="type">int</span> hsd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (t[dq] &lt;= dq - hsd &amp;&amp; !t[hsd])</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (t[dq] &gt; dq - hsd &amp;&amp; t[hsd])</span><br><span class="line"><span class="keyword">return</span> (dq - t[dq] == hsd - t[hsd]);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmpb</span><span class="params">(<span class="type">const</span> <span class="type">int</span> dq, <span class="type">const</span> <span class="type">int</span> hsd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (s[dq] &lt;= dq - hsd &amp;&amp; !t[hsd])</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (s[dq] &gt; dq - hsd &amp;&amp; t[hsd])</span><br><span class="line"><span class="keyword">return</span> (dq - s[dq] == hsd - t[hsd]);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">3 3</span></span><br><span class="line"><span class="comment">6 3</span></span><br><span class="line"><span class="comment">1 2 1 2 3 2</span></span><br><span class="line"><span class="comment">3 1 3</span></span><br><span class="line"><span class="comment">6 3</span></span><br><span class="line"><span class="comment">1 2 1 2 1 2</span></span><br><span class="line"><span class="comment">3 1 3</span></span><br><span class="line"><span class="comment">6 3</span></span><br><span class="line"><span class="comment">1 1 2 1 2 1</span></span><br><span class="line"><span class="comment">3 1 3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>By 跪烂大爷们的 Cansult</p>]]></content>
      
      
      <categories>
          
          <category> 翻车笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 翻车 </tag>
            
            <tag> 清奇脑回路 </tag>
            
            <tag> KMP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记 KMP</title>
      <link href="/posts/33425.html"/>
      <url>/posts/33425.html</url>
      
        <content type="html"><![CDATA[<p>今天正好xMinh问我KMP的实现来着...于是我就带着下面这首<strong>带劲的bgm</strong>给他讲了一下下...正好当补个档吧</p><p><del>做了一点微小的贡献 bgm请点开全文</del></p><span id="more"></span><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=548408261&amp;auto=0&amp;height=66"></iframe><p>↑彻底确定了我 slyz逗逼担当的地位</p><p>kmp靠的就是</p><blockquote><p>智慧~ 大智慧~ 不一样的智慧~</p></blockquote><figure><img src="../pictures/20180224G.jpg" alt="我的烤馍片" /><figcaption aria-hidden="true">我的烤馍片</figcaption></figure><p>请试想我以上图的姿态给xMinh讲KMP对其造成的心理阴影面积</p><h3 id="沙茶的-kmp不详解代码">沙茶的 KMP不详解(代码)</h3><p>KMP可以以<span class="math inline">\(\mathrm O(n +m)\)</span>的复杂度解决字符串的匹配问题</p><p>在普通的字符串匹配中, <spanclass="math inline">\(B\)</span>串一旦在某一位(比如说第<spanclass="math inline">\(i\)</span>位)上与<spanclass="math inline">\(A\)</span>不一样, 就需要从头开始匹配<spanclass="math inline">\(B\)</span>串, 这样最坏的复杂度是<spanclass="math inline">\(\mathrm O(m n)\)</span>的</p><p>优化的一般思想都是利用重复的信息, 我们发现, 既然<spanclass="math inline">\(B\)</span>在第<spanclass="math inline">\(i\)</span>位与<spanclass="math inline">\(A\)</span>失配了, 那么其实<spanclass="math inline">\(B\)</span>的前<span class="math inline">\(i -1\)</span>位都是和<span class="math inline">\(A\)</span>匹配的,我们可以利用这个来优化</p><p>直接讲代码吧...xMinh说主要就是代码不懂...</p><p>代码是去年写的...那时候还似懂非懂来着...然后码风也比较...清新...</p><h4 id="预处理">预处理</h4><p><span class="math inline">\(p[i]\)</span>的意义: 在<spanclass="math inline">\(B\)</span>的前<spanclass="math inline">\(i\)</span>位, 最长的[前缀与后缀相等的长度],也就是<span class="math inline">\((b[0] \to b[p[i]]) = (b[i - p[i]] \tob[i - 1])\)</span> (不要在意边界...大体意思懂了就好... = =+)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">n=<span class="built_in">strlen</span>(a);</span><br><span class="line">m=<span class="built_in">strlen</span>(b);</span><br><span class="line">p[<span class="number">0</span>]=p[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> j=<span class="number">0</span>; <span class="comment">// p[i]: (b[0] ~ b[p[i]]) = (b[i - p[i]] ~ b[i - 1])</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;m;i++)</span><br><span class="line">&#123;</span><br><span class="line">j=p[i]; <span class="comment">// </span></span><br><span class="line"><span class="keyword">while</span>(j&amp;&amp;b[j]!=b[i])j=p[j];</span><br><span class="line">p[i+<span class="number">1</span>]=(b[i]==b[j])?(j+<span class="number">1</span>):<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个是什么意思呢...我们在预处理<spanclass="math inline">\(p[]\)</span>...但是怎么预处理呢...肯定不能直接暴力匹配...那就<spanclass="math inline">\(n^2\)</span>了是不...</p><h5 id="j-pi"><span class="math inline">\(j = p[i]\)</span></h5><figure><img src="../pictures/20190224A.png" alt="预处理" /><figcaption aria-hidden="true">预处理</figcaption></figure><p>上图中, 蓝色的部分是已经确定的 前缀 == 后缀 长度,当前匹配的是绿色的部分, 后半部分的绿色点是<spanclass="math inline">\(i++\)</span>后得到的 , 前面的绿色点是<spanclass="math inline">\(j = p[i]\)</span>得到的</p><p>现在就是要匹配第<span class="math inline">\(i\)</span>位和第<spanclass="math inline">\(j\)</span>位, 如果能匹配成功当然好, 直接把<spanclass="math inline">\(p[i + 1] = p[i] + 1\)</span>即可</p><h5 id="while-j-bj-bi-j-pj"><span class="math inline">\(while (j\&amp;\&amp; b[j] != b[i]) \,\, j = p[j]\)</span></h5><figure><img src="../pictures/20190224B.png" alt="失配: 预处理" /><figcaption aria-hidden="true">失配: 预处理</figcaption></figure><p>如果匹配失败, 我们发现既然我们已经知道前<spanclass="math inline">\(j\)</span>位的<spanclass="math inline">\(p\)</span>, 也就是紫色的1部分和2部分相等,而两个蓝色的部分是相等的, 所以2和3是相等的, 也就是 <spanclass="math display">\[\begin{cases}1 = 2 \\2 = 3 \\\end{cases}\to \,\, 1 = 3\]</span> 所以我们惊喜的发现, 1和3其实是相等的,没有必要再去匹配了...我们可以直接匹配第<spanclass="math inline">\(j\)</span>位和第<spanclass="math inline">\(i\)</span>位, 如果不匹配,可以继续类似递归一样继续下去...</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">n=<span class="built_in">strlen</span>(a);</span><br><span class="line">m=<span class="built_in">strlen</span>(b);</span><br><span class="line">p[<span class="number">0</span>]=p[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> j=<span class="number">0</span>; <span class="comment">// p[i]: (b[0] ~ b[p[i]]) = (b[i - p[i]] ~ b[i - 1])</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;m;i++)</span><br><span class="line">&#123;</span><br><span class="line">j=p[i]; <span class="comment">// j是当前应该和i(也就是当前长度字符串结尾)匹配的位</span></span><br><span class="line"><span class="keyword">while</span>(j&amp;&amp;b[j]!=b[i])j=p[j]; <span class="comment">// 类似递归的处理过程, 知道递归到最底层无法递归: j回到开头了</span></span><br><span class="line">p[i+<span class="number">1</span>]=(b[i]==b[j])?(j+<span class="number">1</span>):<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>↑再粘一遍加深一下印象</p><h4 id="匹配">匹配</h4><p>终于到了激动人心的匹配...</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(j&amp;&amp;a[i]!=b[j])j=p[j];</span><br><span class="line"><span class="keyword">if</span>(b[j]==a[i])j++;</span><br><span class="line"><span class="keyword">if</span>(j==m)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,i-m+<span class="number">2</span>);</span><br><span class="line">j=p[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="while-j-ai-bj-j-pj"><span class="math inline">\(while (j\&amp;\&amp;a[i] != b[j])\,\, j = p[j]\)</span></h5><figure><img src="../pictures/20190224C.png" alt="失配: 匹配中" /><figcaption aria-hidden="true">失配: 匹配中</figcaption></figure><p>当前在匹配绿色的1, 然后如果失配了...</p><p>我们发现 <span class="math display">\[\begin{cases}1 = 3 \\2 = 3\end{cases}\to \,\, 1 = 2\]</span>于是我们又省了一堆匹配...直接从2的结尾开始匹配绿色的1就好了</p><h5 id="jpj"><span class="math inline">\(j=p[j]\)</span></h5><p>不得不说...xMinh跟我说不理解这个地方的时候还是挺吃惊的...这个的意思呢,就是你kmp匹配, 不能光找出第一个匹配的串啊,还得找出来后面那些是匹配的啊</p><p>其实这里就是把他当失配, 来尽快的找后一个可以匹配的串</p><p>也就是相当于两个串变成了下面这样:</p><figure><img src="../pictures/20190224D.png" alt="失配: 假的" /><figcaption aria-hidden="true">失配: 假的</figcaption></figure><p>懂了?</p><h3 id="例题">例题</h3><h4 id="简单水题"><ahref="https://www.luogu.org/problemnew/show/P3375">简单水题</a></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 1000000+5</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXM 1000+5</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">char</span> a[MAXN],b[MAXM];</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> p[MAXM];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,a);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,b);</span><br><span class="line">n=<span class="built_in">strlen</span>(a);</span><br><span class="line">m=<span class="built_in">strlen</span>(b);</span><br><span class="line">p[<span class="number">0</span>]=p[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> j=<span class="number">0</span>; <span class="comment">// p[i]: (b[0] ~ b[p[i]]) = (b[i - p[i]] ~ b[i - 1])</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;m;i++)</span><br><span class="line">&#123;</span><br><span class="line">j=p[i]; <span class="comment">// </span></span><br><span class="line"><span class="keyword">while</span>(j&amp;&amp;b[j]!=b[i])j=p[j];</span><br><span class="line">p[i+<span class="number">1</span>]=(b[i]==b[j])?(j+<span class="number">1</span>):<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*for(int i=0;i&lt;m;i++)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">cout&lt;&lt;p[i]&lt;&lt;&quot; &quot;;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">cout&lt;&lt;endl;*/</span></span><br><span class="line">j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(j&amp;&amp;a[i]!=b[j])j=p[j];</span><br><span class="line"><span class="keyword">if</span>(b[j]==a[i])j++;</span><br><span class="line"><span class="keyword">if</span>(j==m)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,i-m+<span class="number">2</span>);</span><br><span class="line">j=p[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,p[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="脑洞进阶"><ahref="https://www.cansult.ga/2911.html">脑洞进阶</a></h4><p>见我的blog吧...</p><p>反正我当时没有想出来[苦笑]...</p><p>By 沙茶 Cansult</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> KMP </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>水题笔记 SDOI2009 虔诚的墓主人[树状数组, 扫描线]</title>
      <link href="/posts/36028.html"/>
      <url>/posts/36028.html</url>
      
        <content type="html"><![CDATA[<p>看似完美无缺的东西也许是错解</p><p>动键盘之前一定再三思考</p><span id="more"></span><h3 id="懵逼的-题目">懵逼的 题目</h3><p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=1227">传送至BZOJ</a></p><h3 id="扯淡的-题解">扯淡的 题解</h3><p>这道题...我写了三遍...</p><p>前两遍我没考虑到两棵常青树可能会空隙非常大, 直接统计然后GG</p><p>后来想了一下, <del>费尽千辛万苦克服懒惰</del>推了一下式子,发现在同一空隙的墓地对答案的贡献$ = <em>i^{i} C^{up}</em>{tot_i}C^{down}<em>{tot_i} C^{left}</em>{tot_j} C^{right}<em>{tot_j} =C^{left}</em>{tot_j} C^{right}<em>{tot_j} <em>i^{i} C^{up}</em>{tot_i}C^{down}</em>{tot_i}$, 然后就转化为了一个区间求和,单点修改的扫描线了Emmmmmmmmmmm<del>但是为啥舒老师说这不是扫描线啊这为啥不是扫描线啊QAQ</del></p><p>树状数组记录横向的<span class="math inline">\(\mathrm C\)</span>值,然后扫每一行的时候枚举相邻的两棵树, 计算这一段空隙对答案的贡献即可</p><p>复杂度<span class="math inline">\(\mathrm O(n \lg n)\)</span></p><p>注意细节:</p><ul><li>不要把枚举的两个树的纵坐标当成边界去查询了</li><li>适当增长代码以提高可读性</li><li>查询放在修改前面,或者搞清楚变量的实际意义(比如<code>dqy</code>)</li><li>不要一不小心把<code>++dqy</code>放在了<code>continue</code>后面</li></ul><h3 id="沙茶的-代码">沙茶的 代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**************************************************************</span></span><br><span class="line"><span class="comment">    Problem: 1227</span></span><br><span class="line"><span class="comment">    User: Cansult</span></span><br><span class="line"><span class="comment">    Language: C++</span></span><br><span class="line"><span class="comment">    Result: Accepted</span></span><br><span class="line"><span class="comment">    Time:4460 ms</span></span><br><span class="line"><span class="comment">    Memory:24624 kb</span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (100000 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXK (10 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXL (1000000000 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x) &amp; (-(x)))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pll pair<span class="string">&lt;LL, LL&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CA (2147483648ll)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">tree</span></span><br><span class="line">&#123;</span><br><span class="line">    LL x, y, xx, yy;</span><br><span class="line">&#125;a[MAXN];</span><br><span class="line">LL b[MAXN], c[MAXN][MAXK], n, chang, kuan, ans, sora[MAXN &lt;&lt; <span class="number">2</span>];</span><br><span class="line">LL tchang, tkuan, dq[MAXN], tot[MAXN], tto[MAXN], kn;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; bh[MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">xg</span><span class="params">(<span class="type">int</span> wz, LL zh)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = wz; i &lt;= tchang; i += <span class="built_in">lowbit</span>(i))</span><br><span class="line">        b[i] += zh;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">cx</span><span class="params">(<span class="type">int</span> le, <span class="type">int</span> ri)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LL rel = <span class="number">0</span>, rer;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = le - <span class="number">1</span>; i; i -= <span class="built_in">lowbit</span>(i))</span><br><span class="line">        rel = (rel + b[i]) % CA;</span><br><span class="line">    rer = -rel;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = ri; i; i -= <span class="built_in">lowbit</span>(i))</span><br><span class="line">        rer = (rer + b[i]), rer = (rer &gt; <span class="number">0</span> ? (rer % CA) : rer);</span><br><span class="line">    <span class="keyword">return</span> rer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">initc</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    c[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; MAXN; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; MAXK; j++)</span><br><span class="line">            c[i][j] = (c[i - <span class="number">1</span>][j] + (j ? c[i - <span class="number">1</span>][j - <span class="number">1</span>] : <span class="number">0</span>)) % CA;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(tree x, tree y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x.x == y.x) <span class="keyword">return</span> x.y &lt; y.y;</span><br><span class="line">    <span class="keyword">else</span>    <span class="keyword">return</span> x.x &lt; y.x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>, &amp;kuan, &amp;chang);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>, &amp;a[i].xx, &amp;a[i].yy);</span><br><span class="line">        sora[++sora[<span class="number">0</span>]] = a[i].xx;</span><br><span class="line">        sora[++sora[<span class="number">0</span>]] = a[i].yy;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(sora + <span class="number">1</span>, sora + sora[<span class="number">0</span>] + <span class="number">1</span>);</span><br><span class="line">    sora[<span class="number">0</span>] = <span class="built_in">unique</span>(sora + <span class="number">1</span>, sora + sora[<span class="number">0</span>] + <span class="number">1</span>) - sora - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        a[i].x = <span class="built_in">lower_bound</span>(sora + <span class="number">1</span>, sora + sora[<span class="number">0</span>] + <span class="number">1</span>, a[i].xx) - sora, </span><br><span class="line">        a[i].y = <span class="built_in">lower_bound</span>(sora + <span class="number">1</span>, sora + sora[<span class="number">0</span>] + <span class="number">1</span>, a[i].yy) - sora, </span><br><span class="line">        tchang = <span class="built_in">max</span>(tchang, a[i].y), </span><br><span class="line">        tkuan = <span class="built_in">max</span>(tkuan, a[i].x);</span><br><span class="line">    <span class="built_in">sort</span>(a + <span class="number">1</span>, a + n + <span class="number">1</span>, cmp);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        bh[a[i].x].<span class="built_in">push_back</span>(i), ++tot[a[i].x], ++tto[a[i].y];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;kn);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= tkuan; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> dqy = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; bh[i].<span class="built_in">size</span>(); j++)</span><br><span class="line">        &#123;</span><br><span class="line">            tree&amp; ri = a[bh[i][j]], le = a[bh[i][j - <span class="number">1</span>]];</span><br><span class="line">            ++dqy;</span><br><span class="line">            <span class="keyword">if</span> (ri.yy == le.yy + <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            LL dqsx = c[dqy][kn];</span><br><span class="line">            dqsx = dqsx * c[tot[i] - dqy][kn] % CA;</span><br><span class="line">            LL dqcx = <span class="built_in">cx</span>(le.y + <span class="number">1</span>, ri.y - <span class="number">1</span>);</span><br><span class="line">            ans = (ans + dqcx * dqsx % CA) % CA;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; bh[i].<span class="built_in">size</span>(); j++)</span><br><span class="line">        &#123;</span><br><span class="line">            tree&amp; x = a[bh[i][j]];</span><br><span class="line">            LL dqzy = -((c[dq[x.y]][kn] * c[tto[x.y] - dq[x.y]][kn]) % CA);</span><br><span class="line">            ++dq[x.y];</span><br><span class="line">            dqzy += (c[dq[x.y]][kn] * c[tto[x.y] - dq[x.y]][kn]) % CA;</span><br><span class="line">            dqzy %= CA;</span><br><span class="line">            <span class="built_in">xg</span>(x.y, dqzy);</span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//  freopen(&quot;religious.in&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line"><span class="comment">//  freopen(&quot;religious.out&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line">    <span class="built_in">initc</span>();</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">5 6</span></span><br><span class="line"><span class="comment">13</span></span><br><span class="line"><span class="comment">0 2</span></span><br><span class="line"><span class="comment">0 3</span></span><br><span class="line"><span class="comment">1 2</span></span><br><span class="line"><span class="comment">1 3</span></span><br><span class="line"><span class="comment">2 0</span></span><br><span class="line"><span class="comment">2 1</span></span><br><span class="line"><span class="comment">2 4</span></span><br><span class="line"><span class="comment">2 5</span></span><br><span class="line"><span class="comment">2 6</span></span><br><span class="line"><span class="comment">3 2</span></span><br><span class="line"><span class="comment">3 3</span></span><br><span class="line"><span class="comment">4 3</span></span><br><span class="line"><span class="comment">5 2</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>By 沙茶 Cansult</p>]]></content>
      
      
      <categories>
          
          <category> 水题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 扫描线 </tag>
            
            <tag> 树状数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>翻车笔记 这两天的AC和CF的几道水(神)题</title>
      <link href="/posts/50169.html"/>
      <url>/posts/50169.html</url>
      
        <content type="html"><![CDATA[<p>被虐成狗了...woc...</p><span id="more"></span><p>打<ahref="http://codeforces.com/contest/953">那场狗逼的CF</a>打了一晚上没写AtCoder...没看CF的要求然后写第二题的时候就懵逼了...woc我怎么交不了啊...一看woc用十种语言写这是神经病吧....幸好打的unrated...前面几道膜你就不说了...E是个链表模拟...FGHI看不懂题...那么也就剩下...</p><hr /><h3 id="cf-vk2018-wild-card-r1-j">CF VK2018 Wild-card R1: J</h3><p>首先可以线段树维护区间联通块个数写...然后还有一种神奇的set写法...</p><p>亦可赛艇...</p><h4 id="线段树">线段树</h4><p>好像没必要写查询函数我脑残写了...以后做题一定要先想好怎么写再<del>下笔</del>动键盘...</p><p>具体就是维护节点所在区间的最左边和最右边是否是1,如果都是1(一个联通块跨过了<code>mid</code>,就<code>--ans</code>)<del>他们dalao说这是经典做法???我怎么不知道啊QAQ你们大佬怎么什么都经典做法啊</del></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (200000 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LS(dq) ((dq) &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RS(dq) (((dq) &lt;&lt; 1) | 1)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> le, ri, zh, lc, rc, lazy;</span><br><span class="line">&#125;b[MAXN &lt;&lt; <span class="number">4</span>];</span><br><span class="line"><span class="type">int</span> sora[MAXN &lt;&lt; <span class="number">2</span>];</span><br><span class="line">pii que[MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_up</span><span class="params">(<span class="type">int</span> dq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">b[dq].lc = b[<span class="built_in">LS</span>(dq)].lc, b[dq].rc = b[<span class="built_in">RS</span>(dq)].rc;</span><br><span class="line">b[dq].zh = b[<span class="built_in">LS</span>(dq)].zh + b[<span class="built_in">RS</span>(dq)].zh - (b[<span class="built_in">LS</span>(dq)].rc &amp; b[<span class="built_in">RS</span>(dq)].lc);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_down</span><span class="params">(<span class="type">int</span> dq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">b[<span class="built_in">LS</span>(dq)].lazy = b[<span class="built_in">RS</span>(dq)].lazy = <span class="number">1</span>;</span><br><span class="line">b[<span class="built_in">LS</span>(dq)].lc = b[<span class="built_in">RS</span>(dq)].rc = b[<span class="built_in">LS</span>(dq)].rc = b[<span class="built_in">RS</span>(dq)].lc = <span class="number">1</span>;</span><br><span class="line">b[<span class="built_in">LS</span>(dq)].zh = b[<span class="built_in">RS</span>(dq)].zh = <span class="number">1</span>;</span><br><span class="line">b[dq].lazy = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">js</span><span class="params">(<span class="type">int</span> dq, <span class="type">int</span> le, <span class="type">int</span> ri)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">b[dq].le = le, b[dq].ri = ri;</span><br><span class="line">b[dq].lazy = b[dq].lc = b[dq].rc = b[dq].zh = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (le == ri)</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line"><span class="type">int</span> mi = (le + ri) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="built_in">js</span>(<span class="built_in">LS</span>(dq), le, mi);</span><br><span class="line"><span class="built_in">js</span>(<span class="built_in">RS</span>(dq), mi + <span class="number">1</span>, ri);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">xg</span><span class="params">(<span class="type">int</span> dq, <span class="type">int</span> le, <span class="type">int</span> ri)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (b[dq].le == le &amp;&amp; b[dq].ri == ri)</span><br><span class="line">&#123;</span><br><span class="line">b[dq].lc = b[dq].rc = b[dq].zh = b[dq].lazy = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (b[dq].lazy)</span><br><span class="line"><span class="built_in">push_down</span>(dq);</span><br><span class="line"><span class="type">int</span> mi = (b[dq].le + b[dq].ri) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (le &gt; mi)</span><br><span class="line"><span class="built_in">xg</span>(<span class="built_in">RS</span>(dq), le, ri);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (ri &lt;= mi)</span><br><span class="line"><span class="built_in">xg</span>(<span class="built_in">LS</span>(dq), le, ri);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">xg</span>(<span class="built_in">LS</span>(dq), le, mi), <span class="built_in">xg</span>(<span class="built_in">RS</span>(dq), mi + <span class="number">1</span>, ri);</span><br><span class="line"><span class="built_in">push_up</span>(dq);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">node <span class="title">cx</span><span class="params">(<span class="type">int</span> dq, <span class="type">int</span> le, <span class="type">int</span> ri)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (b[dq].le == le &amp;&amp; b[dq].ri == ri)</span><br><span class="line"><span class="keyword">return</span> b[dq];</span><br><span class="line"><span class="type">int</span> mi = (b[dq].le + b[dq].ri) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (le &gt; mi)</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">cx</span>(<span class="built_in">RS</span>(dq), le, ri);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (ri &lt;= mi)</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">cx</span>(<span class="built_in">LS</span>(dq), le, ri);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">node ls = <span class="built_in">cx</span>(<span class="built_in">LS</span>(dq), le, mi), rs = <span class="built_in">cx</span>(<span class="built_in">RS</span>(dq), mi + <span class="number">1</span>, ri), re;</span><br><span class="line">re.lc = ls.lc, re.rc = rs.rc;</span><br><span class="line">re.zh = ls.zh + rs.zh - (ls.rc &amp; rs.lc);</span><br><span class="line"><span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;que[i].first, &amp;que[i].second);</span><br><span class="line">sora[++sora[<span class="number">0</span>]] = que[i].first;</span><br><span class="line">sora[++sora[<span class="number">0</span>]] = que[i].second;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(sora + <span class="number">1</span>, sora + sora[<span class="number">0</span>] + <span class="number">1</span>);</span><br><span class="line">sora[<span class="number">0</span>] = <span class="built_in">unique</span>(sora + <span class="number">1</span>, sora + sora[<span class="number">0</span>] + <span class="number">1</span>) - sora - <span class="number">1</span>;</span><br><span class="line"><span class="built_in">js</span>(<span class="number">1</span>, <span class="number">1</span>, (sora[<span class="number">0</span>] + <span class="number">1</span>) &lt;&lt; <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">que[i].first = (<span class="built_in">lower_bound</span>(sora + <span class="number">1</span>, sora + sora[<span class="number">0</span>] + <span class="number">1</span>, que[i].first) - sora) &lt;&lt; <span class="number">1</span>, </span><br><span class="line">que[i].second = (<span class="built_in">lower_bound</span>(sora + <span class="number">1</span>, sora + sora[<span class="number">0</span>] + <span class="number">1</span>, que[i].second) - sora) &lt;&lt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="built_in">xg</span>(<span class="number">1</span>, que[i].first, que[i].second), <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, b[<span class="number">1</span>].zh);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">9</span></span><br><span class="line"><span class="comment">10 20</span></span><br><span class="line"><span class="comment">50 60</span></span><br><span class="line"><span class="comment">30 40</span></span><br><span class="line"><span class="comment">70 80</span></span><br><span class="line"><span class="comment">90 100</span></span><br><span class="line"><span class="comment">60 70</span></span><br><span class="line"><span class="comment">10 40</span></span><br><span class="line"><span class="comment">40 50</span></span><br><span class="line"><span class="comment">80 90</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="set">SET</h4><p>感觉这个想法确实挺妙的_(:з」∠)_反正我是绝对想不出来了<del>那应该是我菜啊</del>...</p><ul><li><code>lower_bound</code>找到了右端点在当前线段左端点之右的线段</li><li>如果那条线段的左端点在当前线段的右端点的右边说明不重合,直接<code>break</code> (因为在set里的所有线段都不会有重合,所以可以直接<code>break</code>)</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (200000 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF (0x7ffffff)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mkp make_pair</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">set&lt;pii&gt; seg;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> maxr, minl;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;minl, &amp;maxr);</span><br><span class="line">set&lt;pii&gt;::iterator x;</span><br><span class="line"><span class="keyword">while</span> (!seg.<span class="built_in">empty</span>() &amp;&amp; (x = seg.<span class="built_in">lower_bound</span>(<span class="built_in">mkp</span>(minl, <span class="number">0</span>))) != seg.<span class="built_in">end</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (maxr &lt; x-&gt;second)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">minl = <span class="built_in">min</span>(minl, x-&gt;second);</span><br><span class="line">maxr = <span class="built_in">max</span>(maxr, x-&gt;first);</span><br><span class="line">seg.<span class="built_in">erase</span>(x);</span><br><span class="line">&#125;</span><br><span class="line">seg.<span class="built_in">insert</span>(<span class="built_in">mkp</span>(maxr, minl));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, seg.<span class="built_in">size</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>都挺好写的...一遍过了还是挺开心的<del>毕竟我这种辣鸡码风 +日常手残</del></p><hr /><h3 id="atcoder-arc-092-c">AtCoder ARC 092: C</h3><p>C好像是个二维黑白匹配的弱化版啊...set × 扫描线就过了...<del>其实忘记判断插入的元素是不是最小的元素还RE了一发</del>不过讲道理依着AtCoder的性格这个数据范围是不是有什么神做法啊...<del>毕竟离散化都没写感觉良心不安啊</del></p><ul><li>离线, 把所有的点都按照 横坐标 -&gt; 纵坐标 的顺序排序, 然后从 横坐标== 0 的地方开始做扫描线</li><li>遇到一个点, 如果是蓝点, 就insert到集合里, 如果是红点,就贪心找一个纵坐标与他最接近(贪心)的蓝点直接删除,<code>++ans</code></li></ul><p>没了</p><p>1ms出解还是挺快的...</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (500 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">pii poi;</span><br><span class="line"><span class="type">bool</span> isB;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> node x) <span class="type">const</span></span><br><span class="line">&#123; <span class="keyword">return</span> poi &lt; x.poi; &#125;</span><br><span class="line">&#125;a[MAXN];</span><br><span class="line"><span class="type">int</span> n, ans;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a[i].poi.first, &amp;a[i].poi.second), a[i].isB = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a[n + i].poi.first, &amp;a[n + i].poi.second), a[n + i].isB = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">sort</span>(a + <span class="number">1</span>, a + (n &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>);</span><br><span class="line">set&lt;<span class="type">int</span>&gt; qwq;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= (n &lt;&lt; <span class="number">1</span>); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!a[i].isB)</span><br><span class="line">qwq.<span class="built_in">insert</span>(a[i].poi.second);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (!qwq.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">set&lt;<span class="type">int</span>&gt;::iterator x = qwq.<span class="built_in">upper_bound</span>(a[i].poi.second);</span><br><span class="line"><span class="keyword">if</span> (x == qwq.<span class="built_in">begin</span>())</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">--x;</span><br><span class="line">++ans;</span><br><span class="line">qwq.<span class="built_in">erase</span>(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr /><h3 id="atcoder-arc-092-d">AtCoder ARC 092: D</h3><p>是个神题...参悟了好多大佬的题解...终于懂了吧...</p><p><ahref="https://www.cnblogs.com/onioncyc/p/8593165.html">这个dalao讲的神做法感觉比较奇怪...</a><ahref="https://www.cnblogs.com/Bunnycxk/p/8595424.html">被初中dalao踩爆感觉非常愉悦</a><ahref="https://www.cnblogs.com/quzhizhou/p/8593055.html">这个初中dalao感觉更加的神</a></p><p>感觉我还是太Naïve...感觉南方爷们都好强啊...他们都好强啊...就我最菜了...凉了凉了</p><p>Emmmmm一开始想这道题...一看这种二进制异或肯定是拆位啊...然后...拆出来发现有进位不可做....然后又想会不会不拆也能做呢...是不是什么<spanclass="math inline">\(N^2\)</span>朴素再加个什么神级优化就行呢...然后发现也不行...最后一晚上各种分类讨论YY了一个十分沙茶的用树状数组维护进位的东西...发现不可写+应该是错的</p><p>那么我们来看正解....我们发现进位不好进...那么怎么办呢...<del>退赛炸rating换号</del>因为只有一位,我们很难判断当前是不是进位(比这一位低的位可能会对当前的这一位产生贡献),那么我们就保留下比这一位低的位...</p><p>对于当前的一位,比他高的位显然是没有用的...那我们可以通过<code>ak[k][i] = a[i] &amp; ((1 &lt;&lt; k) - 1)</code>来去掉所有比他高的位...然后发现如果第<code>k</code>位(位数从1开始)是1的话,只有两种<strong>区间</strong>满足要求:</p><ol type="1"><li><code>1 &lt;&lt; (k - 1) &lt;= ak[k][i] + bk[k][i] &lt;= 1 &lt;&lt; k</code>:保证了这一位肯定是1, 否则不可能满足这个条件</li><li><code>(1 &lt;&lt; k) + (1 &lt;&lt; (k - 1)) &lt;= ak[k][i] + bk[k][i] &lt;= (1 &lt;&lt; k + 1) - 1</code>:我就是没有注意到这个条件WA了一下午样例...然后那着计算器试了试...发现可能进了一位后第k位还是1...GG</li></ol><p>如果我们固定一个<code>ak[k][i]</code>,那么<code>bk</code>的值一定在一个区间里...那么我们就可以给<code>bk</code>排序,然后直接二分答案了...</p><p>复杂度是<span class="math inline">\(O(29n \lgn)\)</span>...可能需要卡卡常...我的程序完全没卡...有时候会T两个点...GG</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (200000 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXL (32 + 5)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">LL n, a[MAXN], b[MAXN], ak[MAXL][MAXN], bk[MAXL][MAXN], k = <span class="number">29</span>, ans[MAXL];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//freopen(&quot;in.in&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;a[i]);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= k; j++)</span><br><span class="line">ak[j][i] = a[i] &amp; ((<span class="number">1</span> &lt;&lt; j) - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;b[i]);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= k; j++)</span><br><span class="line">bk[j][i] = b[i] &amp; ((<span class="number">1</span> &lt;&lt; j) - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= k; i++)</span><br><span class="line"><span class="built_in">sort</span>(bk[i] + <span class="number">1</span>, bk[i] + n + <span class="number">1</span>);</span><br><span class="line"><span class="comment">/*for (int i = 1; i &lt;= k; i++)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">for (int j = 1; j &lt;= n; j++)</span></span><br><span class="line"><span class="comment">printf(&quot;%d &quot;, ak[i][j]);</span></span><br><span class="line"><span class="comment">puts(&quot;&quot;);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">for (int i = 1; i &lt;= k; i++)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">for (int j = 1; j &lt;= n; j++)</span></span><br><span class="line"><span class="comment">printf(&quot;%d &quot;, bk[i][j]);</span></span><br><span class="line"><span class="comment">puts(&quot;&quot;);</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="comment">// ai + bj &gt;= (1 &lt;&lt; (k - 1)) &amp;&amp; ai + bj &lt; (1 &lt;&lt; (k))</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= k; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> to = <span class="built_in">upper_bound</span>(bk[j] + <span class="number">1</span>, bk[j] + n + <span class="number">1</span>, (<span class="number">1</span> &lt;&lt; j) - ak[j][i] - <span class="number">1</span>) - bk[j];</span><br><span class="line"><span class="type">int</span> to1 = <span class="built_in">upper_bound</span>(bk[j] + <span class="number">1</span>, bk[j] + n + <span class="number">1</span>, (<span class="number">1</span> &lt;&lt; (j + <span class="number">1</span>)) - <span class="number">1</span> - ak[j][i]) - bk[j];</span><br><span class="line"><span class="type">int</span> from = <span class="built_in">lower_bound</span>(bk[j] + <span class="number">1</span>, bk[j] + n + <span class="number">1</span>, (<span class="number">1</span> &lt;&lt;(j - <span class="number">1</span>)) - ak[j][i]) - bk[j];</span><br><span class="line"><span class="type">int</span> from1 = <span class="built_in">lower_bound</span>(bk[j] + <span class="number">1</span>, bk[j] + n + <span class="number">1</span>, (<span class="number">1</span> &lt;&lt; j) + (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>)) - ak[j][i]) - bk[j];</span><br><span class="line">ans[j] += to - from + to1 - from1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">LL outp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= k; i++)</span><br><span class="line">outp += (ans[i] &amp; <span class="number">1</span>) &lt;&lt; (i - <span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>, outp);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">1 2</span></span><br><span class="line"><span class="comment">3 4</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><hr /><h3 id="atcoder-arc-092-f">AtCoder ARC 092: F</h3><p>看上去是个连通性的搜索神题...先挖个坑吧...</p><p>参悟了一下<ahref="http://blog.csdn.net/qq_34454069/article/details/79603976">这个和我同年却不知道比我高到哪里去的dalao</a></p><p>把翻转边看成删掉一条边再加入一条边, 如果输出<code>diff</code>,必须要满足: 删除这条边的时候多了一个联通块 xor加上这条边的时候少了一个联通块</p><ul><li>删除这条边多一个联通块, 需要满足:<ol type="1"><li><code>from</code>不能通过别的边到达<code>to</code></li><li><code>to</code>能到达<code>from</code></li></ol></li><li>加上这条边少一个联通块, 需要满足:<ol type="1"><li><code>from</code>能通过别的边到达<code>to</code></li><li><code>to</code>不能到达<code>from</code></li></ol></li></ul><p>然后....是不是就可做了?</p><p>每个点是否能到达另一个点可以通过n遍dfs<spanclass="math inline">\(O(N^2)\)</span>地解决</p><p>通过另外的边...也许用tarjan?</p><hr /><h3 id="稍微总结一下">稍微总结一下</h3><p>对2进制的理解还不够透彻...脑洞也不够大...线段树熟练度不够...细节堪忧...得抓紧时间开一下脑洞了... 感觉我好菜啊,他们都好神啊...他们怎么这么神啊...省选凉了啊...stress.jpg</p><p>By Cansult</p>]]></content>
      
      
      <categories>
          
          <category> 翻车笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
            <tag> 清奇脑回路 </tag>
            
            <tag> 贪心 </tag>
            
            <tag> 图论 </tag>
            
            <tag> 搜索 </tag>
            
            <tag> 构造 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记 CDQ分治 [CDQ分治]</title>
      <link href="/posts/26640.html"/>
      <url>/posts/26640.html</url>
      
        <content type="html"><![CDATA[<p>CDQ分治可以代替一些高维的数据结构</p><span id="more"></span><p>例行 srO <ahref="https://wenku.baidu.com/view/52f9c11cff00bed5b9f31d2d.html">陈丹琦</a></p><p>诶 今天是<span class="math inline">\(\pi\)</span>日诶! QwQ</p><h3 id="沙茶的-cdq分治不详解">沙茶的 CDQ分治不详解</h3><p>CDQ分治可以用来解决一些高维的偏序问题,并可以适当的代替高维的数据结构</p><p>我认为CDQ分治基本与普通的分治的最大区别就在于用左子区间的信息去修改维护右子区间的答案(就和归并排序一样,或者说归并也是一种CDQ分治))</p><h4 id="三维偏序">三维偏序</h4><p>大体过程:</p><ol start="0" type="1"><li>预处理, 将整个序列按照偏序的第一关键字排序</li><li>分,将要处理的区间(询问和修改都有)<code>[le, ri]</code>分成<code>[le, mi] + [mi + 1, ri]</code>,然后递归, 直到<code>le == ri</code>, 返回</li><li>治, 将左右区间分别按照偏序的第二关键字排序, 就像归并排序一样,一个指针<code>dql</code>扫描<code>[le, mi]</code>,一个指针<code>i</code>扫描<code>[mi + 1, ri]</code>,并时刻保证<code>dql</code>的第二关键字比<code>i</code>的第二关键字要小,然后用数据结构(通常树状数组)维护第三关键字,用左子区间的扫描更新右子区间的答案</li></ol><p>复杂度<span class="math inline">\(n \lg^2 n\)</span></p><p>没了? 没了</p><p>非常优雅 非常好写</p><p>代码比口胡容易系列, 什么不懂的一看代码就懂...</p><h4 id="四维偏序">四维偏序</h4><p>没写过...坑...待填...</p><h3 id="沙茶写过的-一些水题">沙茶写过的 一些水题</h3><p><del>保证难度递增</del></p><h4 id="陌上花开"><ahref="http://www.lydsy.com/JudgeOnline/problem.php?id=3262">3262:陌上花开</a></h4><p>非常裸的三维偏序, 主要处理花相等的情况:每次修改树状数组的时候不是加一而是加这个数出现的次数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**************************************************************</span></span><br><span class="line"><span class="comment">    Problem: 3262</span></span><br><span class="line"><span class="comment">    User: Cansult</span></span><br><span class="line"><span class="comment">    Language: C++</span></span><br><span class="line"><span class="comment">    Result: Accepted</span></span><br><span class="line"><span class="comment">    Time:3296 ms</span></span><br><span class="line"><span class="comment">    Memory:4752 kb</span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXZ (200000 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (100000 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x) &amp; (-(x)))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">flower</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a, b, c, sum, cnt;</span><br><span class="line">    <span class="comment">/*bool operator != (const flower x)</span></span><br><span class="line"><span class="comment">    &#123; return (a != x.a || b != x.b || c != x.c); &#125;*/</span></span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> == (<span class="type">const</span> flower x)</span><br><span class="line">    &#123; <span class="keyword">return</span> a == x.a &amp;&amp; b == x.b &amp;&amp; c == x.c; &#125;</span><br><span class="line">    <span class="built_in">flower</span>(): <span class="built_in">sum</span>(<span class="number">0</span>), <span class="built_in">cnt</span>(<span class="number">0</span>) &#123;&#125;</span><br><span class="line">&#125;a[MAXN];</span><br><span class="line"><span class="type">int</span> n, m, ans[MAXN], b[MAXZ];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmpa</span><span class="params">(flower a, flower b)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="keyword">return</span> ((a.a != b.a) ? (a.a &lt; b.a) : ((a.b == b.b) ? (a.c &lt; b.c) : (a.b &lt; b.b))); &#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmpb</span><span class="params">(flower a, flower b)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="keyword">return</span> ((a.b == b.b) ? (a.c &lt; b.c) : (a.b &lt; b.b)); &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">xg</span><span class="params">(<span class="type">int</span> wz, <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = wz; i &lt;= m; i += <span class="built_in">lowbit</span>(i))</span><br><span class="line">        b[i] += x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cx</span><span class="params">(<span class="type">int</span> wz)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> re = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = wz; i; i -= <span class="built_in">lowbit</span>(i))</span><br><span class="line">        re += b[i];</span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">cdq</span><span class="params">(<span class="type">int</span> le, <span class="type">int</span> ri)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (le == ri)</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    <span class="type">int</span> mi = (le + ri) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">cdq</span>(le, mi), <span class="built_in">cdq</span>(mi + <span class="number">1</span>, ri);</span><br><span class="line">    <span class="built_in">sort</span>(a + le, a + mi + <span class="number">1</span>, cmpb), <span class="built_in">sort</span>(a + mi + <span class="number">1</span>, a + ri + <span class="number">1</span>, cmpb);</span><br><span class="line">    <span class="comment">/*printf(&quot;le: %d &amp;&amp; ri: %d\n&quot;, le, ri);</span></span><br><span class="line"><span class="comment">    for (int i = le; i &lt;= ri; i++)</span></span><br><span class="line"><span class="comment">        printf(&quot;%d\t&quot;, a[i].a);</span></span><br><span class="line"><span class="comment">    puts(&quot;&quot;);</span></span><br><span class="line"><span class="comment">    for (int i = le; i &lt;= ri; i++)</span></span><br><span class="line"><span class="comment">        printf(&quot;%d\t&quot;, a[i].b);</span></span><br><span class="line"><span class="comment">    puts(&quot;&quot;);</span></span><br><span class="line"><span class="comment">    for (int i = le; i &lt;= ri; i++)</span></span><br><span class="line"><span class="comment">        printf(&quot;%d\t&quot;, a[i].c);</span></span><br><span class="line"><span class="comment">    puts(&quot;&quot;);</span></span><br><span class="line"><span class="comment">    for (int i = le; i &lt;= ri; i++)</span></span><br><span class="line"><span class="comment">        printf(&quot;%d\t&quot;, a[i].sum);*/</span></span><br><span class="line">    <span class="type">int</span> dql = le;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = mi + <span class="number">1</span>; i &lt;= ri; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (; dql &lt;= mi &amp;&amp; a[dql].b &lt;= a[i].b; dql++)</span><br><span class="line">            <span class="built_in">xg</span>(a[dql].c, a[dql].cnt + <span class="number">1</span>);</span><br><span class="line">        a[i].sum += <span class="built_in">cx</span>(a[i].c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*puts(&quot;&quot;);</span></span><br><span class="line"><span class="comment">    for (int i = le; i &lt;= ri; i++)</span></span><br><span class="line"><span class="comment">        printf(&quot;%d\t&quot;, a[i].sum);</span></span><br><span class="line"><span class="comment">    puts(&quot;\n--------------------------------------------\n&quot;);*/</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = le; i &lt; dql; i++)</span><br><span class="line">        <span class="built_in">xg</span>(a[i].c, -a[i].cnt - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;a[i].a, &amp;a[i].b, &amp;a[i].c);</span><br><span class="line">    <span class="built_in">sort</span>(a + <span class="number">1</span>, a + n + <span class="number">1</span>, cmpa);</span><br><span class="line">    <span class="type">int</span> cnt[MAXN];</span><br><span class="line">    <span class="built_in">memset</span>(cnt, <span class="number">0</span>, <span class="built_in">sizeof</span>(cnt));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] == a[i + <span class="number">1</span>])</span><br><span class="line">            cnt[i + <span class="number">1</span>] = cnt[i] + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    a[n].cnt = cnt[n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">        <span class="keyword">if</span> (a[i].c == a[i + <span class="number">1</span>].c &amp;&amp; a[i].a == a[i + <span class="number">1</span>].a &amp;&amp; a[i].b == a[i + <span class="number">1</span>].b)</span><br><span class="line">            a[i].cnt =  a[i + <span class="number">1</span>].cnt;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            a[i].cnt = cnt[i];</span><br><span class="line">    <span class="type">int</span> dn = n;</span><br><span class="line">    n = <span class="built_in">unique</span>(a + <span class="number">1</span>, a + n + <span class="number">1</span>) - a - <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">cdq</span>(<span class="number">1</span>, n);</span><br><span class="line">    <span class="comment">/*puts(&quot;\n&quot;);</span></span><br><span class="line"><span class="comment">    for (int i = 1; i &lt;= n; i++)</span></span><br><span class="line"><span class="comment">        printf(&quot;%d %d %d: %d\n&quot;, a[i].a, a[i].b, a[i].c, a[i].sum);</span></span><br><span class="line"><span class="comment">    puts(&quot;\n&quot;);*/</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        ans[a[i].sum + a[i].cnt] += a[i].cnt + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; dn; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">10 3</span></span><br><span class="line"><span class="comment">3 3 3</span></span><br><span class="line"><span class="comment">2 3 3</span></span><br><span class="line"><span class="comment">2 3 1</span></span><br><span class="line"><span class="comment">3 1 1</span></span><br><span class="line"><span class="comment">3 1 2</span></span><br><span class="line"><span class="comment">1 3 1</span></span><br><span class="line"><span class="comment">1 1 2</span></span><br><span class="line"><span class="comment">1 2 2</span></span><br><span class="line"><span class="comment">1 3 2</span></span><br><span class="line"><span class="comment">1 2 1</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="balkan2007mokia"><ahref="http://www.lydsy.com/JudgeOnline/problem.php?id=1176">1176:[Balkan2007]Mokia</a></h4><p>依旧是个裸题, 把询问差分成四个前缀矩形即可</p><p>注意排序的时候还要按照其他关键字来排序_(:з」∠)_还要别把询问给当成修改给维护了...然后差分加一减一怎么现在还错啊QAQ还有别忘了cdq之前还要排一次序</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**************************************************************</span></span><br><span class="line"><span class="comment">    Problem: 1176</span></span><br><span class="line"><span class="comment">    User: Cansult</span></span><br><span class="line"><span class="comment">    Language: C++</span></span><br><span class="line"><span class="comment">    Result: Accepted</span></span><br><span class="line"><span class="comment">    Time:13760 ms</span></span><br><span class="line"><span class="comment">    Memory:40360 kb</span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (2000000 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXQ (1000000 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x) &amp; (-(x)))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">que</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i, j, x;</span><br><span class="line">    <span class="type">bool</span> isC;</span><br><span class="line">    <span class="type">int</span> kind, belong, time;</span><br><span class="line">    <span class="built_in">que</span>() &#123;&#125;</span><br><span class="line">    <span class="built_in">que</span>(<span class="type">int</span> dqi, <span class="type">int</span> dqj, <span class="type">int</span> dqx, <span class="type">bool</span> change, <span class="type">int</span> k, <span class="type">int</span> bl, <span class="type">int</span> tim): <span class="built_in">i</span>(dqi), <span class="built_in">j</span>(dqj), <span class="built_in">x</span>(dqx), <span class="built_in">isC</span>(change), <span class="built_in">kind</span>(k), <span class="built_in">belong</span>(bl), <span class="built_in">time</span>(tim) &#123;&#125;</span><br><span class="line">&#125;q[MAXQ];</span><br><span class="line"><span class="type">int</span> b[MAXN], w, s, ans[MAXQ];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmpa</span><span class="params">(que x, que y)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="keyword">return</span> (x.time == y.time ? ((x.i == y.i) ? (x.j &lt; y.j) : (x.i &lt; y.i)) : (x.time &lt; y.time)); &#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmpb</span><span class="params">(que x, que y)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="keyword">return</span> ((x.i == y.i) ? (x.j &lt; y.j) : (x.i &lt; y.i)); &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">xg</span><span class="params">(<span class="type">int</span> wz, <span class="type">int</span> zh)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = wz; i &lt;= w; i += <span class="built_in">lowbit</span>(i))</span><br><span class="line">        b[i] += zh;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cx</span><span class="params">(<span class="type">int</span> wz)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> re = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = wz; i; i -= <span class="built_in">lowbit</span>(i))</span><br><span class="line">        re += b[i];</span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">cdq</span><span class="params">(<span class="type">int</span> le, <span class="type">int</span> ri)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (le == ri)</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    <span class="type">int</span> mi = (le + ri) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">cdq</span>(le, mi), <span class="built_in">cdq</span>(mi + <span class="number">1</span>, ri);</span><br><span class="line">    <span class="built_in">sort</span>(q + le, q + mi + <span class="number">1</span>, cmpb), <span class="built_in">sort</span>(q + mi + <span class="number">1</span>, q + ri + <span class="number">1</span>, cmpb);</span><br><span class="line">     </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    printf(&quot;le: %d &amp;&amp; ri: %d\n&quot;, le, ri);</span></span><br><span class="line"><span class="comment">    for (int i = le; i &lt;= ri; i++)</span></span><br><span class="line"><span class="comment">        printf(&quot;%d\t&quot;, q[i].time);</span></span><br><span class="line"><span class="comment">    puts(&quot;&quot;);</span></span><br><span class="line"><span class="comment">    for (int i = le; i &lt;= ri; i++)</span></span><br><span class="line"><span class="comment">        printf(&quot;%d\t&quot;, q[i].i);</span></span><br><span class="line"><span class="comment">    puts(&quot;&quot;);</span></span><br><span class="line"><span class="comment">    for (int i = le; i &lt;= ri; i++)</span></span><br><span class="line"><span class="comment">        printf(&quot;%d\t&quot;, q[i].j);</span></span><br><span class="line"><span class="comment">    puts(&quot;&quot;);</span></span><br><span class="line"><span class="comment">    for (int i = le; i &lt;= ri; i++)</span></span><br><span class="line"><span class="comment">        printf(&quot;%d\t&quot;, q[i].x);</span></span><br><span class="line"><span class="comment">    puts(&quot;&quot;);</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">         </span><br><span class="line">    <span class="type">int</span> dql = le;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = mi + <span class="number">1</span>; i &lt;= ri; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (; dql &lt;= mi &amp;&amp; q[dql].i &lt;= q[i].i; dql++)</span><br><span class="line">            <span class="keyword">if</span> (q[dql].isC)</span><br><span class="line">                <span class="built_in">xg</span>(q[dql].j, q[dql].x);</span><br><span class="line">        <span class="keyword">if</span> (!q[i].isC)</span><br><span class="line">            q[i].x += <span class="built_in">cx</span>(q[i].j);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    for (int i = le; i &lt;= ri; i++)</span></span><br><span class="line"><span class="comment">        printf(&quot;%d\t&quot;, q[i].x);</span></span><br><span class="line"><span class="comment">    puts(&quot;\n--------------------------------\n&quot;);</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = le; i &lt; dql; i++)</span><br><span class="line">        <span class="keyword">if</span> (q[i].isC)</span><br><span class="line">            <span class="built_in">xg</span>(q[i].j, -q[i].x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;s, &amp;w);</span><br><span class="line">    <span class="type">int</span> cntq = <span class="number">0</span>;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; qq;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; ; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> sre, srx, sry, srz;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;sre);</span><br><span class="line">        <span class="keyword">if</span> (sre == <span class="number">3</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;srx, &amp;sry, &amp;srz);</span><br><span class="line">        <span class="keyword">if</span> (sre == <span class="number">1</span>)</span><br><span class="line">            q[++cntq] = <span class="built_in">que</span>(srx, sry, srz, <span class="literal">true</span>, <span class="number">0</span>, <span class="number">0</span>, i);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;sre);</span><br><span class="line">            qq.<span class="built_in">push</span>(i);</span><br><span class="line">            q[++cntq] = <span class="built_in">que</span>(srx - <span class="number">1</span>, sry - <span class="number">1</span>, <span class="number">0</span>, <span class="literal">false</span>, <span class="number">1</span>, i, i);</span><br><span class="line">            q[++cntq] = <span class="built_in">que</span>(srx - <span class="number">1</span>, sre, <span class="number">0</span>, <span class="literal">false</span>, <span class="number">-1</span>, i, i);</span><br><span class="line">            q[++cntq] = <span class="built_in">que</span>(srz, sry - <span class="number">1</span>, <span class="number">0</span>, <span class="literal">false</span>, <span class="number">-1</span>, i, i);</span><br><span class="line">            q[++cntq] = <span class="built_in">que</span>(srz, sre, <span class="number">0</span>, <span class="literal">false</span>, <span class="number">1</span>, i, i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(q + <span class="number">1</span>, q + cntq + <span class="number">1</span>, cmpa);</span><br><span class="line">    <span class="built_in">cdq</span>(<span class="number">1</span>, cntq);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= cntq; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!q[i].isC)</span><br><span class="line">            ans[q[i].belong] += q[i].x * q[i].kind;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!qq.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans[qq.<span class="built_in">front</span>()] + s);</span><br><span class="line">        qq.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">0 4</span></span><br><span class="line"><span class="comment">1 2 3 3</span></span><br><span class="line"><span class="comment">2 1 1 3 3</span></span><br><span class="line"><span class="comment">1 2 2 2</span></span><br><span class="line"><span class="comment">2 2 2 3 4</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="violet-3天使玩偶"><ahref="http://www.lydsy.com/JudgeOnline/problem.php?id=2716">2716:[Violet 3]天使玩偶</a></h4><p>这题好神啊...参考了课件和<ahref="http://blog.csdn.net/CreationAugust/article/details/48896593">CA爷爷的代码</a></p><p>只考虑左下角的加点对答案的影响, 如果在左下角加入一个点<spanclass="math inline">\((X, Y)\)</span>, 那么他对询问<spanclass="math inline">\((X_0, Y_0)\)</span>的影响就是<spanclass="math inline">\(ans = min(ans, (X_0 - X) + (Y_0 - Y) = X_0 + Y_0 -(X + Y))\)</span>, 而 <span class="math inline">\(X_0 +Y_0\)</span>已知, 那么问题就转化成找一个最大的<spanclass="math inline">\((X + Y) 满足 X &lt; X_0, Y &lt;Y_0\)</span>看到这个...又是偏序, 又可以CDQ辣...</p><p>在找每一个修改的时候, 我们把它横坐标的位置<spanclass="math inline">\(B_i\)</span>修改为<spanclass="math inline">\(max(B_i, X + Y)\)</span>,然后查询的时候查询区间<span class="math inline">\((1,Y_0)\)</span>的最大值即可(其他约束条件已经由分治去掉),用树状数组维护一个最大值即可</p><p>然后考虑其他方向, 你可以用一个最大的坐标减去坐标来做,具体看注释和代码</p><p>然后...你就可以卡常辣!</p><ol start="0" type="1"><li>树状数组的清空不用<code>memset</code>而是遍历区间内包含的修改然后一个个置为0(好像全网就我一个傻不拉几的写的<code>memset</code>?)</li><li>每次返回上一层的时候用归并而非每一次都<code>sort</code>一遍,实测快了3倍左右</li><li>读入优化 + inline + register + const + 手写带const的 max / min而非define 大概快了100 ms+-</li><li>开小数组, 但注意bzoj的数据范围有问题, <span class="math inline">\(n,m\)</span>的范围并非保证的 <span class="math inline">\(3 \times10^5\)</span> 而是 <span class="math inline">\(5\times10^5\)</span>...</li></ol><p>还有一个小细节...坐标可以为0,而树状数组下标不能为0...所以坐标在读入之前都应该加一,<code>maxz</code>也应该在最后加一防止计算新坐标的时候出现0坐标</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**************************************************************</span></span><br><span class="line"><span class="comment">    Problem: 2716</span></span><br><span class="line"><span class="comment">    User: Cansult</span></span><br><span class="line"><span class="comment">    Language: C++</span></span><br><span class="line"><span class="comment">    Result: Accepted</span></span><br><span class="line"><span class="comment">    Time:67452 ms</span></span><br><span class="line"><span class="comment">    Memory:79420 kb</span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// luogu-judger-enable-o2</span></span><br><span class="line"><span class="comment">// CA Orz</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (2000000 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXZ (2000000 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF (0x7ffffff)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x) &amp; (-(x)))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">que</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i, j, time;</span><br><span class="line">    <span class="type">bool</span> isC;</span><br><span class="line">    <span class="built_in">que</span>() &#123;&#125;</span><br><span class="line">    <span class="built_in">que</span>(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> t, <span class="type">bool</span> change): <span class="built_in">i</span>(x), <span class="built_in">j</span>(y), <span class="built_in">time</span>(t), <span class="built_in">isC</span>(change) &#123;&#125;</span><br><span class="line">&#125; a[MAXN], t[MAXN];</span><br><span class="line"><span class="type">int</span> b[MAXZ], n, m, maxz, ans[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">mmax</span><span class="params">(<span class="type">const</span> <span class="type">int</span> a, <span class="type">const</span> <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a &gt; b)   <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">else</span>    <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">mmin</span><span class="params">(<span class="type">const</span> <span class="type">int</span> a, <span class="type">const</span> <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a &gt; b)   <span class="keyword">return</span> b;</span><br><span class="line">    <span class="keyword">else</span>    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">cmpa</span><span class="params">(que x, que y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (x.time == y.time ? (x.i == y.i ? (x.j &lt; y.j) : (x.i &lt; y.i)) : (x.time &lt; y.time));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">cmpb</span><span class="params">(que x, que y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (x.i == y.i ? (x.j &lt; y.j) : (x.i &lt; y.i));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// min(x0 - x + y0 - y) -&gt; min(x0 + y0 - (x + y)) -&gt; 维护三维偏序比当前节点小的(x + y)的最大值</span></span><br><span class="line"><span class="comment">// min(x0 - x + y - y0) -&gt; min(x0 + size - y0 - (x + size - y))  -&gt; 将所有y变成size - y, 得到新的三维值, 按照上面的做法搞一波就行了</span></span><br><span class="line"><span class="comment">// min(x - x0 + y - y0) -&gt; min((size - x0) - (size - x) + (size - y0) - (size - y))</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">qd</span><span class="params">(<span class="type">int</span> wz)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">register</span> <span class="type">int</span> i = wz; i &lt;= maxz; i += <span class="built_in">lowbit</span>(i))</span><br><span class="line">        b[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">xg</span><span class="params">(<span class="type">int</span> wz, <span class="type">int</span> zh)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">register</span> <span class="type">int</span> i = wz; i &lt;= maxz; i += <span class="built_in">lowbit</span>(i))</span><br><span class="line">        b[i] = <span class="built_in">mmax</span>(zh, b[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">cx</span><span class="params">(<span class="type">int</span> wz)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> re = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">register</span> <span class="type">int</span> i = wz; i; i -= <span class="built_in">lowbit</span>(i))</span><br><span class="line">        re = <span class="built_in">mmax</span>(re, b[i]);</span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">cdq</span><span class="params">(<span class="type">int</span> le, <span class="type">int</span> ri)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (le == ri)</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    <span class="type">int</span> mi = (le + ri) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">cdq</span>(le, mi), <span class="built_in">cdq</span>(mi + <span class="number">1</span>, ri);</span><br><span class="line">    <span class="type">int</span> dql = le;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">register</span> <span class="type">int</span> i = mi + <span class="number">1</span>; i &lt;= ri; i++)</span><br><span class="line">        <span class="keyword">if</span> (!a[i].isC)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (; dql &lt;= mi &amp;&amp; a[dql].i &lt;= a[i].i; dql++)</span><br><span class="line">                <span class="keyword">if</span> (a[dql].isC)</span><br><span class="line">                    <span class="built_in">xg</span>(a[dql].j, a[dql].i + a[dql].j);</span><br><span class="line"> </span><br><span class="line">            <span class="type">int</span> dqc = <span class="built_in">cx</span>(a[i].j);</span><br><span class="line">            <span class="keyword">if</span> (dqc)</span><br><span class="line">                ans[a[i].time] = <span class="built_in">mmin</span>(ans[a[i].time], a[i].i + a[i].j - dqc);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">register</span> <span class="type">int</span> i = le; i &lt; dql; i++)</span><br><span class="line">        <span class="keyword">if</span> (a[i].isC)</span><br><span class="line">            <span class="built_in">qd</span>(a[i].j);</span><br><span class="line"> </span><br><span class="line">    <span class="type">int</span> lx = le, rx = mi + <span class="number">1</span>, tx = le;</span><br><span class="line">    <span class="keyword">for</span> (; tx &lt;= ri; tx++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">cmpb</span>(a[lx], a[rx]))</span><br><span class="line">            t[tx] = a[lx++];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            t[tx] = a[rx++];</span><br><span class="line">        <span class="keyword">if</span> (lx &gt; mi || rx &gt; ri)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (lx &lt;= mi) t[++tx] = a[lx++];</span><br><span class="line">    <span class="keyword">while</span> (rx &lt;= ri) t[++tx] = a[rx++];</span><br><span class="line">    <span class="built_in">memcpy</span>(a + le, t + le, (ri - le + <span class="number">1</span>) * <span class="built_in">sizeof</span>(que));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> re = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (x &lt; <span class="string">&#x27;0&#x27;</span> || x &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">        x = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (x &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; x &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        re = (re &lt;&lt; <span class="number">1</span>) + (re &lt;&lt; <span class="number">3</span>) + x - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        x = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(ans, <span class="number">0x7f</span>, <span class="built_in">sizeof</span>(ans));</span><br><span class="line">    n = <span class="built_in">read</span>(), m = <span class="built_in">read</span>();</span><br><span class="line">    <span class="type">int</span> cntq = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> srx, sry;</span><br><span class="line"><span class="comment">//      scanf(&quot;%d%d&quot;, &amp;srx, &amp;sry);</span></span><br><span class="line">        srx = <span class="built_in">read</span>(), sry = <span class="built_in">read</span>();</span><br><span class="line">        ++srx, ++sry;</span><br><span class="line">        a[++cntq] = <span class="built_in">que</span>(srx, sry, <span class="number">0</span>, <span class="literal">true</span>);</span><br><span class="line">        maxz = <span class="built_in">mmax</span>(maxz, <span class="built_in">mmax</span>(srx, sry));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> sre, srx, sry;</span><br><span class="line"><span class="comment">//      scanf(&quot;%d%d%d&quot;, &amp;sre, &amp;srx, &amp;sry);</span></span><br><span class="line">        sre = <span class="built_in">read</span>(), srx = <span class="built_in">read</span>(), sry = <span class="built_in">read</span>();</span><br><span class="line">        ++srx, ++sry;</span><br><span class="line">        a[++cntq] = <span class="built_in">que</span>(srx, sry, i, <span class="number">2</span> - sre);</span><br><span class="line">        maxz = <span class="built_in">mmax</span>(maxz, <span class="built_in">mmax</span>(srx, sry));</span><br><span class="line">    &#125;</span><br><span class="line">    ++maxz;</span><br><span class="line">    <span class="built_in">sort</span>(a + <span class="number">1</span>, a + cntq + <span class="number">1</span>, cmpa);</span><br><span class="line">    <span class="built_in">cdq</span>(<span class="number">1</span>, cntq);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= cntq; i++)  a[i].i = maxz - a[i].i;</span><br><span class="line">    <span class="built_in">sort</span>(a + <span class="number">1</span>, a + cntq + <span class="number">1</span>, cmpa);</span><br><span class="line">    <span class="built_in">cdq</span>(<span class="number">1</span>, cntq);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= cntq; i++)  a[i].j = maxz - a[i].j;</span><br><span class="line">    <span class="built_in">sort</span>(a + <span class="number">1</span>, a + cntq + <span class="number">1</span>, cmpa);</span><br><span class="line">    <span class="built_in">cdq</span>(<span class="number">1</span>, cntq);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= cntq; i++)  a[i].i = maxz - a[i].i;</span><br><span class="line">    <span class="built_in">sort</span>(a + <span class="number">1</span>, a + cntq + <span class="number">1</span>, cmpa);</span><br><span class="line">    <span class="built_in">cdq</span>(<span class="number">1</span>, cntq);</span><br><span class="line">    <span class="built_in">sort</span>(a + <span class="number">1</span>, a + cntq + <span class="number">1</span>, cmpa);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= cntq; i++)</span><br><span class="line">        <span class="keyword">if</span> (!a[i].isC)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans[a[i].time]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">2 3</span></span><br><span class="line"><span class="comment">1 1</span></span><br><span class="line"><span class="comment">2 3</span></span><br><span class="line"><span class="comment">2 1 2</span></span><br><span class="line"><span class="comment">1 3 3</span></span><br><span class="line"><span class="comment">2 4 2</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>By 四处蹭脸熟的 Cansult</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CDQ分治 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>翻车笔记 2018-03-07考试 [线段树, 扫描线, 二维线段树, 标记持久化]</title>
      <link href="/posts/49201.html"/>
      <url>/posts/49201.html</url>
      
        <content type="html"><![CDATA[<p>正难则反 非常常见的道理却非常难应用</p><p>转化查询和修改, 平衡复杂度往往会有意想不到的效果</p><span id="more"></span><h3 id="懵逼的-题目">懵逼的 题目</h3><p><a href="https://www.luogu.org/problemnew/show/P1502">T1</a></p><p><a href="https://www.luogu.org/problemnew/show/P1856">T2</a></p><p><ahref="http://www.lydsy.com/JudgeOnline/problem.php?id=1513">T3</a></p><h3 id="扯淡的-题解">扯淡的 题解</h3><p>难得题目质量不错, <del>所以</del>然而差点爆零</p><h4 id="t1">T1</h4><p>感谢舒老师耐心的讲解</p><p>我们发现T1单点修改非常简单啊, 但是查询一个矩形非常不资瓷啊,我们想一想, 这么坑的题怎么会让你只有单点修改这么简单??? 那么,我们看看区间修改能不能套到这个题上面...</p><p>于是我们把一棵星星能影响到当前窗口的区间(纵向)都加上他的亮度,不能影响当前的窗口后就都减去这个亮度,这样我们只要查询整个区间的最大值就可以了, 然后上扫描线,直接滑动窗口就可以搞出一个矩形来, 然后更新答案即可</p><figure><img src="../pictures/20190224F.png" alt="大概是这个样子" /><figcaption aria-hidden="true">大概是这个样子</figcaption></figure><ul><li>红色代表加上一颗星星的亮度, 绿色代表减去这颗星星的亮度</li><li>蓝色代表那颗星星</li><li>灰色虚线表示对齐(OneNote没有内置的虚线差评</li><li>橙色的矩形代表窗户</li></ul><ol type="1"><li>一颗星星对答案的影响范围就是上下两个窗户宽的范围,也就是说窗户只要下边界在红色底端点的上面, 上边界在红色上端点的下面,就会对这个状态的窗户产生这颗星星亮度的贡献影响</li><li>而整个窗口中如果亮度会发生变化, 一定是在有星星看不见,或者新加入一颗星星的时候, 那么我们只需要在红色和绿色的横坐标处统计亮度和并 更新答案即可, 复杂度是<span class="math inline">\(\mathrm O(\mathrmT\, n\lg n)\)</span></li></ol><h4 id="t1代码">T1代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (100000 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LS(dq) ((dq) &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RS(dq) (((dq) &lt;&lt; 1) | 1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> le, ri;</span><br><span class="line">LL maxz, lazy;</span><br><span class="line">&#125;b[MAXN &lt;&lt; <span class="number">3</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">question</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> le, ri, zh, wz;</span><br><span class="line">&#125;q[MAXN];</span><br><span class="line"><span class="type">int</span> n, w, h;</span><br><span class="line">LL sorx[MAXN], sory[MAXN], ans;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_up</span><span class="params">(<span class="type">int</span> dq)</span></span></span><br><span class="line"><span class="function"></span>&#123; b[dq].maxz = <span class="built_in">max</span>(b[<span class="built_in">LS</span>(dq)].maxz, b[<span class="built_in">RS</span>(dq)].maxz); &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_down</span><span class="params">(<span class="type">int</span> dq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LL&amp; x = b[dq].lazy;</span><br><span class="line">b[<span class="built_in">LS</span>(dq)].lazy += x, b[<span class="built_in">RS</span>(dq)].lazy += x;</span><br><span class="line">b[<span class="built_in">LS</span>(dq)].maxz += x, b[<span class="built_in">RS</span>(dq)].maxz += x;</span><br><span class="line">x = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">js</span><span class="params">(<span class="type">int</span> dq, <span class="type">int</span> le, <span class="type">int</span> ri)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">b[dq].le = le, b[dq].ri = ri, b[dq].maxz = b[dq].maxz = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (le == ri)</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line"><span class="type">int</span> mi = (le + ri) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="built_in">js</span>(<span class="built_in">LS</span>(dq), le, mi);</span><br><span class="line"><span class="built_in">js</span>(<span class="built_in">RS</span>(dq), mi + <span class="number">1</span>, ri);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">xg</span><span class="params">(<span class="type">int</span> dq, <span class="type">int</span> le, <span class="type">int</span> ri, <span class="type">int</span> zh)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (b[dq].le == le &amp;&amp; b[dq].ri == ri)</span><br><span class="line">&#123;</span><br><span class="line">b[dq].maxz += zh, b[dq].lazy += zh;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">push_down</span>(dq);</span><br><span class="line"><span class="type">int</span> mi = (b[dq].le + b[dq].ri) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (le &gt; mi)</span><br><span class="line"><span class="built_in">xg</span>(<span class="built_in">RS</span>(dq), le, ri, zh);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (ri &lt;= mi)</span><br><span class="line"><span class="built_in">xg</span>(<span class="built_in">LS</span>(dq), le, ri, zh);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">xg</span>(<span class="built_in">LS</span>(dq), le, mi, zh), <span class="built_in">xg</span>(<span class="built_in">RS</span>(dq), mi + <span class="number">1</span>, ri, zh);</span><br><span class="line"><span class="built_in">push_up</span>(dq);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> last = n + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">xg</span>(<span class="number">1</span>, q[i].le, q[i].ri, q[i].zh);</span><br><span class="line"><span class="keyword">while</span> (q[last].wz + w &lt;= q[i].wz)</span><br><span class="line"><span class="built_in">xg</span>(<span class="number">1</span>, q[last].le, q[last].ri, q[last].zh), ++last;</span><br><span class="line">ans = <span class="built_in">max</span>(ans, b[<span class="number">1</span>].maxz);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(question x, question y)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="keyword">return</span> x.wz &lt; y.wz; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ans = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;w, &amp;h);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;sorx[i], &amp;sory[i], &amp;q[i].zh);</span><br><span class="line">q[i].wz = sorx[i], sory[i + n] = q[i].le = sory[i], sory[i] = q[i].ri = sory[i] + h - <span class="number">1</span>;</span><br><span class="line">q[i + n] = q[i];</span><br><span class="line">q[i + n].zh = -q[i].zh;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(sorx + <span class="number">1</span>, sorx + n + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">sort</span>(sory + <span class="number">1</span>, sory + (n &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>);</span><br><span class="line">sorx[<span class="number">0</span>] = <span class="built_in">unique</span>(sorx + <span class="number">1</span>, sorx + n + <span class="number">1</span>) - sorx - <span class="number">1</span>;</span><br><span class="line">sory[<span class="number">0</span>] = <span class="built_in">unique</span>(sory + <span class="number">1</span>, sory + (n &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>) - sory - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= (n &lt;&lt; <span class="number">1</span>); i++)</span><br><span class="line">&#123;</span><br><span class="line">q[i].le = <span class="built_in">max</span>(<span class="number">1</span>, (<span class="type">int</span>) (<span class="built_in">lower_bound</span>(sory + <span class="number">1</span>, sory + sory[<span class="number">0</span>] + <span class="number">1</span>, q[i].le) - sory));</span><br><span class="line">q[i].ri = <span class="built_in">min</span>(MAXN - <span class="number">1</span>, (<span class="type">int</span>) (<span class="built_in">lower_bound</span>(sory + <span class="number">1</span>, sory + sory[<span class="number">0</span>] + <span class="number">1</span>, q[i].ri) - sory));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(q + <span class="number">1</span>, q + n + <span class="number">1</span>, cmp);</span><br><span class="line"><span class="built_in">sort</span>(q + n + <span class="number">1</span>, q + (n &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>, cmp);</span><br><span class="line"><span class="built_in">js</span>(<span class="number">1</span>, <span class="number">1</span>, MAXN - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;stars.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;stars.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="type">int</span> t = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//scanf(&quot;%d&quot;, &amp;t);</span></span><br><span class="line"><span class="keyword">while</span> (t--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">init</span>();</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">3 5 4</span></span><br><span class="line"><span class="comment">1 2 3</span></span><br><span class="line"><span class="comment">2 3 2</span></span><br><span class="line"><span class="comment">6 3 1</span></span><br><span class="line"><span class="comment">3 5 4</span></span><br><span class="line"><span class="comment">1 2 3</span></span><br><span class="line"><span class="comment">2 3 2</span></span><br><span class="line"><span class="comment">5 3 1</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="t2">T2</h4><p>考试前一天<ahref="https://www.luogu.org/space/show?uid=52574">Steven张</a>dalao刚问我矩形周长并 &amp;&amp; 矩形面积并&amp;&amp; 矩形面积交的一些问题...我就正好学了一波标记永久化的写法, 发现非常资瓷啊,写起来非常方便啊...然后第二天就考了...</p><h4 id="t2代码">T2代码</h4><p>注意这时候线段树的叶子节点代表的是一段区间</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (100000 + 5)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXJ (10000 + 1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXQ ()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> max(a, b) ((a) &gt; (b) ? (a) : (b))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> min(a, b) ((a) &lt; (b) ? (a) : (b))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> abs(a) ((a) &lt; 0 ? (-(a)) : (a))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LS(dq) ((dq) &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RS(dq) (((dq) &lt;&lt; 1) | 1)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> <span class="comment">// 叶子[le, le]实际代表线段[le, le + 1] </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> cnt, zh, le, ri; <span class="comment">// 那么其实这个节点代表的值是 [le, ri + 1] </span></span><br><span class="line">&#125;b[MAXN &lt;&lt; <span class="number">4</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">que</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x, y, wz, zh;</span><br><span class="line"><span class="built_in">que</span>(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> w, <span class="type">int</span> c): <span class="built_in">x</span>(a), <span class="built_in">y</span>(b), <span class="built_in">wz</span>(w), <span class="built_in">zh</span>(c) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">js</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_up</span><span class="params">(<span class="type">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">xg</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(que, que)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//#define DEBUG</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> DEBUG</span></span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;picture.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;picture.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="type">int</span> n, inf = <span class="number">0</span>;</span><br><span class="line">vector&lt;que&gt; qx, qy;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">从左到右, 从下到上 </span></span><br><span class="line"><span class="comment">xx, yy</span></span><br><span class="line"><span class="comment">-------------</span></span><br><span class="line"><span class="comment">||</span></span><br><span class="line"><span class="comment">||</span></span><br><span class="line"><span class="comment">-------------</span></span><br><span class="line"><span class="comment">x, y</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x, y, xx, yy;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>, &amp;x, &amp;y, &amp;xx, &amp;yy);</span><br><span class="line">x += MAXJ, y += MAXJ, xx += MAXJ, yy += MAXJ;</span><br><span class="line">inf = <span class="built_in">max</span>(inf, <span class="built_in">max</span>(<span class="built_in">max</span>(x, y), <span class="built_in">max</span>(xx, yy)));</span><br><span class="line">qx.<span class="built_in">push_back</span>(<span class="built_in">que</span>(y, yy, x, <span class="number">1</span>));</span><br><span class="line">qx.<span class="built_in">push_back</span>(<span class="built_in">que</span>(y, yy, xx, <span class="number">-1</span>));</span><br><span class="line">qy.<span class="built_in">push_back</span>(<span class="built_in">que</span>(x, xx, y, <span class="number">1</span>));</span><br><span class="line">qy.<span class="built_in">push_back</span>(<span class="built_in">que</span>(x, xx, yy, <span class="number">-1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(qx.<span class="built_in">begin</span>(), qx.<span class="built_in">end</span>(), cmp);</span><br><span class="line"><span class="built_in">sort</span>(qy.<span class="built_in">begin</span>(), qy.<span class="built_in">end</span>(), cmp);</span><br><span class="line"><span class="built_in">js</span>(<span class="number">1</span>, <span class="number">1</span>, inf);</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; qx.<span class="built_in">size</span>(); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> last = b[<span class="number">1</span>].zh;</span><br><span class="line"><span class="built_in">xg</span>(<span class="number">1</span>, qx[i].x, qx[i].y - <span class="number">1</span>, qx[i].zh);</span><br><span class="line">ans += <span class="built_in">abs</span>(b[<span class="number">1</span>].zh - last);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">js</span>(<span class="number">1</span>, <span class="number">1</span>, inf);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; qy.<span class="built_in">size</span>(); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> last = b[<span class="number">1</span>].zh;</span><br><span class="line"><span class="built_in">xg</span>(<span class="number">1</span>, qy[i].x, qy[i].y - <span class="number">1</span>, qy[i].zh);</span><br><span class="line">ans += <span class="built_in">abs</span>(b[<span class="number">1</span>].zh - last);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">js</span><span class="params">(<span class="type">int</span> dq, <span class="type">int</span> le, <span class="type">int</span> ri)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">b[dq].le = le, b[dq].ri = ri;</span><br><span class="line">b[dq].zh = b[dq].cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (le == ri)</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line"><span class="type">int</span> mi = (le + ri) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="built_in">js</span>(<span class="built_in">LS</span>(dq), le, mi);</span><br><span class="line"><span class="built_in">js</span>(<span class="built_in">RS</span>(dq), mi + <span class="number">1</span>, ri);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">xg</span><span class="params">(<span class="type">int</span> dq, <span class="type">int</span> le, <span class="type">int</span> ri, <span class="type">int</span> zh)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (b[dq].le == le &amp;&amp; b[dq].ri == ri)</span><br><span class="line">&#123;</span><br><span class="line">b[dq].cnt += zh;</span><br><span class="line"><span class="built_in">push_up</span>(dq);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mi = (b[dq].le + b[dq].ri) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (le &gt; mi)</span><br><span class="line"><span class="built_in">xg</span>(<span class="built_in">RS</span>(dq), le, ri, zh);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (ri &lt;= mi)</span><br><span class="line"><span class="built_in">xg</span>(<span class="built_in">LS</span>(dq), le, ri, zh);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">xg</span>(<span class="built_in">LS</span>(dq), le, mi, zh), <span class="built_in">xg</span>(<span class="built_in">RS</span>(dq), mi + <span class="number">1</span>, ri, zh);</span><br><span class="line"><span class="built_in">push_up</span>(dq);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_up</span><span class="params">(<span class="type">int</span> dq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">b[dq].zh = b[<span class="built_in">LS</span>(dq)].zh + b[<span class="built_in">RS</span>(dq)].zh;</span><br><span class="line"><span class="keyword">if</span> (b[dq].cnt &gt; <span class="number">0</span>)</span><br><span class="line">b[dq].zh = (b[dq].ri - b[dq].le + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(que x, que y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x.wz == y.wz)</span><br><span class="line"><span class="keyword">return</span> x.zh &gt; y.zh;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> x.wz &lt; y.wz;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">1 1 3 3</span></span><br><span class="line"><span class="comment">2 2 4 4</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">7</span></span><br><span class="line"><span class="comment">-15 0 5 10</span></span><br><span class="line"><span class="comment">-5 8 20 25</span></span><br><span class="line"><span class="comment">15 -4 24 14</span></span><br><span class="line"><span class="comment">0 -6 16 4</span></span><br><span class="line"><span class="comment">2 15 10 22</span></span><br><span class="line"><span class="comment">30 10 36 20</span></span><br><span class="line"><span class="comment">34 0 40 16</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="t3">T3</h4><p>裸的二维线段树 区间覆盖, 区间max</p><p>我们发现直接肛二维线段树下发标记非常不资瓷啊...比如我就直接写残了...</p><p>然后捏, 我们看(参悟)了看(参悟)<ahref="https://blog.csdn.net/PoPoQQQ/article/details/46673953">po爷爷的blog</a>发现"woc还有这种操作"</p><p>...</p><p>标记永久化</p><p>我们需要维护一个值: <code>maxz</code>代表区间的最大值</p><p>我们要记录两个标记,:</p><ul><li>一个<code>rootdq</code>代表当前的矩形被完全覆盖的贡献(也就是当前节点代表的矩形<spanclass="math inline">\(\in\)</span>一次修改中的矩形)</li><li>一个<code>rootson</code>代表自己的儿子节点中覆盖的贡献(也就是一次修改中的矩形不必完全覆盖当前节点代表的矩形,而是覆盖到了当前节点的一个子矩形)</li></ul><p>这样, 我们修改的时候, 沿途的节点都修改<code>rootson</code>,最后完美覆盖的节点修改<code>rootdq</code>即可</p><p>而查询的时候相反,沿途的节点都查询<code>rootdq</code>以更新要查找矩形最大被覆盖的值,最后完美覆盖的节点查询<code>rootson</code>来看子矩形是否被覆盖过更大的值</p><p>还是挺妙的对吧?</p><h4 id="t3代码">T3代码</h4><p>出了半天的错, 又WA又T发现是<spanclass="math inline">\(\max\)</span>的锅...</p><p>如果这么写<span class="math inline">\(\max\)</span>函数:<code>#define max(a, b) ((a) &gt; (b) ? (a) :(b))</code>,然后你又将函数的返回值当成变量放在了<code>max()</code>里,而你的函数又恰好会对某些全局的值造成影响,你就会发现你的值被改变了两次...<span class="math inline">\(\to \mathrm{GG}\)</span></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LS(dq) ((dq) &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RS(dq) (((dq) &lt;&lt; 1) | 1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fa(dq) ((dq) &gt;&gt; 1)</span></span><br><span class="line"><span class="comment">//#define max(a, b) ((a) &gt; (b) ? (a) : (b))</span></span><br><span class="line"><span class="comment">//#define min(a, b) ((a) &lt; (b) ? (a) : (b))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN (10000 + 5)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">nodex</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> ls, rs, le, ri, maxz, lazy; <span class="comment">// [le, ri + 1]</span></span><br><span class="line"><span class="built_in">nodex</span>(): <span class="built_in">ls</span>(<span class="number">0</span>), <span class="built_in">rs</span>(<span class="number">0</span>), <span class="built_in">maxz</span>(<span class="number">0</span>), <span class="built_in">lazy</span>(<span class="number">0</span>) &#123;&#125;</span><br><span class="line">&#125;bx[MAXN &lt;&lt; <span class="number">8</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">nodey</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> le, ri, lazy, rootdq, rootson; <span class="comment">// [le, ri + 1]</span></span><br><span class="line"><span class="built_in">nodey</span>(): <span class="built_in">lazy</span>(<span class="number">0</span>) &#123;&#125;</span><br><span class="line">&#125;by[MAXN &lt;&lt; <span class="number">3</span>];</span><br><span class="line"><span class="type">int</span> n, d, s;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">newnode</span><span class="params">(<span class="type">int</span> le, <span class="type">int</span> ri)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">bx[++cnt].le = le, bx[cnt].ri = ri;</span><br><span class="line"><span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">jsy</span><span class="params">(<span class="type">int</span> dq, <span class="type">int</span> le, <span class="type">int</span> ri)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">by[dq].le = le, by[dq].ri = ri;</span><br><span class="line">by[dq].rootdq = <span class="built_in">newnode</span>(<span class="number">1</span>, d);</span><br><span class="line">by[dq].rootson = <span class="built_in">newnode</span>(<span class="number">1</span>, d);</span><br><span class="line"><span class="keyword">if</span> (le == ri)</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line"><span class="type">int</span> mi = (le + ri) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="built_in">jsy</span>(<span class="built_in">LS</span>(dq), le, mi);</span><br><span class="line"><span class="built_in">jsy</span>(<span class="built_in">RS</span>(dq), mi + <span class="number">1</span>, ri);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cxx</span><span class="params">(<span class="type">int</span> dq, <span class="type">int</span> le, <span class="type">int</span> ri)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!dq)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> re = bx[dq].lazy;</span><br><span class="line"><span class="keyword">if</span> (bx[dq].le == le &amp;&amp; bx[dq].ri == ri)</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">max</span>(re, bx[dq].maxz);</span><br><span class="line"><span class="type">int</span> mi = (bx[dq].le + bx[dq].ri) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (le &gt; mi)</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">max</span>(re, <span class="built_in">cxx</span>(bx[dq].rs, le, ri));</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (ri &lt;= mi)</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">max</span>(re, <span class="built_in">cxx</span>(bx[dq].ls, le, ri));</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">max</span>(re, <span class="built_in">max</span>(<span class="built_in">cxx</span>(bx[dq].ls, le, mi), <span class="built_in">cxx</span>(bx[dq].rs, mi + <span class="number">1</span>, ri)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cxy</span><span class="params">(<span class="type">int</span> dq, <span class="type">int</span> le, <span class="type">int</span> ri, <span class="type">int</span> lx, <span class="type">int</span> rx)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> re = <span class="built_in">cxx</span>(by[dq].rootdq, lx, rx);</span><br><span class="line"><span class="keyword">if</span> (by[dq].le == le &amp;&amp; by[dq].ri == ri)</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">max</span>(re, <span class="built_in">cxx</span>(by[dq].rootson, lx, rx));</span><br><span class="line"><span class="type">int</span> mi = (by[dq].le + by[dq].ri) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (ri &lt;= mi)</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">max</span>(re, <span class="built_in">cxy</span>(<span class="built_in">LS</span>(dq), le, ri, lx, rx));</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (le &gt; mi)</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">max</span>(re, <span class="built_in">cxy</span>(<span class="built_in">RS</span>(dq), le, ri, lx, rx));</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">max</span>(re, <span class="built_in">max</span>(<span class="built_in">cxy</span>(<span class="built_in">LS</span>(dq), le, mi, lx, rx), <span class="built_in">cxy</span>(<span class="built_in">RS</span>(dq), mi + <span class="number">1</span>, ri, lx, rx)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">xgx</span><span class="params">(<span class="type">int</span>&amp; dq, <span class="type">int</span> le, <span class="type">int</span> ri, <span class="type">int</span> zh, <span class="type">int</span> dql, <span class="type">int</span> dqr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!dq)</span><br><span class="line">dq = <span class="built_in">newnode</span>(dql, dqr);</span><br><span class="line">bx[dq].maxz = <span class="built_in">max</span>(bx[dq].maxz, zh);</span><br><span class="line"><span class="keyword">if</span> (dql == le &amp;&amp; dqr == ri)</span><br><span class="line">&#123;</span><br><span class="line">bx[dq].lazy = <span class="built_in">max</span>(bx[dq].lazy, zh);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mi = (dql + dqr) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (ri &lt;= mi)</span><br><span class="line"><span class="built_in">xgx</span>(bx[dq].ls, le, ri, zh, dql, mi);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (le &gt; mi)</span><br><span class="line"><span class="built_in">xgx</span>(bx[dq].rs, le, ri, zh, mi + <span class="number">1</span>, dqr);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">xgx</span>(bx[dq].ls, le, mi, zh, dql, mi), <span class="built_in">xgx</span>(bx[dq].rs, mi + <span class="number">1</span>, ri, zh, mi + <span class="number">1</span>, dqr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">xgy</span><span class="params">(<span class="type">int</span> dq, <span class="type">int</span> le, <span class="type">int</span> ri, <span class="type">int</span> lx, <span class="type">int</span> rx, <span class="type">int</span> zh)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//if (le &gt; ri)return ;</span></span><br><span class="line"><span class="built_in">xgx</span>(by[dq].rootson, lx, rx, zh, <span class="number">1</span>, d);</span><br><span class="line"><span class="keyword">if</span> (by[dq].le == le &amp;&amp; by[dq].ri == ri)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">xgx</span>(by[dq].rootdq, lx, rx, zh, <span class="number">1</span>, d);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mi = (by[dq].le + by[dq].ri) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (ri &lt;= mi)</span><br><span class="line"><span class="built_in">xgy</span>(<span class="built_in">LS</span>(dq), le, ri, lx, rx, zh);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (le &gt; mi)</span><br><span class="line"><span class="built_in">xgy</span>(<span class="built_in">RS</span>(dq), le, ri, lx, rx, zh);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">xgy</span>(<span class="built_in">LS</span>(dq), le, mi, lx, rx, zh), <span class="built_in">xgy</span>(<span class="built_in">RS</span>(dq), mi + <span class="number">1</span>, ri, lx, rx, zh);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//#define DEBUG</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> DEBUG</span></span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;tet.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;tet.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;d, &amp;s, &amp;n);</span><br><span class="line"><span class="built_in">jsy</span>(<span class="number">1</span>, <span class="number">1</span>, s);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> chang, kuan, gao, x, y, xx, yy;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d%d&quot;</span>, &amp;chang, &amp;kuan, &amp;gao, &amp;x, &amp;y);</span><br><span class="line">++x, ++y;</span><br><span class="line">xx = x + chang, yy = y + kuan;</span><br><span class="line"><span class="comment">//printf(&quot;case #%d: HI~ x: %d, xx: %d, y: %d, yy: %d, le: %d\n&quot;, i, x, xx, y, yy, by[1].le);</span></span><br><span class="line"><span class="type">int</span> maxh = <span class="built_in">cxy</span>(<span class="number">1</span>, y, yy - <span class="number">1</span>, x, xx - <span class="number">1</span>);</span><br><span class="line"><span class="comment">//printf(&quot;case #%d: %d x: %d, xx: %d, y: %d, yy: %d, le: %d\n&quot;, i, maxh, x, xx, y, yy, by[1].le);</span></span><br><span class="line"><span class="built_in">xgy</span>(<span class="number">1</span>, y, yy - <span class="number">1</span>, x, xx - <span class="number">1</span>, maxh + gao);</span><br><span class="line"><span class="comment">//printf(&quot;case #%d: %d\n&quot;, i, by[1].le);</span></span><br><span class="line"><span class="comment">//printf(&quot;case #%d: %d\n&quot;, i, cnt);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, <span class="built_in">cxy</span>(<span class="number">1</span>, <span class="number">1</span>, s - <span class="number">1</span>, <span class="number">1</span>, d - <span class="number">1</span>));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">7 5 4</span></span><br><span class="line"><span class="comment">4 3 2 0 0</span></span><br><span class="line"><span class="comment">3 3 1 3 0</span></span><br><span class="line"><span class="comment">7 1 2 0 3</span></span><br><span class="line"><span class="comment">2 3 3 2 2</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>By 险些爆零并疯狂<span class="math inline">\(\bmod (AKfun +TreeLovesWater)\)</span>的 Cansult</p>]]></content>
      
      
      <categories>
          
          <category> 翻车笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
            <tag> 扫描线 </tag>
            
            <tag> 树套树 </tag>
            
            <tag> 标记持久化 </tag>
            
            <tag> 翻车 </tag>
            
            <tag> 清奇脑回路 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
